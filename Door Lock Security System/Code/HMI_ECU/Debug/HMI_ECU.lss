
HMI_ECU.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00003366  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000001cc  00800060  00003366  000033fa  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000001b  0080022c  0080022c  000035c6  2**0
                  ALLOC
  3 .stab         00003060  00000000  00000000  000035c8  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000014cc  00000000  00000000  00006628  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  00007af4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  00007c34  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  00007da4  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  000099ed  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  0000a8d8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  0000b688  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  0000b7e8  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  0000ba75  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000c243  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 a6 14 	jmp	0x294c	; 0x294c <__vector_3>
      10:	0c 94 73 14 	jmp	0x28e6	; 0x28e6 <__vector_4>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 40 14 	jmp	0x2880	; 0x2880 <__vector_6>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 0d 14 	jmp	0x281a	; 0x281a <__vector_8>
      24:	0c 94 a7 13 	jmp	0x274e	; 0x274e <__vector_9>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 da 13 	jmp	0x27b4	; 0x27b4 <__vector_19>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d4 e0       	ldi	r29, 0x04	; 4
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	12 e0       	ldi	r17, 0x02	; 2
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e6 e6       	ldi	r30, 0x66	; 102
      68:	f3 e3       	ldi	r31, 0x33	; 51
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	ac 32       	cpi	r26, 0x2C	; 44
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	12 e0       	ldi	r17, 0x02	; 2
      78:	ac e2       	ldi	r26, 0x2C	; 44
      7a:	b2 e0       	ldi	r27, 0x02	; 2
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a7 34       	cpi	r26, 0x47	; 71
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 54 0c 	call	0x18a8	; 0x18a8 <main>
      8a:	0c 94 b1 19 	jmp	0x3362	; 0x3362 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 35 19 	jmp	0x326a	; 0x326a <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	ad e0       	ldi	r26, 0x0D	; 13
     128:	b2 e0       	ldi	r27, 0x02	; 2
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 51 19 	jmp	0x32a2	; 0x32a2 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 41 19 	jmp	0x3282	; 0x3282 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 5d 19 	jmp	0x32ba	; 0x32ba <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 41 19 	jmp	0x3282	; 0x3282 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 5d 19 	jmp	0x32ba	; 0x32ba <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 35 19 	jmp	0x326a	; 0x326a <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__stack+0x3f>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__stack+0x55>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__stack+0x2d>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__stack+0x3f>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__stack+0x35>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__stack+0x3b>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__stack+0x55>
     494:	8d e0       	ldi	r24, 0x0D	; 13
     496:	92 e0       	ldi	r25, 0x02	; 2
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__stack+0x1c7>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__stack+0x51>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__stack+0x1c7>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__stack+0x67>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__stack+0x1c7>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__stack+0xd3>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__stack+0xc7>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__stack+0xef>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__stack+0x109>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__stack+0x8f>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__stack+0x14d>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__stack+0x141>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__stack+0x11f>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__stack+0x16b>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__stack+0x153>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__stack+0x1ad>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__stack+0x1ad>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__stack+0x1ad>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__stack+0x1b7>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 51 19 	jmp	0x32a2	; 0x32a2 <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 41 19 	jmp	0x3282	; 0x3282 <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 5d 19 	jmp	0x32ba	; 0x32ba <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 41 19 	jmp	0x3282	; 0x3282 <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 5d 19 	jmp	0x32ba	; 0x32ba <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 41 19 	jmp	0x3282	; 0x3282 <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 5d 19 	jmp	0x32ba	; 0x32ba <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 45 19 	jmp	0x328a	; 0x328a <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 61 19 	jmp	0x32c2	; 0x32c2 <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__pack_f+0x178>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__pack_f+0x172>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__pack_f+0x17c>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__pack_f+0x114>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__pack_f+0x76>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__pack_f+0xca>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__pack_f+0x86>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__pack_f+0x7e>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__pack_f+0x9c>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__pack_f+0x94>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__pack_f+0xbe>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__pack_f+0xee>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__pack_f+0xf6>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__pack_f+0xf6>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__pack_f+0x10e>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__pack_f+0x162>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__pack_f+0x172>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__pack_f+0x144>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__pack_f+0x154>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__pack_f+0x14c>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__pack_f+0x162>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__pack_f+0x164>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__pack_f+0x17c>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <APP_setNewPassword>:
 * [in/out]		 	None
 *
 * [Returns]:       None
 **********************************************************************************/
void APP_setNewPassword(uint8 a_systemStatus)
{
     b46:	df 93       	push	r29
     b48:	cf 93       	push	r28
     b4a:	cd b7       	in	r28, 0x3d	; 61
     b4c:	de b7       	in	r29, 0x3e	; 62
     b4e:	ac 97       	sbiw	r28, 0x2c	; 44
     b50:	0f b6       	in	r0, 0x3f	; 63
     b52:	f8 94       	cli
     b54:	de bf       	out	0x3e, r29	; 62
     b56:	0f be       	out	0x3f, r0	; 63
     b58:	cd bf       	out	0x3d, r28	; 61
     b5a:	8c a7       	std	Y+44, r24	; 0x2c
	uint8 a_passwordMatch;	/* Local variable to store the password status */

	do
	{
		/* Check if this is the first time to login the system or not */
		if(a_systemStatus == FIRST_TIME_TO_LOGIN)
     b5c:	8c a5       	ldd	r24, Y+44	; 0x2c
     b5e:	81 30       	cpi	r24, 0x01	; 1
     b60:	09 f0       	breq	.+2      	; 0xb64 <APP_setNewPassword+0x1e>
     b62:	78 c0       	rjmp	.+240    	; 0xc54 <APP_setNewPassword+0x10e>
		{
			/* This message appears only in the first time to login to the system */
			LCD_clearScreen();
     b64:	0e 94 9d 13 	call	0x273a	; 0x273a <LCD_clearScreen>
			LCD_displayString("FIRST TIME TO LOGIN");
     b68:	80 e6       	ldi	r24, 0x60	; 96
     b6a:	90 e0       	ldi	r25, 0x00	; 0
     b6c:	0e 94 f6 12 	call	0x25ec	; 0x25ec <LCD_displayString>
     b70:	80 e0       	ldi	r24, 0x00	; 0
     b72:	90 e0       	ldi	r25, 0x00	; 0
     b74:	a8 e4       	ldi	r26, 0x48	; 72
     b76:	b4 e4       	ldi	r27, 0x44	; 68
     b78:	8f a3       	std	Y+39, r24	; 0x27
     b7a:	98 a7       	std	Y+40, r25	; 0x28
     b7c:	a9 a7       	std	Y+41, r26	; 0x29
     b7e:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     b80:	6f a1       	ldd	r22, Y+39	; 0x27
     b82:	78 a5       	ldd	r23, Y+40	; 0x28
     b84:	89 a5       	ldd	r24, Y+41	; 0x29
     b86:	9a a5       	ldd	r25, Y+42	; 0x2a
     b88:	20 e0       	ldi	r18, 0x00	; 0
     b8a:	30 e0       	ldi	r19, 0x00	; 0
     b8c:	4a ef       	ldi	r20, 0xFA	; 250
     b8e:	54 e4       	ldi	r21, 0x44	; 68
     b90:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     b94:	dc 01       	movw	r26, r24
     b96:	cb 01       	movw	r24, r22
     b98:	8b a3       	std	Y+35, r24	; 0x23
     b9a:	9c a3       	std	Y+36, r25	; 0x24
     b9c:	ad a3       	std	Y+37, r26	; 0x25
     b9e:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
     ba0:	6b a1       	ldd	r22, Y+35	; 0x23
     ba2:	7c a1       	ldd	r23, Y+36	; 0x24
     ba4:	8d a1       	ldd	r24, Y+37	; 0x25
     ba6:	9e a1       	ldd	r25, Y+38	; 0x26
     ba8:	20 e0       	ldi	r18, 0x00	; 0
     baa:	30 e0       	ldi	r19, 0x00	; 0
     bac:	40 e8       	ldi	r20, 0x80	; 128
     bae:	5f e3       	ldi	r21, 0x3F	; 63
     bb0:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     bb4:	88 23       	and	r24, r24
     bb6:	2c f4       	brge	.+10     	; 0xbc2 <APP_setNewPassword+0x7c>
		__ticks = 1;
     bb8:	81 e0       	ldi	r24, 0x01	; 1
     bba:	90 e0       	ldi	r25, 0x00	; 0
     bbc:	9a a3       	std	Y+34, r25	; 0x22
     bbe:	89 a3       	std	Y+33, r24	; 0x21
     bc0:	3f c0       	rjmp	.+126    	; 0xc40 <APP_setNewPassword+0xfa>
	else if (__tmp > 65535)
     bc2:	6b a1       	ldd	r22, Y+35	; 0x23
     bc4:	7c a1       	ldd	r23, Y+36	; 0x24
     bc6:	8d a1       	ldd	r24, Y+37	; 0x25
     bc8:	9e a1       	ldd	r25, Y+38	; 0x26
     bca:	20 e0       	ldi	r18, 0x00	; 0
     bcc:	3f ef       	ldi	r19, 0xFF	; 255
     bce:	4f e7       	ldi	r20, 0x7F	; 127
     bd0:	57 e4       	ldi	r21, 0x47	; 71
     bd2:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     bd6:	18 16       	cp	r1, r24
     bd8:	4c f5       	brge	.+82     	; 0xc2c <APP_setNewPassword+0xe6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     bda:	6f a1       	ldd	r22, Y+39	; 0x27
     bdc:	78 a5       	ldd	r23, Y+40	; 0x28
     bde:	89 a5       	ldd	r24, Y+41	; 0x29
     be0:	9a a5       	ldd	r25, Y+42	; 0x2a
     be2:	20 e0       	ldi	r18, 0x00	; 0
     be4:	30 e0       	ldi	r19, 0x00	; 0
     be6:	40 e2       	ldi	r20, 0x20	; 32
     be8:	51 e4       	ldi	r21, 0x41	; 65
     bea:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     bee:	dc 01       	movw	r26, r24
     bf0:	cb 01       	movw	r24, r22
     bf2:	bc 01       	movw	r22, r24
     bf4:	cd 01       	movw	r24, r26
     bf6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     bfa:	dc 01       	movw	r26, r24
     bfc:	cb 01       	movw	r24, r22
     bfe:	9a a3       	std	Y+34, r25	; 0x22
     c00:	89 a3       	std	Y+33, r24	; 0x21
     c02:	0f c0       	rjmp	.+30     	; 0xc22 <APP_setNewPassword+0xdc>
     c04:	88 ec       	ldi	r24, 0xC8	; 200
     c06:	90 e0       	ldi	r25, 0x00	; 0
     c08:	98 a3       	std	Y+32, r25	; 0x20
     c0a:	8f 8f       	std	Y+31, r24	; 0x1f
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     c0c:	8f 8d       	ldd	r24, Y+31	; 0x1f
     c0e:	98 a1       	ldd	r25, Y+32	; 0x20
     c10:	01 97       	sbiw	r24, 0x01	; 1
     c12:	f1 f7       	brne	.-4      	; 0xc10 <APP_setNewPassword+0xca>
     c14:	98 a3       	std	Y+32, r25	; 0x20
     c16:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     c18:	89 a1       	ldd	r24, Y+33	; 0x21
     c1a:	9a a1       	ldd	r25, Y+34	; 0x22
     c1c:	01 97       	sbiw	r24, 0x01	; 1
     c1e:	9a a3       	std	Y+34, r25	; 0x22
     c20:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     c22:	89 a1       	ldd	r24, Y+33	; 0x21
     c24:	9a a1       	ldd	r25, Y+34	; 0x22
     c26:	00 97       	sbiw	r24, 0x00	; 0
     c28:	69 f7       	brne	.-38     	; 0xc04 <APP_setNewPassword+0xbe>
     c2a:	14 c0       	rjmp	.+40     	; 0xc54 <APP_setNewPassword+0x10e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     c2c:	6b a1       	ldd	r22, Y+35	; 0x23
     c2e:	7c a1       	ldd	r23, Y+36	; 0x24
     c30:	8d a1       	ldd	r24, Y+37	; 0x25
     c32:	9e a1       	ldd	r25, Y+38	; 0x26
     c34:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     c38:	dc 01       	movw	r26, r24
     c3a:	cb 01       	movw	r24, r22
     c3c:	9a a3       	std	Y+34, r25	; 0x22
     c3e:	89 a3       	std	Y+33, r24	; 0x21
     c40:	89 a1       	ldd	r24, Y+33	; 0x21
     c42:	9a a1       	ldd	r25, Y+34	; 0x22
     c44:	9e 8f       	std	Y+30, r25	; 0x1e
     c46:	8d 8f       	std	Y+29, r24	; 0x1d
     c48:	8d 8d       	ldd	r24, Y+29	; 0x1d
     c4a:	9e 8d       	ldd	r25, Y+30	; 0x1e
     c4c:	01 97       	sbiw	r24, 0x01	; 1
     c4e:	f1 f7       	brne	.-4      	; 0xc4c <APP_setNewPassword+0x106>
     c50:	9e 8f       	std	Y+30, r25	; 0x1e
     c52:	8d 8f       	std	Y+29, r24	; 0x1d
			_delay_ms(LONG_DISPLAY_TIME);	/* Keep the message on the screen for a while */
		}

		/* Call function to initialize the system for the first time */
		APP_init();
     c54:	0e 94 4a 07 	call	0xe94	; 0xe94 <APP_init>

		/* Call function to compare between two passwords, and get the result */
		a_passwordMatch = APP_checkPasswordMismatch(g_password1, g_password2);
     c58:	8d e3       	ldi	r24, 0x3D	; 61
     c5a:	92 e0       	ldi	r25, 0x02	; 2
     c5c:	22 e4       	ldi	r18, 0x42	; 66
     c5e:	32 e0       	ldi	r19, 0x02	; 2
     c60:	b9 01       	movw	r22, r18
     c62:	0e 94 fa 08 	call	0x11f4	; 0x11f4 <APP_checkPasswordMismatch>
     c66:	8b a7       	std	Y+43, r24	; 0x2b
		/*
		 * Check if the two passwords are identical or not:
		 * 	 - If two passwords are not identical, repeat theses steps again
		 * 	 - If two passwords are identical, break the loop
		 */
		if(a_passwordMatch == MISMATCHED)
     c68:	8b a5       	ldd	r24, Y+43	; 0x2b
     c6a:	81 30       	cpi	r24, 0x01	; 1
     c6c:	09 f0       	breq	.+2      	; 0xc70 <APP_setNewPassword+0x12a>
     c6e:	82 c0       	rjmp	.+260    	; 0xd74 <APP_setNewPassword+0x22e>
		{
			LCD_clearScreen();
     c70:	0e 94 9d 13 	call	0x273a	; 0x273a <LCD_clearScreen>
			LCD_displayStringRowColumn(0, 1, "PASSWORD UNMATCHED");
     c74:	24 e7       	ldi	r18, 0x74	; 116
     c76:	30 e0       	ldi	r19, 0x00	; 0
     c78:	80 e0       	ldi	r24, 0x00	; 0
     c7a:	61 e0       	ldi	r22, 0x01	; 1
     c7c:	a9 01       	movw	r20, r18
     c7e:	0e 94 61 13 	call	0x26c2	; 0x26c2 <LCD_displayStringRowColumn>
			LCD_displayStringRowColumn(1, 5, "TRY AGAIN");
     c82:	27 e8       	ldi	r18, 0x87	; 135
     c84:	30 e0       	ldi	r19, 0x00	; 0
     c86:	81 e0       	ldi	r24, 0x01	; 1
     c88:	65 e0       	ldi	r22, 0x05	; 5
     c8a:	a9 01       	movw	r20, r18
     c8c:	0e 94 61 13 	call	0x26c2	; 0x26c2 <LCD_displayStringRowColumn>
     c90:	80 e0       	ldi	r24, 0x00	; 0
     c92:	90 e0       	ldi	r25, 0x00	; 0
     c94:	aa ef       	ldi	r26, 0xFA	; 250
     c96:	b3 e4       	ldi	r27, 0x43	; 67
     c98:	89 8f       	std	Y+25, r24	; 0x19
     c9a:	9a 8f       	std	Y+26, r25	; 0x1a
     c9c:	ab 8f       	std	Y+27, r26	; 0x1b
     c9e:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     ca0:	69 8d       	ldd	r22, Y+25	; 0x19
     ca2:	7a 8d       	ldd	r23, Y+26	; 0x1a
     ca4:	8b 8d       	ldd	r24, Y+27	; 0x1b
     ca6:	9c 8d       	ldd	r25, Y+28	; 0x1c
     ca8:	20 e0       	ldi	r18, 0x00	; 0
     caa:	30 e0       	ldi	r19, 0x00	; 0
     cac:	4a ef       	ldi	r20, 0xFA	; 250
     cae:	54 e4       	ldi	r21, 0x44	; 68
     cb0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     cb4:	dc 01       	movw	r26, r24
     cb6:	cb 01       	movw	r24, r22
     cb8:	8d 8b       	std	Y+21, r24	; 0x15
     cba:	9e 8b       	std	Y+22, r25	; 0x16
     cbc:	af 8b       	std	Y+23, r26	; 0x17
     cbe:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
     cc0:	6d 89       	ldd	r22, Y+21	; 0x15
     cc2:	7e 89       	ldd	r23, Y+22	; 0x16
     cc4:	8f 89       	ldd	r24, Y+23	; 0x17
     cc6:	98 8d       	ldd	r25, Y+24	; 0x18
     cc8:	20 e0       	ldi	r18, 0x00	; 0
     cca:	30 e0       	ldi	r19, 0x00	; 0
     ccc:	40 e8       	ldi	r20, 0x80	; 128
     cce:	5f e3       	ldi	r21, 0x3F	; 63
     cd0:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     cd4:	88 23       	and	r24, r24
     cd6:	2c f4       	brge	.+10     	; 0xce2 <APP_setNewPassword+0x19c>
		__ticks = 1;
     cd8:	81 e0       	ldi	r24, 0x01	; 1
     cda:	90 e0       	ldi	r25, 0x00	; 0
     cdc:	9c 8b       	std	Y+20, r25	; 0x14
     cde:	8b 8b       	std	Y+19, r24	; 0x13
     ce0:	3f c0       	rjmp	.+126    	; 0xd60 <APP_setNewPassword+0x21a>
	else if (__tmp > 65535)
     ce2:	6d 89       	ldd	r22, Y+21	; 0x15
     ce4:	7e 89       	ldd	r23, Y+22	; 0x16
     ce6:	8f 89       	ldd	r24, Y+23	; 0x17
     ce8:	98 8d       	ldd	r25, Y+24	; 0x18
     cea:	20 e0       	ldi	r18, 0x00	; 0
     cec:	3f ef       	ldi	r19, 0xFF	; 255
     cee:	4f e7       	ldi	r20, 0x7F	; 127
     cf0:	57 e4       	ldi	r21, 0x47	; 71
     cf2:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     cf6:	18 16       	cp	r1, r24
     cf8:	4c f5       	brge	.+82     	; 0xd4c <APP_setNewPassword+0x206>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     cfa:	69 8d       	ldd	r22, Y+25	; 0x19
     cfc:	7a 8d       	ldd	r23, Y+26	; 0x1a
     cfe:	8b 8d       	ldd	r24, Y+27	; 0x1b
     d00:	9c 8d       	ldd	r25, Y+28	; 0x1c
     d02:	20 e0       	ldi	r18, 0x00	; 0
     d04:	30 e0       	ldi	r19, 0x00	; 0
     d06:	40 e2       	ldi	r20, 0x20	; 32
     d08:	51 e4       	ldi	r21, 0x41	; 65
     d0a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     d0e:	dc 01       	movw	r26, r24
     d10:	cb 01       	movw	r24, r22
     d12:	bc 01       	movw	r22, r24
     d14:	cd 01       	movw	r24, r26
     d16:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     d1a:	dc 01       	movw	r26, r24
     d1c:	cb 01       	movw	r24, r22
     d1e:	9c 8b       	std	Y+20, r25	; 0x14
     d20:	8b 8b       	std	Y+19, r24	; 0x13
     d22:	0f c0       	rjmp	.+30     	; 0xd42 <APP_setNewPassword+0x1fc>
     d24:	88 ec       	ldi	r24, 0xC8	; 200
     d26:	90 e0       	ldi	r25, 0x00	; 0
     d28:	9a 8b       	std	Y+18, r25	; 0x12
     d2a:	89 8b       	std	Y+17, r24	; 0x11
     d2c:	89 89       	ldd	r24, Y+17	; 0x11
     d2e:	9a 89       	ldd	r25, Y+18	; 0x12
     d30:	01 97       	sbiw	r24, 0x01	; 1
     d32:	f1 f7       	brne	.-4      	; 0xd30 <APP_setNewPassword+0x1ea>
     d34:	9a 8b       	std	Y+18, r25	; 0x12
     d36:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     d38:	8b 89       	ldd	r24, Y+19	; 0x13
     d3a:	9c 89       	ldd	r25, Y+20	; 0x14
     d3c:	01 97       	sbiw	r24, 0x01	; 1
     d3e:	9c 8b       	std	Y+20, r25	; 0x14
     d40:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     d42:	8b 89       	ldd	r24, Y+19	; 0x13
     d44:	9c 89       	ldd	r25, Y+20	; 0x14
     d46:	00 97       	sbiw	r24, 0x00	; 0
     d48:	69 f7       	brne	.-38     	; 0xd24 <APP_setNewPassword+0x1de>
     d4a:	14 c0       	rjmp	.+40     	; 0xd74 <APP_setNewPassword+0x22e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     d4c:	6d 89       	ldd	r22, Y+21	; 0x15
     d4e:	7e 89       	ldd	r23, Y+22	; 0x16
     d50:	8f 89       	ldd	r24, Y+23	; 0x17
     d52:	98 8d       	ldd	r25, Y+24	; 0x18
     d54:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     d58:	dc 01       	movw	r26, r24
     d5a:	cb 01       	movw	r24, r22
     d5c:	9c 8b       	std	Y+20, r25	; 0x14
     d5e:	8b 8b       	std	Y+19, r24	; 0x13
     d60:	8b 89       	ldd	r24, Y+19	; 0x13
     d62:	9c 89       	ldd	r25, Y+20	; 0x14
     d64:	98 8b       	std	Y+16, r25	; 0x10
     d66:	8f 87       	std	Y+15, r24	; 0x0f
     d68:	8f 85       	ldd	r24, Y+15	; 0x0f
     d6a:	98 89       	ldd	r25, Y+16	; 0x10
     d6c:	01 97       	sbiw	r24, 0x01	; 1
     d6e:	f1 f7       	brne	.-4      	; 0xd6c <APP_setNewPassword+0x226>
     d70:	98 8b       	std	Y+16, r25	; 0x10
     d72:	8f 87       	std	Y+15, r24	; 0x0f
			_delay_ms(SHORT_DISPLAY_TIME);	/* Keep the message on the screen for a while */
		}

	}while(a_passwordMatch == MISMATCHED);
     d74:	8b a5       	ldd	r24, Y+43	; 0x2b
     d76:	81 30       	cpi	r24, 0x01	; 1
     d78:	09 f4       	brne	.+2      	; 0xd7c <APP_setNewPassword+0x236>
     d7a:	f0 ce       	rjmp	.-544    	; 0xb5c <APP_setNewPassword+0x16>

	/*
	 * If two passwords are identical, send the password to the Control ECU,
	 * and display message "PASSWORD MATCHED"
	 */
	if(a_passwordMatch == MATCHED)
     d7c:	8b a5       	ldd	r24, Y+43	; 0x2b
     d7e:	88 23       	and	r24, r24
     d80:	09 f0       	breq	.+2      	; 0xd84 <APP_setNewPassword+0x23e>
     d82:	7f c0       	rjmp	.+254    	; 0xe82 <APP_setNewPassword+0x33c>
	{
		/* Call function that responsible for sending password to the Control ECU */
		APP_sendPassword(g_password1);
     d84:	8d e3       	ldi	r24, 0x3D	; 61
     d86:	92 e0       	ldi	r25, 0x02	; 2
     d88:	0e 94 e2 09 	call	0x13c4	; 0x13c4 <APP_sendPassword>

		LCD_clearScreen();
     d8c:	0e 94 9d 13 	call	0x273a	; 0x273a <LCD_clearScreen>
		LCD_displayStringRowColumn(0, 2, "PASSWORD MATCHED");
     d90:	21 e9       	ldi	r18, 0x91	; 145
     d92:	30 e0       	ldi	r19, 0x00	; 0
     d94:	80 e0       	ldi	r24, 0x00	; 0
     d96:	62 e0       	ldi	r22, 0x02	; 2
     d98:	a9 01       	movw	r20, r18
     d9a:	0e 94 61 13 	call	0x26c2	; 0x26c2 <LCD_displayStringRowColumn>
     d9e:	80 e0       	ldi	r24, 0x00	; 0
     da0:	90 e0       	ldi	r25, 0x00	; 0
     da2:	aa ef       	ldi	r26, 0xFA	; 250
     da4:	b3 e4       	ldi	r27, 0x43	; 67
     da6:	8b 87       	std	Y+11, r24	; 0x0b
     da8:	9c 87       	std	Y+12, r25	; 0x0c
     daa:	ad 87       	std	Y+13, r26	; 0x0d
     dac:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     dae:	6b 85       	ldd	r22, Y+11	; 0x0b
     db0:	7c 85       	ldd	r23, Y+12	; 0x0c
     db2:	8d 85       	ldd	r24, Y+13	; 0x0d
     db4:	9e 85       	ldd	r25, Y+14	; 0x0e
     db6:	20 e0       	ldi	r18, 0x00	; 0
     db8:	30 e0       	ldi	r19, 0x00	; 0
     dba:	4a ef       	ldi	r20, 0xFA	; 250
     dbc:	54 e4       	ldi	r21, 0x44	; 68
     dbe:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     dc2:	dc 01       	movw	r26, r24
     dc4:	cb 01       	movw	r24, r22
     dc6:	8f 83       	std	Y+7, r24	; 0x07
     dc8:	98 87       	std	Y+8, r25	; 0x08
     dca:	a9 87       	std	Y+9, r26	; 0x09
     dcc:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     dce:	6f 81       	ldd	r22, Y+7	; 0x07
     dd0:	78 85       	ldd	r23, Y+8	; 0x08
     dd2:	89 85       	ldd	r24, Y+9	; 0x09
     dd4:	9a 85       	ldd	r25, Y+10	; 0x0a
     dd6:	20 e0       	ldi	r18, 0x00	; 0
     dd8:	30 e0       	ldi	r19, 0x00	; 0
     dda:	40 e8       	ldi	r20, 0x80	; 128
     ddc:	5f e3       	ldi	r21, 0x3F	; 63
     dde:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     de2:	88 23       	and	r24, r24
     de4:	2c f4       	brge	.+10     	; 0xdf0 <APP_setNewPassword+0x2aa>
		__ticks = 1;
     de6:	81 e0       	ldi	r24, 0x01	; 1
     de8:	90 e0       	ldi	r25, 0x00	; 0
     dea:	9e 83       	std	Y+6, r25	; 0x06
     dec:	8d 83       	std	Y+5, r24	; 0x05
     dee:	3f c0       	rjmp	.+126    	; 0xe6e <APP_setNewPassword+0x328>
	else if (__tmp > 65535)
     df0:	6f 81       	ldd	r22, Y+7	; 0x07
     df2:	78 85       	ldd	r23, Y+8	; 0x08
     df4:	89 85       	ldd	r24, Y+9	; 0x09
     df6:	9a 85       	ldd	r25, Y+10	; 0x0a
     df8:	20 e0       	ldi	r18, 0x00	; 0
     dfa:	3f ef       	ldi	r19, 0xFF	; 255
     dfc:	4f e7       	ldi	r20, 0x7F	; 127
     dfe:	57 e4       	ldi	r21, 0x47	; 71
     e00:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     e04:	18 16       	cp	r1, r24
     e06:	4c f5       	brge	.+82     	; 0xe5a <APP_setNewPassword+0x314>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     e08:	6b 85       	ldd	r22, Y+11	; 0x0b
     e0a:	7c 85       	ldd	r23, Y+12	; 0x0c
     e0c:	8d 85       	ldd	r24, Y+13	; 0x0d
     e0e:	9e 85       	ldd	r25, Y+14	; 0x0e
     e10:	20 e0       	ldi	r18, 0x00	; 0
     e12:	30 e0       	ldi	r19, 0x00	; 0
     e14:	40 e2       	ldi	r20, 0x20	; 32
     e16:	51 e4       	ldi	r21, 0x41	; 65
     e18:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     e1c:	dc 01       	movw	r26, r24
     e1e:	cb 01       	movw	r24, r22
     e20:	bc 01       	movw	r22, r24
     e22:	cd 01       	movw	r24, r26
     e24:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     e28:	dc 01       	movw	r26, r24
     e2a:	cb 01       	movw	r24, r22
     e2c:	9e 83       	std	Y+6, r25	; 0x06
     e2e:	8d 83       	std	Y+5, r24	; 0x05
     e30:	0f c0       	rjmp	.+30     	; 0xe50 <APP_setNewPassword+0x30a>
     e32:	88 ec       	ldi	r24, 0xC8	; 200
     e34:	90 e0       	ldi	r25, 0x00	; 0
     e36:	9c 83       	std	Y+4, r25	; 0x04
     e38:	8b 83       	std	Y+3, r24	; 0x03
     e3a:	8b 81       	ldd	r24, Y+3	; 0x03
     e3c:	9c 81       	ldd	r25, Y+4	; 0x04
     e3e:	01 97       	sbiw	r24, 0x01	; 1
     e40:	f1 f7       	brne	.-4      	; 0xe3e <APP_setNewPassword+0x2f8>
     e42:	9c 83       	std	Y+4, r25	; 0x04
     e44:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     e46:	8d 81       	ldd	r24, Y+5	; 0x05
     e48:	9e 81       	ldd	r25, Y+6	; 0x06
     e4a:	01 97       	sbiw	r24, 0x01	; 1
     e4c:	9e 83       	std	Y+6, r25	; 0x06
     e4e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     e50:	8d 81       	ldd	r24, Y+5	; 0x05
     e52:	9e 81       	ldd	r25, Y+6	; 0x06
     e54:	00 97       	sbiw	r24, 0x00	; 0
     e56:	69 f7       	brne	.-38     	; 0xe32 <APP_setNewPassword+0x2ec>
     e58:	14 c0       	rjmp	.+40     	; 0xe82 <APP_setNewPassword+0x33c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     e5a:	6f 81       	ldd	r22, Y+7	; 0x07
     e5c:	78 85       	ldd	r23, Y+8	; 0x08
     e5e:	89 85       	ldd	r24, Y+9	; 0x09
     e60:	9a 85       	ldd	r25, Y+10	; 0x0a
     e62:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     e66:	dc 01       	movw	r26, r24
     e68:	cb 01       	movw	r24, r22
     e6a:	9e 83       	std	Y+6, r25	; 0x06
     e6c:	8d 83       	std	Y+5, r24	; 0x05
     e6e:	8d 81       	ldd	r24, Y+5	; 0x05
     e70:	9e 81       	ldd	r25, Y+6	; 0x06
     e72:	9a 83       	std	Y+2, r25	; 0x02
     e74:	89 83       	std	Y+1, r24	; 0x01
     e76:	89 81       	ldd	r24, Y+1	; 0x01
     e78:	9a 81       	ldd	r25, Y+2	; 0x02
     e7a:	01 97       	sbiw	r24, 0x01	; 1
     e7c:	f1 f7       	brne	.-4      	; 0xe7a <APP_setNewPassword+0x334>
     e7e:	9a 83       	std	Y+2, r25	; 0x02
     e80:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(SHORT_DISPLAY_TIME);	/* Keep the message on the screen for a while */
	}
}
     e82:	ac 96       	adiw	r28, 0x2c	; 44
     e84:	0f b6       	in	r0, 0x3f	; 63
     e86:	f8 94       	cli
     e88:	de bf       	out	0x3e, r29	; 62
     e8a:	0f be       	out	0x3f, r0	; 63
     e8c:	cd bf       	out	0x3d, r28	; 61
     e8e:	cf 91       	pop	r28
     e90:	df 91       	pop	r29
     e92:	08 95       	ret

00000e94 <APP_init>:
 * [in/out]		 	None
 *
 * [Returns]:       None
 **********************************************************************************/
static void APP_init(void)
{
     e94:	df 93       	push	r29
     e96:	cf 93       	push	r28
     e98:	cd b7       	in	r28, 0x3d	; 61
     e9a:	de b7       	in	r29, 0x3e	; 62
     e9c:	2e 97       	sbiw	r28, 0x0e	; 14
     e9e:	0f b6       	in	r0, 0x3f	; 63
     ea0:	f8 94       	cli
     ea2:	de bf       	out	0x3e, r29	; 62
     ea4:	0f be       	out	0x3f, r0	; 63
     ea6:	cd bf       	out	0x3d, r28	; 61
	/* Display message to the user, to Enter a new password */
	LCD_clearScreen();
     ea8:	0e 94 9d 13 	call	0x273a	; 0x273a <LCD_clearScreen>
	LCD_displayStringRowColumn(0, 0, "ENTER NEW PASSWORD");
     eac:	22 ea       	ldi	r18, 0xA2	; 162
     eae:	30 e0       	ldi	r19, 0x00	; 0
     eb0:	80 e0       	ldi	r24, 0x00	; 0
     eb2:	60 e0       	ldi	r22, 0x00	; 0
     eb4:	a9 01       	movw	r20, r18
     eb6:	0e 94 61 13 	call	0x26c2	; 0x26c2 <LCD_displayStringRowColumn>
	LCD_displayStringRowColumn(1, 0, "= : TO SUMBIT");
     eba:	25 eb       	ldi	r18, 0xB5	; 181
     ebc:	30 e0       	ldi	r19, 0x00	; 0
     ebe:	81 e0       	ldi	r24, 0x01	; 1
     ec0:	60 e0       	ldi	r22, 0x00	; 0
     ec2:	a9 01       	movw	r20, r18
     ec4:	0e 94 61 13 	call	0x26c2	; 0x26c2 <LCD_displayStringRowColumn>
	LCD_displayStringRowColumn(2, 0, "X : TO CLEAR");
     ec8:	23 ec       	ldi	r18, 0xC3	; 195
     eca:	30 e0       	ldi	r19, 0x00	; 0
     ecc:	82 e0       	ldi	r24, 0x02	; 2
     ece:	60 e0       	ldi	r22, 0x00	; 0
     ed0:	a9 01       	movw	r20, r18
     ed2:	0e 94 61 13 	call	0x26c2	; 0x26c2 <LCD_displayStringRowColumn>
	LCD_goToRowColumn(3, 7);
     ed6:	83 e0       	ldi	r24, 0x03	; 3
     ed8:	67 e0       	ldi	r22, 0x07	; 7
     eda:	0e 94 1f 13 	call	0x263e	; 0x263e <LCD_goToRowColumn>

	/* Call function to take the password from the user for the First time */
	APP_getPassword(g_password1);
     ede:	8d e3       	ldi	r24, 0x3D	; 61
     ee0:	92 e0       	ldi	r25, 0x02	; 2
     ee2:	0e 94 16 08 	call	0x102c	; 0x102c <APP_getPassword>

	/* Display message to the user, that the password is submitted correctly */
	LCD_clearScreen();
     ee6:	0e 94 9d 13 	call	0x273a	; 0x273a <LCD_clearScreen>
	LCD_displayStringRowColumn(0, 1, "PASSWORD SUBMITTED");
     eea:	20 ed       	ldi	r18, 0xD0	; 208
     eec:	30 e0       	ldi	r19, 0x00	; 0
     eee:	80 e0       	ldi	r24, 0x00	; 0
     ef0:	61 e0       	ldi	r22, 0x01	; 1
     ef2:	a9 01       	movw	r20, r18
     ef4:	0e 94 61 13 	call	0x26c2	; 0x26c2 <LCD_displayStringRowColumn>
     ef8:	80 e0       	ldi	r24, 0x00	; 0
     efa:	90 e0       	ldi	r25, 0x00	; 0
     efc:	aa ef       	ldi	r26, 0xFA	; 250
     efe:	b3 e4       	ldi	r27, 0x43	; 67
     f00:	8b 87       	std	Y+11, r24	; 0x0b
     f02:	9c 87       	std	Y+12, r25	; 0x0c
     f04:	ad 87       	std	Y+13, r26	; 0x0d
     f06:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     f08:	6b 85       	ldd	r22, Y+11	; 0x0b
     f0a:	7c 85       	ldd	r23, Y+12	; 0x0c
     f0c:	8d 85       	ldd	r24, Y+13	; 0x0d
     f0e:	9e 85       	ldd	r25, Y+14	; 0x0e
     f10:	20 e0       	ldi	r18, 0x00	; 0
     f12:	30 e0       	ldi	r19, 0x00	; 0
     f14:	4a ef       	ldi	r20, 0xFA	; 250
     f16:	54 e4       	ldi	r21, 0x44	; 68
     f18:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     f1c:	dc 01       	movw	r26, r24
     f1e:	cb 01       	movw	r24, r22
     f20:	8f 83       	std	Y+7, r24	; 0x07
     f22:	98 87       	std	Y+8, r25	; 0x08
     f24:	a9 87       	std	Y+9, r26	; 0x09
     f26:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     f28:	6f 81       	ldd	r22, Y+7	; 0x07
     f2a:	78 85       	ldd	r23, Y+8	; 0x08
     f2c:	89 85       	ldd	r24, Y+9	; 0x09
     f2e:	9a 85       	ldd	r25, Y+10	; 0x0a
     f30:	20 e0       	ldi	r18, 0x00	; 0
     f32:	30 e0       	ldi	r19, 0x00	; 0
     f34:	40 e8       	ldi	r20, 0x80	; 128
     f36:	5f e3       	ldi	r21, 0x3F	; 63
     f38:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     f3c:	88 23       	and	r24, r24
     f3e:	2c f4       	brge	.+10     	; 0xf4a <APP_init+0xb6>
		__ticks = 1;
     f40:	81 e0       	ldi	r24, 0x01	; 1
     f42:	90 e0       	ldi	r25, 0x00	; 0
     f44:	9e 83       	std	Y+6, r25	; 0x06
     f46:	8d 83       	std	Y+5, r24	; 0x05
     f48:	3f c0       	rjmp	.+126    	; 0xfc8 <APP_init+0x134>
	else if (__tmp > 65535)
     f4a:	6f 81       	ldd	r22, Y+7	; 0x07
     f4c:	78 85       	ldd	r23, Y+8	; 0x08
     f4e:	89 85       	ldd	r24, Y+9	; 0x09
     f50:	9a 85       	ldd	r25, Y+10	; 0x0a
     f52:	20 e0       	ldi	r18, 0x00	; 0
     f54:	3f ef       	ldi	r19, 0xFF	; 255
     f56:	4f e7       	ldi	r20, 0x7F	; 127
     f58:	57 e4       	ldi	r21, 0x47	; 71
     f5a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     f5e:	18 16       	cp	r1, r24
     f60:	4c f5       	brge	.+82     	; 0xfb4 <APP_init+0x120>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     f62:	6b 85       	ldd	r22, Y+11	; 0x0b
     f64:	7c 85       	ldd	r23, Y+12	; 0x0c
     f66:	8d 85       	ldd	r24, Y+13	; 0x0d
     f68:	9e 85       	ldd	r25, Y+14	; 0x0e
     f6a:	20 e0       	ldi	r18, 0x00	; 0
     f6c:	30 e0       	ldi	r19, 0x00	; 0
     f6e:	40 e2       	ldi	r20, 0x20	; 32
     f70:	51 e4       	ldi	r21, 0x41	; 65
     f72:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     f76:	dc 01       	movw	r26, r24
     f78:	cb 01       	movw	r24, r22
     f7a:	bc 01       	movw	r22, r24
     f7c:	cd 01       	movw	r24, r26
     f7e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     f82:	dc 01       	movw	r26, r24
     f84:	cb 01       	movw	r24, r22
     f86:	9e 83       	std	Y+6, r25	; 0x06
     f88:	8d 83       	std	Y+5, r24	; 0x05
     f8a:	0f c0       	rjmp	.+30     	; 0xfaa <APP_init+0x116>
     f8c:	88 ec       	ldi	r24, 0xC8	; 200
     f8e:	90 e0       	ldi	r25, 0x00	; 0
     f90:	9c 83       	std	Y+4, r25	; 0x04
     f92:	8b 83       	std	Y+3, r24	; 0x03
     f94:	8b 81       	ldd	r24, Y+3	; 0x03
     f96:	9c 81       	ldd	r25, Y+4	; 0x04
     f98:	01 97       	sbiw	r24, 0x01	; 1
     f9a:	f1 f7       	brne	.-4      	; 0xf98 <APP_init+0x104>
     f9c:	9c 83       	std	Y+4, r25	; 0x04
     f9e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     fa0:	8d 81       	ldd	r24, Y+5	; 0x05
     fa2:	9e 81       	ldd	r25, Y+6	; 0x06
     fa4:	01 97       	sbiw	r24, 0x01	; 1
     fa6:	9e 83       	std	Y+6, r25	; 0x06
     fa8:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     faa:	8d 81       	ldd	r24, Y+5	; 0x05
     fac:	9e 81       	ldd	r25, Y+6	; 0x06
     fae:	00 97       	sbiw	r24, 0x00	; 0
     fb0:	69 f7       	brne	.-38     	; 0xf8c <APP_init+0xf8>
     fb2:	14 c0       	rjmp	.+40     	; 0xfdc <APP_init+0x148>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     fb4:	6f 81       	ldd	r22, Y+7	; 0x07
     fb6:	78 85       	ldd	r23, Y+8	; 0x08
     fb8:	89 85       	ldd	r24, Y+9	; 0x09
     fba:	9a 85       	ldd	r25, Y+10	; 0x0a
     fbc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     fc0:	dc 01       	movw	r26, r24
     fc2:	cb 01       	movw	r24, r22
     fc4:	9e 83       	std	Y+6, r25	; 0x06
     fc6:	8d 83       	std	Y+5, r24	; 0x05
     fc8:	8d 81       	ldd	r24, Y+5	; 0x05
     fca:	9e 81       	ldd	r25, Y+6	; 0x06
     fcc:	9a 83       	std	Y+2, r25	; 0x02
     fce:	89 83       	std	Y+1, r24	; 0x01
     fd0:	89 81       	ldd	r24, Y+1	; 0x01
     fd2:	9a 81       	ldd	r25, Y+2	; 0x02
     fd4:	01 97       	sbiw	r24, 0x01	; 1
     fd6:	f1 f7       	brne	.-4      	; 0xfd4 <APP_init+0x140>
     fd8:	9a 83       	std	Y+2, r25	; 0x02
     fda:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(SHORT_DISPLAY_TIME);	/* Keep the message on the screen for a while */

	/* Display message to the user, to ReEnter the same password */
	LCD_clearScreen();
     fdc:	0e 94 9d 13 	call	0x273a	; 0x273a <LCD_clearScreen>
	LCD_displayStringRowColumn(0, 0, "REENTER PASS AGAIN");
     fe0:	23 ee       	ldi	r18, 0xE3	; 227
     fe2:	30 e0       	ldi	r19, 0x00	; 0
     fe4:	80 e0       	ldi	r24, 0x00	; 0
     fe6:	60 e0       	ldi	r22, 0x00	; 0
     fe8:	a9 01       	movw	r20, r18
     fea:	0e 94 61 13 	call	0x26c2	; 0x26c2 <LCD_displayStringRowColumn>
	LCD_displayStringRowColumn(1, 0, "= : TO SUMBIT");
     fee:	25 eb       	ldi	r18, 0xB5	; 181
     ff0:	30 e0       	ldi	r19, 0x00	; 0
     ff2:	81 e0       	ldi	r24, 0x01	; 1
     ff4:	60 e0       	ldi	r22, 0x00	; 0
     ff6:	a9 01       	movw	r20, r18
     ff8:	0e 94 61 13 	call	0x26c2	; 0x26c2 <LCD_displayStringRowColumn>
	LCD_displayStringRowColumn(2, 0, "X : TO CLEAR");
     ffc:	23 ec       	ldi	r18, 0xC3	; 195
     ffe:	30 e0       	ldi	r19, 0x00	; 0
    1000:	82 e0       	ldi	r24, 0x02	; 2
    1002:	60 e0       	ldi	r22, 0x00	; 0
    1004:	a9 01       	movw	r20, r18
    1006:	0e 94 61 13 	call	0x26c2	; 0x26c2 <LCD_displayStringRowColumn>
	LCD_goToRowColumn(3, 7);
    100a:	83 e0       	ldi	r24, 0x03	; 3
    100c:	67 e0       	ldi	r22, 0x07	; 7
    100e:	0e 94 1f 13 	call	0x263e	; 0x263e <LCD_goToRowColumn>

	/* Call function to take the password from the user for the Second time */
	APP_getPassword(g_password2);
    1012:	82 e4       	ldi	r24, 0x42	; 66
    1014:	92 e0       	ldi	r25, 0x02	; 2
    1016:	0e 94 16 08 	call	0x102c	; 0x102c <APP_getPassword>
}
    101a:	2e 96       	adiw	r28, 0x0e	; 14
    101c:	0f b6       	in	r0, 0x3f	; 63
    101e:	f8 94       	cli
    1020:	de bf       	out	0x3e, r29	; 62
    1022:	0f be       	out	0x3f, r0	; 63
    1024:	cd bf       	out	0x3d, r28	; 61
    1026:	cf 91       	pop	r28
    1028:	df 91       	pop	r29
    102a:	08 95       	ret

0000102c <APP_getPassword>:
 * [in/out]		 	None
 *
 * [Returns]:       None
 **********************************************************************************/
void APP_getPassword(uint8 * Password_Ptr)
{
    102c:	df 93       	push	r29
    102e:	cf 93       	push	r28
    1030:	cd b7       	in	r28, 0x3d	; 61
    1032:	de b7       	in	r29, 0x3e	; 62
    1034:	60 97       	sbiw	r28, 0x10	; 16
    1036:	0f b6       	in	r0, 0x3f	; 63
    1038:	f8 94       	cli
    103a:	de bf       	out	0x3e, r29	; 62
    103c:	0f be       	out	0x3f, r0	; 63
    103e:	cd bf       	out	0x3d, r28	; 61
    1040:	98 8b       	std	Y+16, r25	; 0x10
    1042:	8f 87       	std	Y+15, r24	; 0x0f
	static uint8 counter; /* Local variable used as a counter for the for Loop */
	static uint8 key;	  /* Local variable used to store the value of the pressed Button */

	for(counter = 0; counter < PASSWORD_WIDTH ;counter++)
    1044:	10 92 30 02 	sts	0x0230, r1
    1048:	c7 c0       	rjmp	.+398    	; 0x11d8 <APP_getPassword+0x1ac>
	{
		key = KeyPad_getPressedKey();
    104a:	0e 94 e5 0d 	call	0x1bca	; 0x1bca <KeyPad_getPressedKey>
    104e:	80 93 2f 02 	sts	0x022F, r24

		/* Check if the Button pressed is a digit or not */
		if(key >= 0 && key <= 9)
    1052:	80 91 2f 02 	lds	r24, 0x022F
    1056:	8a 30       	cpi	r24, 0x0A	; 10
    1058:	08 f0       	brcs	.+2      	; 0x105c <APP_getPassword+0x30>
    105a:	8a c0       	rjmp	.+276    	; 0x1170 <APP_getPassword+0x144>
		{
			Password_Ptr[counter] = key; /* Store only digits from (0 -> 9) in the Password */
    105c:	80 91 30 02 	lds	r24, 0x0230
    1060:	28 2f       	mov	r18, r24
    1062:	30 e0       	ldi	r19, 0x00	; 0
    1064:	8f 85       	ldd	r24, Y+15	; 0x0f
    1066:	98 89       	ldd	r25, Y+16	; 0x10
    1068:	fc 01       	movw	r30, r24
    106a:	e2 0f       	add	r30, r18
    106c:	f3 1f       	adc	r31, r19
    106e:	80 91 2f 02 	lds	r24, 0x022F
    1072:	80 83       	st	Z, r24
    1074:	80 e0       	ldi	r24, 0x00	; 0
    1076:	90 e0       	ldi	r25, 0x00	; 0
    1078:	af ea       	ldi	r26, 0xAF	; 175
    107a:	b3 e4       	ldi	r27, 0x43	; 67
    107c:	8b 87       	std	Y+11, r24	; 0x0b
    107e:	9c 87       	std	Y+12, r25	; 0x0c
    1080:	ad 87       	std	Y+13, r26	; 0x0d
    1082:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1084:	6b 85       	ldd	r22, Y+11	; 0x0b
    1086:	7c 85       	ldd	r23, Y+12	; 0x0c
    1088:	8d 85       	ldd	r24, Y+13	; 0x0d
    108a:	9e 85       	ldd	r25, Y+14	; 0x0e
    108c:	20 e0       	ldi	r18, 0x00	; 0
    108e:	30 e0       	ldi	r19, 0x00	; 0
    1090:	4a ef       	ldi	r20, 0xFA	; 250
    1092:	54 e4       	ldi	r21, 0x44	; 68
    1094:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1098:	dc 01       	movw	r26, r24
    109a:	cb 01       	movw	r24, r22
    109c:	8f 83       	std	Y+7, r24	; 0x07
    109e:	98 87       	std	Y+8, r25	; 0x08
    10a0:	a9 87       	std	Y+9, r26	; 0x09
    10a2:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    10a4:	6f 81       	ldd	r22, Y+7	; 0x07
    10a6:	78 85       	ldd	r23, Y+8	; 0x08
    10a8:	89 85       	ldd	r24, Y+9	; 0x09
    10aa:	9a 85       	ldd	r25, Y+10	; 0x0a
    10ac:	20 e0       	ldi	r18, 0x00	; 0
    10ae:	30 e0       	ldi	r19, 0x00	; 0
    10b0:	40 e8       	ldi	r20, 0x80	; 128
    10b2:	5f e3       	ldi	r21, 0x3F	; 63
    10b4:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    10b8:	88 23       	and	r24, r24
    10ba:	2c f4       	brge	.+10     	; 0x10c6 <APP_getPassword+0x9a>
		__ticks = 1;
    10bc:	81 e0       	ldi	r24, 0x01	; 1
    10be:	90 e0       	ldi	r25, 0x00	; 0
    10c0:	9e 83       	std	Y+6, r25	; 0x06
    10c2:	8d 83       	std	Y+5, r24	; 0x05
    10c4:	3f c0       	rjmp	.+126    	; 0x1144 <APP_getPassword+0x118>
	else if (__tmp > 65535)
    10c6:	6f 81       	ldd	r22, Y+7	; 0x07
    10c8:	78 85       	ldd	r23, Y+8	; 0x08
    10ca:	89 85       	ldd	r24, Y+9	; 0x09
    10cc:	9a 85       	ldd	r25, Y+10	; 0x0a
    10ce:	20 e0       	ldi	r18, 0x00	; 0
    10d0:	3f ef       	ldi	r19, 0xFF	; 255
    10d2:	4f e7       	ldi	r20, 0x7F	; 127
    10d4:	57 e4       	ldi	r21, 0x47	; 71
    10d6:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    10da:	18 16       	cp	r1, r24
    10dc:	4c f5       	brge	.+82     	; 0x1130 <APP_getPassword+0x104>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    10de:	6b 85       	ldd	r22, Y+11	; 0x0b
    10e0:	7c 85       	ldd	r23, Y+12	; 0x0c
    10e2:	8d 85       	ldd	r24, Y+13	; 0x0d
    10e4:	9e 85       	ldd	r25, Y+14	; 0x0e
    10e6:	20 e0       	ldi	r18, 0x00	; 0
    10e8:	30 e0       	ldi	r19, 0x00	; 0
    10ea:	40 e2       	ldi	r20, 0x20	; 32
    10ec:	51 e4       	ldi	r21, 0x41	; 65
    10ee:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    10f2:	dc 01       	movw	r26, r24
    10f4:	cb 01       	movw	r24, r22
    10f6:	bc 01       	movw	r22, r24
    10f8:	cd 01       	movw	r24, r26
    10fa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    10fe:	dc 01       	movw	r26, r24
    1100:	cb 01       	movw	r24, r22
    1102:	9e 83       	std	Y+6, r25	; 0x06
    1104:	8d 83       	std	Y+5, r24	; 0x05
    1106:	0f c0       	rjmp	.+30     	; 0x1126 <APP_getPassword+0xfa>
    1108:	88 ec       	ldi	r24, 0xC8	; 200
    110a:	90 e0       	ldi	r25, 0x00	; 0
    110c:	9c 83       	std	Y+4, r25	; 0x04
    110e:	8b 83       	std	Y+3, r24	; 0x03
    1110:	8b 81       	ldd	r24, Y+3	; 0x03
    1112:	9c 81       	ldd	r25, Y+4	; 0x04
    1114:	01 97       	sbiw	r24, 0x01	; 1
    1116:	f1 f7       	brne	.-4      	; 0x1114 <APP_getPassword+0xe8>
    1118:	9c 83       	std	Y+4, r25	; 0x04
    111a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    111c:	8d 81       	ldd	r24, Y+5	; 0x05
    111e:	9e 81       	ldd	r25, Y+6	; 0x06
    1120:	01 97       	sbiw	r24, 0x01	; 1
    1122:	9e 83       	std	Y+6, r25	; 0x06
    1124:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1126:	8d 81       	ldd	r24, Y+5	; 0x05
    1128:	9e 81       	ldd	r25, Y+6	; 0x06
    112a:	00 97       	sbiw	r24, 0x00	; 0
    112c:	69 f7       	brne	.-38     	; 0x1108 <APP_getPassword+0xdc>
    112e:	14 c0       	rjmp	.+40     	; 0x1158 <APP_getPassword+0x12c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1130:	6f 81       	ldd	r22, Y+7	; 0x07
    1132:	78 85       	ldd	r23, Y+8	; 0x08
    1134:	89 85       	ldd	r24, Y+9	; 0x09
    1136:	9a 85       	ldd	r25, Y+10	; 0x0a
    1138:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    113c:	dc 01       	movw	r26, r24
    113e:	cb 01       	movw	r24, r22
    1140:	9e 83       	std	Y+6, r25	; 0x06
    1142:	8d 83       	std	Y+5, r24	; 0x05
    1144:	8d 81       	ldd	r24, Y+5	; 0x05
    1146:	9e 81       	ldd	r25, Y+6	; 0x06
    1148:	9a 83       	std	Y+2, r25	; 0x02
    114a:	89 83       	std	Y+1, r24	; 0x01
    114c:	89 81       	ldd	r24, Y+1	; 0x01
    114e:	9a 81       	ldd	r25, Y+2	; 0x02
    1150:	01 97       	sbiw	r24, 0x01	; 1
    1152:	f1 f7       	brne	.-4      	; 0x1150 <APP_getPassword+0x124>
    1154:	9a 83       	std	Y+2, r25	; 0x02
    1156:	89 83       	std	Y+1, r24	; 0x01
			--counter;
			continue;
		}

		_delay_ms(PRESS_TIME); /* Press Time */
		LCD_goToRowColumn(3, counter+7);
    1158:	80 91 30 02 	lds	r24, 0x0230
    115c:	98 2f       	mov	r25, r24
    115e:	99 5f       	subi	r25, 0xF9	; 249
    1160:	83 e0       	ldi	r24, 0x03	; 3
    1162:	69 2f       	mov	r22, r25
    1164:	0e 94 1f 13 	call	0x263e	; 0x263e <LCD_goToRowColumn>
		LCD_displayCharacter('*');	/* Display '*' for Security issue */
    1168:	8a e2       	ldi	r24, 0x2A	; 42
    116a:	0e 94 fa 10 	call	0x21f4	; 0x21f4 <LCD_displayCharacter>
    116e:	2b c0       	rjmp	.+86     	; 0x11c6 <APP_getPassword+0x19a>
		/*
		 * Check if the Button pressed is equal to 'X' or not, in Case equal to 'X' clear the
		 * written password and restart write it again
		 * (User Enter a wrong digit and need to correct it)
		 */
		else if(key == '*')
    1170:	80 91 2f 02 	lds	r24, 0x022F
    1174:	8a 32       	cpi	r24, 0x2A	; 42
    1176:	59 f4       	brne	.+22     	; 0x118e <APP_getPassword+0x162>
		{
			counter = -1;	/* Reset the counter */
    1178:	8f ef       	ldi	r24, 0xFF	; 255
    117a:	80 93 30 02 	sts	0x0230, r24
			/* Clear Row in LCD by writing spaces " " */
			LCD_displayStringRowColumn(3, 7,"         ");
    117e:	26 ef       	ldi	r18, 0xF6	; 246
    1180:	30 e0       	ldi	r19, 0x00	; 0
    1182:	83 e0       	ldi	r24, 0x03	; 3
    1184:	67 e0       	ldi	r22, 0x07	; 7
    1186:	a9 01       	movw	r20, r18
    1188:	0e 94 61 13 	call	0x26c2	; 0x26c2 <LCD_displayStringRowColumn>
    118c:	20 c0       	rjmp	.+64     	; 0x11ce <APP_getPassword+0x1a2>
		}

		/* Check if the Button Pressed is not digit, decrement the counter */
		else
		{
			--counter;
    118e:	80 91 30 02 	lds	r24, 0x0230
    1192:	81 50       	subi	r24, 0x01	; 1
    1194:	80 93 30 02 	sts	0x0230, r24
    1198:	1a c0       	rjmp	.+52     	; 0x11ce <APP_getPassword+0x1a2>
		 * 	  clear the written password, then break the while loop and restart write the Correct
		 * 	  Password again (User Enter a wrong digit and need to correct it)
		 */
		while(counter == 4)
		{
			key = KeyPad_getPressedKey(); /* Get the next Press */
    119a:	0e 94 e5 0d 	call	0x1bca	; 0x1bca <KeyPad_getPressedKey>
    119e:	80 93 2f 02 	sts	0x022F, r24

			if(key == '=')
    11a2:	80 91 2f 02 	lds	r24, 0x022F
    11a6:	8d 33       	cpi	r24, 0x3D	; 61
    11a8:	91 f0       	breq	.+36     	; 0x11ce <APP_getPassword+0x1a2>
			{
				break;
			}
			else if(key == '*')
    11aa:	80 91 2f 02 	lds	r24, 0x022F
    11ae:	8a 32       	cpi	r24, 0x2A	; 42
    11b0:	51 f4       	brne	.+20     	; 0x11c6 <APP_getPassword+0x19a>
			{
				counter = -1;	/* Reset the counter */
    11b2:	8f ef       	ldi	r24, 0xFF	; 255
    11b4:	80 93 30 02 	sts	0x0230, r24
				/* Clear Row in LCD by writing spaces " " */
				LCD_displayStringRowColumn(3, 7,"         ");
    11b8:	26 ef       	ldi	r18, 0xF6	; 246
    11ba:	30 e0       	ldi	r19, 0x00	; 0
    11bc:	83 e0       	ldi	r24, 0x03	; 3
    11be:	67 e0       	ldi	r22, 0x07	; 7
    11c0:	a9 01       	movw	r20, r18
    11c2:	0e 94 61 13 	call	0x26c2	; 0x26c2 <LCD_displayStringRowColumn>
		 * 	- If the Button Pressed is equal to '=', break the while loop, then submit the Password
		 * 	- If the Button Pressed is equal to 'X' (in case of 5 digits are written in the screen),
		 * 	  clear the written password, then break the while loop and restart write the Correct
		 * 	  Password again (User Enter a wrong digit and need to correct it)
		 */
		while(counter == 4)
    11c6:	80 91 30 02 	lds	r24, 0x0230
    11ca:	84 30       	cpi	r24, 0x04	; 4
    11cc:	31 f3       	breq	.-52     	; 0x119a <APP_getPassword+0x16e>
void APP_getPassword(uint8 * Password_Ptr)
{
	static uint8 counter; /* Local variable used as a counter for the for Loop */
	static uint8 key;	  /* Local variable used to store the value of the pressed Button */

	for(counter = 0; counter < PASSWORD_WIDTH ;counter++)
    11ce:	80 91 30 02 	lds	r24, 0x0230
    11d2:	8f 5f       	subi	r24, 0xFF	; 255
    11d4:	80 93 30 02 	sts	0x0230, r24
    11d8:	80 91 30 02 	lds	r24, 0x0230
    11dc:	85 30       	cpi	r24, 0x05	; 5
    11de:	08 f4       	brcc	.+2      	; 0x11e2 <APP_getPassword+0x1b6>
    11e0:	34 cf       	rjmp	.-408    	; 0x104a <APP_getPassword+0x1e>
				LCD_displayStringRowColumn(3, 7,"         ");
				continue;
			}
		}
	}
}
    11e2:	60 96       	adiw	r28, 0x10	; 16
    11e4:	0f b6       	in	r0, 0x3f	; 63
    11e6:	f8 94       	cli
    11e8:	de bf       	out	0x3e, r29	; 62
    11ea:	0f be       	out	0x3f, r0	; 63
    11ec:	cd bf       	out	0x3d, r28	; 61
    11ee:	cf 91       	pop	r28
    11f0:	df 91       	pop	r29
    11f2:	08 95       	ret

000011f4 <APP_checkPasswordMismatch>:
 * [in/out]		 	None
 *
 * [Returns]:       Result of the comparison between two passwords
 **********************************************************************************/
uint8 APP_checkPasswordMismatch(uint8 * Password1_Ptr , uint8 * Password2_Ptr)
{
    11f4:	df 93       	push	r29
    11f6:	cf 93       	push	r28
    11f8:	00 d0       	rcall	.+0      	; 0x11fa <APP_checkPasswordMismatch+0x6>
    11fa:	00 d0       	rcall	.+0      	; 0x11fc <APP_checkPasswordMismatch+0x8>
    11fc:	00 d0       	rcall	.+0      	; 0x11fe <APP_checkPasswordMismatch+0xa>
    11fe:	cd b7       	in	r28, 0x3d	; 61
    1200:	de b7       	in	r29, 0x3e	; 62
    1202:	9c 83       	std	Y+4, r25	; 0x04
    1204:	8b 83       	std	Y+3, r24	; 0x03
    1206:	7e 83       	std	Y+6, r23	; 0x06
    1208:	6d 83       	std	Y+5, r22	; 0x05
	uint8 counter;	/* Local variable used as a counter for the for Loop */
	uint8 password_match = 0;	/* Local variable used to store password status */
    120a:	19 82       	std	Y+1, r1	; 0x01

	for(counter = 0; counter < PASSWORD_WIDTH  ;counter++)
    120c:	1a 82       	std	Y+2, r1	; 0x02
    120e:	1a c0       	rjmp	.+52     	; 0x1244 <APP_checkPasswordMismatch+0x50>
	{
		/* Check if the two passwords are identical or not */
		if(Password1_Ptr[counter] != Password2_Ptr[counter])
    1210:	8a 81       	ldd	r24, Y+2	; 0x02
    1212:	28 2f       	mov	r18, r24
    1214:	30 e0       	ldi	r19, 0x00	; 0
    1216:	8b 81       	ldd	r24, Y+3	; 0x03
    1218:	9c 81       	ldd	r25, Y+4	; 0x04
    121a:	fc 01       	movw	r30, r24
    121c:	e2 0f       	add	r30, r18
    121e:	f3 1f       	adc	r31, r19
    1220:	40 81       	ld	r20, Z
    1222:	8a 81       	ldd	r24, Y+2	; 0x02
    1224:	28 2f       	mov	r18, r24
    1226:	30 e0       	ldi	r19, 0x00	; 0
    1228:	8d 81       	ldd	r24, Y+5	; 0x05
    122a:	9e 81       	ldd	r25, Y+6	; 0x06
    122c:	fc 01       	movw	r30, r24
    122e:	e2 0f       	add	r30, r18
    1230:	f3 1f       	adc	r31, r19
    1232:	80 81       	ld	r24, Z
    1234:	48 17       	cp	r20, r24
    1236:	19 f0       	breq	.+6      	; 0x123e <APP_checkPasswordMismatch+0x4a>
		{
			/*
			 * If two passwords are not identical, change password_match value,
			 * then break the loop as there is no need to continue looping
			 */
			password_match = MISMATCHED;
    1238:	81 e0       	ldi	r24, 0x01	; 1
    123a:	89 83       	std	Y+1, r24	; 0x01
    123c:	06 c0       	rjmp	.+12     	; 0x124a <APP_checkPasswordMismatch+0x56>
uint8 APP_checkPasswordMismatch(uint8 * Password1_Ptr , uint8 * Password2_Ptr)
{
	uint8 counter;	/* Local variable used as a counter for the for Loop */
	uint8 password_match = 0;	/* Local variable used to store password status */

	for(counter = 0; counter < PASSWORD_WIDTH  ;counter++)
    123e:	8a 81       	ldd	r24, Y+2	; 0x02
    1240:	8f 5f       	subi	r24, 0xFF	; 255
    1242:	8a 83       	std	Y+2, r24	; 0x02
    1244:	8a 81       	ldd	r24, Y+2	; 0x02
    1246:	85 30       	cpi	r24, 0x05	; 5
    1248:	18 f3       	brcs	.-58     	; 0x1210 <APP_checkPasswordMismatch+0x1c>
			 */
			password_match = MISMATCHED;
			break;
		}
	}
	return password_match ;
    124a:	89 81       	ldd	r24, Y+1	; 0x01
}
    124c:	26 96       	adiw	r28, 0x06	; 6
    124e:	0f b6       	in	r0, 0x3f	; 63
    1250:	f8 94       	cli
    1252:	de bf       	out	0x3e, r29	; 62
    1254:	0f be       	out	0x3f, r0	; 63
    1256:	cd bf       	out	0x3d, r28	; 61
    1258:	cf 91       	pop	r28
    125a:	df 91       	pop	r29
    125c:	08 95       	ret

0000125e <APP_getUserDecision>:
 * [in/out]		 	None
 *
 * [Returns]:       The User Decision
 **********************************************************************************/
uint8 APP_getUserDecision(void)
{
    125e:	df 93       	push	r29
    1260:	cf 93       	push	r28
    1262:	cd b7       	in	r28, 0x3d	; 61
    1264:	de b7       	in	r29, 0x3e	; 62
    1266:	2e 97       	sbiw	r28, 0x0e	; 14
    1268:	0f b6       	in	r0, 0x3f	; 63
    126a:	f8 94       	cli
    126c:	de bf       	out	0x3e, r29	; 62
    126e:	0f be       	out	0x3f, r0	; 63
    1270:	cd bf       	out	0x3d, r28	; 61
	/*
	 * Display message to the user, to select between Two Choices:
	 * 	"+" : TO CHANGE PASSWORD
	 * 	"-" : TO OPEN DOOR
	 */
	LCD_clearScreen();
    1272:	0e 94 9d 13 	call	0x273a	; 0x273a <LCD_clearScreen>
	LCD_displayStringRowColumn(0, 0, "+ : CHANGE PASSWORD");
    1276:	20 e0       	ldi	r18, 0x00	; 0
    1278:	31 e0       	ldi	r19, 0x01	; 1
    127a:	80 e0       	ldi	r24, 0x00	; 0
    127c:	60 e0       	ldi	r22, 0x00	; 0
    127e:	a9 01       	movw	r20, r18
    1280:	0e 94 61 13 	call	0x26c2	; 0x26c2 <LCD_displayStringRowColumn>
	LCD_displayStringRowColumn(1, 0, "- : OPEN DOOR");
    1284:	24 e1       	ldi	r18, 0x14	; 20
    1286:	31 e0       	ldi	r19, 0x01	; 1
    1288:	81 e0       	ldi	r24, 0x01	; 1
    128a:	60 e0       	ldi	r22, 0x00	; 0
    128c:	a9 01       	movw	r20, r18
    128e:	0e 94 61 13 	call	0x26c2	; 0x26c2 <LCD_displayStringRowColumn>
	 * 	 - If choice is not equal to one of the given choices (CHANGE PASSWORD, OPEN DOOR),
	 * 	   do while condition will be true, so still in the loop until be false
	 */
	do
	{
		key = KeyPad_getPressedKey();
    1292:	0e 94 e5 0d 	call	0x1bca	; 0x1bca <KeyPad_getPressedKey>
    1296:	80 93 32 02 	sts	0x0232, r24
    129a:	80 e0       	ldi	r24, 0x00	; 0
    129c:	90 e0       	ldi	r25, 0x00	; 0
    129e:	af ea       	ldi	r26, 0xAF	; 175
    12a0:	b3 e4       	ldi	r27, 0x43	; 67
    12a2:	8b 87       	std	Y+11, r24	; 0x0b
    12a4:	9c 87       	std	Y+12, r25	; 0x0c
    12a6:	ad 87       	std	Y+13, r26	; 0x0d
    12a8:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    12aa:	6b 85       	ldd	r22, Y+11	; 0x0b
    12ac:	7c 85       	ldd	r23, Y+12	; 0x0c
    12ae:	8d 85       	ldd	r24, Y+13	; 0x0d
    12b0:	9e 85       	ldd	r25, Y+14	; 0x0e
    12b2:	20 e0       	ldi	r18, 0x00	; 0
    12b4:	30 e0       	ldi	r19, 0x00	; 0
    12b6:	4a ef       	ldi	r20, 0xFA	; 250
    12b8:	54 e4       	ldi	r21, 0x44	; 68
    12ba:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    12be:	dc 01       	movw	r26, r24
    12c0:	cb 01       	movw	r24, r22
    12c2:	8f 83       	std	Y+7, r24	; 0x07
    12c4:	98 87       	std	Y+8, r25	; 0x08
    12c6:	a9 87       	std	Y+9, r26	; 0x09
    12c8:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    12ca:	6f 81       	ldd	r22, Y+7	; 0x07
    12cc:	78 85       	ldd	r23, Y+8	; 0x08
    12ce:	89 85       	ldd	r24, Y+9	; 0x09
    12d0:	9a 85       	ldd	r25, Y+10	; 0x0a
    12d2:	20 e0       	ldi	r18, 0x00	; 0
    12d4:	30 e0       	ldi	r19, 0x00	; 0
    12d6:	40 e8       	ldi	r20, 0x80	; 128
    12d8:	5f e3       	ldi	r21, 0x3F	; 63
    12da:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    12de:	88 23       	and	r24, r24
    12e0:	2c f4       	brge	.+10     	; 0x12ec <APP_getUserDecision+0x8e>
		__ticks = 1;
    12e2:	81 e0       	ldi	r24, 0x01	; 1
    12e4:	90 e0       	ldi	r25, 0x00	; 0
    12e6:	9e 83       	std	Y+6, r25	; 0x06
    12e8:	8d 83       	std	Y+5, r24	; 0x05
    12ea:	3f c0       	rjmp	.+126    	; 0x136a <APP_getUserDecision+0x10c>
	else if (__tmp > 65535)
    12ec:	6f 81       	ldd	r22, Y+7	; 0x07
    12ee:	78 85       	ldd	r23, Y+8	; 0x08
    12f0:	89 85       	ldd	r24, Y+9	; 0x09
    12f2:	9a 85       	ldd	r25, Y+10	; 0x0a
    12f4:	20 e0       	ldi	r18, 0x00	; 0
    12f6:	3f ef       	ldi	r19, 0xFF	; 255
    12f8:	4f e7       	ldi	r20, 0x7F	; 127
    12fa:	57 e4       	ldi	r21, 0x47	; 71
    12fc:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1300:	18 16       	cp	r1, r24
    1302:	4c f5       	brge	.+82     	; 0x1356 <APP_getUserDecision+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1304:	6b 85       	ldd	r22, Y+11	; 0x0b
    1306:	7c 85       	ldd	r23, Y+12	; 0x0c
    1308:	8d 85       	ldd	r24, Y+13	; 0x0d
    130a:	9e 85       	ldd	r25, Y+14	; 0x0e
    130c:	20 e0       	ldi	r18, 0x00	; 0
    130e:	30 e0       	ldi	r19, 0x00	; 0
    1310:	40 e2       	ldi	r20, 0x20	; 32
    1312:	51 e4       	ldi	r21, 0x41	; 65
    1314:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1318:	dc 01       	movw	r26, r24
    131a:	cb 01       	movw	r24, r22
    131c:	bc 01       	movw	r22, r24
    131e:	cd 01       	movw	r24, r26
    1320:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1324:	dc 01       	movw	r26, r24
    1326:	cb 01       	movw	r24, r22
    1328:	9e 83       	std	Y+6, r25	; 0x06
    132a:	8d 83       	std	Y+5, r24	; 0x05
    132c:	0f c0       	rjmp	.+30     	; 0x134c <APP_getUserDecision+0xee>
    132e:	88 ec       	ldi	r24, 0xC8	; 200
    1330:	90 e0       	ldi	r25, 0x00	; 0
    1332:	9c 83       	std	Y+4, r25	; 0x04
    1334:	8b 83       	std	Y+3, r24	; 0x03
    1336:	8b 81       	ldd	r24, Y+3	; 0x03
    1338:	9c 81       	ldd	r25, Y+4	; 0x04
    133a:	01 97       	sbiw	r24, 0x01	; 1
    133c:	f1 f7       	brne	.-4      	; 0x133a <APP_getUserDecision+0xdc>
    133e:	9c 83       	std	Y+4, r25	; 0x04
    1340:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1342:	8d 81       	ldd	r24, Y+5	; 0x05
    1344:	9e 81       	ldd	r25, Y+6	; 0x06
    1346:	01 97       	sbiw	r24, 0x01	; 1
    1348:	9e 83       	std	Y+6, r25	; 0x06
    134a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    134c:	8d 81       	ldd	r24, Y+5	; 0x05
    134e:	9e 81       	ldd	r25, Y+6	; 0x06
    1350:	00 97       	sbiw	r24, 0x00	; 0
    1352:	69 f7       	brne	.-38     	; 0x132e <APP_getUserDecision+0xd0>
    1354:	14 c0       	rjmp	.+40     	; 0x137e <APP_getUserDecision+0x120>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1356:	6f 81       	ldd	r22, Y+7	; 0x07
    1358:	78 85       	ldd	r23, Y+8	; 0x08
    135a:	89 85       	ldd	r24, Y+9	; 0x09
    135c:	9a 85       	ldd	r25, Y+10	; 0x0a
    135e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1362:	dc 01       	movw	r26, r24
    1364:	cb 01       	movw	r24, r22
    1366:	9e 83       	std	Y+6, r25	; 0x06
    1368:	8d 83       	std	Y+5, r24	; 0x05
    136a:	8d 81       	ldd	r24, Y+5	; 0x05
    136c:	9e 81       	ldd	r25, Y+6	; 0x06
    136e:	9a 83       	std	Y+2, r25	; 0x02
    1370:	89 83       	std	Y+1, r24	; 0x01
    1372:	89 81       	ldd	r24, Y+1	; 0x01
    1374:	9a 81       	ldd	r25, Y+2	; 0x02
    1376:	01 97       	sbiw	r24, 0x01	; 1
    1378:	f1 f7       	brne	.-4      	; 0x1376 <APP_getUserDecision+0x118>
    137a:	9a 83       	std	Y+2, r25	; 0x02
    137c:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(PRESS_TIME);	/* Press Time */

	}while(key != CHANGE_PASSWORD && key != DOOR_OPEN);
    137e:	80 91 32 02 	lds	r24, 0x0232
    1382:	8b 32       	cpi	r24, 0x2B	; 43
    1384:	29 f0       	breq	.+10     	; 0x1390 <APP_getUserDecision+0x132>
    1386:	80 91 32 02 	lds	r24, 0x0232
    138a:	8d 32       	cpi	r24, 0x2D	; 45
    138c:	09 f0       	breq	.+2      	; 0x1390 <APP_getUserDecision+0x132>
    138e:	81 cf       	rjmp	.-254    	; 0x1292 <APP_getUserDecision+0x34>

	/* Check if the key pressed is equal to (CHANGE_PASSWORD or DOOR_OPEN) */
	if(key == CHANGE_PASSWORD)
    1390:	80 91 32 02 	lds	r24, 0x0232
    1394:	8b 32       	cpi	r24, 0x2B	; 43
    1396:	21 f4       	brne	.+8      	; 0x13a0 <APP_getUserDecision+0x142>
	{
		decision = CHANGE_PASSWORD;
    1398:	8b e2       	ldi	r24, 0x2B	; 43
    139a:	80 93 31 02 	sts	0x0231, r24
    139e:	07 c0       	rjmp	.+14     	; 0x13ae <APP_getUserDecision+0x150>
	}
	else if(key == DOOR_OPEN)
    13a0:	80 91 32 02 	lds	r24, 0x0232
    13a4:	8d 32       	cpi	r24, 0x2D	; 45
    13a6:	19 f4       	brne	.+6      	; 0x13ae <APP_getUserDecision+0x150>
	{
		decision = DOOR_OPEN;
    13a8:	8d e2       	ldi	r24, 0x2D	; 45
    13aa:	80 93 31 02 	sts	0x0231, r24
	}

	return decision;	/* Return User decision */
    13ae:	80 91 31 02 	lds	r24, 0x0231
}
    13b2:	2e 96       	adiw	r28, 0x0e	; 14
    13b4:	0f b6       	in	r0, 0x3f	; 63
    13b6:	f8 94       	cli
    13b8:	de bf       	out	0x3e, r29	; 62
    13ba:	0f be       	out	0x3f, r0	; 63
    13bc:	cd bf       	out	0x3d, r28	; 61
    13be:	cf 91       	pop	r28
    13c0:	df 91       	pop	r29
    13c2:	08 95       	ret

000013c4 <APP_sendPassword>:
 * [in/out]		 	None
 *
 * [Returns]:       None
 **********************************************************************************/
void APP_sendPassword(uint8 * Password1_Ptr)
{
    13c4:	df 93       	push	r29
    13c6:	cf 93       	push	r28
    13c8:	00 d0       	rcall	.+0      	; 0x13ca <APP_sendPassword+0x6>
    13ca:	cd b7       	in	r28, 0x3d	; 61
    13cc:	de b7       	in	r29, 0x3e	; 62
    13ce:	9a 83       	std	Y+2, r25	; 0x02
    13d0:	89 83       	std	Y+1, r24	; 0x01
	static uint8 counter; /* Local variable used as a counter for the for Loop */

	/* For loop to send the password to the Control ECU */
	for(counter = 0; counter < PASSWORD_WIDTH ;counter++)
    13d2:	10 92 33 02 	sts	0x0233, r1
    13d6:	15 c0       	rjmp	.+42     	; 0x1402 <APP_sendPassword+0x3e>
	{
		while(UART_recieveByte() != ECU_READY){}	/* Wait until Control ECU be ready */
    13d8:	0e 94 48 18 	call	0x3090	; 0x3090 <UART_recieveByte>
    13dc:	80 31       	cpi	r24, 0x10	; 16
    13de:	e1 f7       	brne	.-8      	; 0x13d8 <APP_sendPassword+0x14>

		/* Send 1 Byte of the password to the Control ECU */
		UART_sendByte(Password1_Ptr[counter]);
    13e0:	80 91 33 02 	lds	r24, 0x0233
    13e4:	28 2f       	mov	r18, r24
    13e6:	30 e0       	ldi	r19, 0x00	; 0
    13e8:	89 81       	ldd	r24, Y+1	; 0x01
    13ea:	9a 81       	ldd	r25, Y+2	; 0x02
    13ec:	fc 01       	movw	r30, r24
    13ee:	e2 0f       	add	r30, r18
    13f0:	f3 1f       	adc	r31, r19
    13f2:	80 81       	ld	r24, Z
    13f4:	0e 94 31 18 	call	0x3062	; 0x3062 <UART_sendByte>
void APP_sendPassword(uint8 * Password1_Ptr)
{
	static uint8 counter; /* Local variable used as a counter for the for Loop */

	/* For loop to send the password to the Control ECU */
	for(counter = 0; counter < PASSWORD_WIDTH ;counter++)
    13f8:	80 91 33 02 	lds	r24, 0x0233
    13fc:	8f 5f       	subi	r24, 0xFF	; 255
    13fe:	80 93 33 02 	sts	0x0233, r24
    1402:	80 91 33 02 	lds	r24, 0x0233
    1406:	85 30       	cpi	r24, 0x05	; 5
    1408:	38 f3       	brcs	.-50     	; 0x13d8 <APP_sendPassword+0x14>
		while(UART_recieveByte() != ECU_READY){}	/* Wait until Control ECU be ready */

		/* Send 1 Byte of the password to the Control ECU */
		UART_sendByte(Password1_Ptr[counter]);
	}
}
    140a:	0f 90       	pop	r0
    140c:	0f 90       	pop	r0
    140e:	cf 91       	pop	r28
    1410:	df 91       	pop	r29
    1412:	08 95       	ret

00001414 <APP_incorrectPassword>:
 * [in/out]		 	None
 *
 * [Returns]:       None
 ********************************************************************************/
void APP_incorrectPassword(void)
{
    1414:	df 93       	push	r29
    1416:	cf 93       	push	r28
    1418:	cd b7       	in	r28, 0x3d	; 61
    141a:	de b7       	in	r29, 0x3e	; 62
    141c:	e6 97       	sbiw	r28, 0x36	; 54
    141e:	0f b6       	in	r0, 0x3f	; 63
    1420:	f8 94       	cli
    1422:	de bf       	out	0x3e, r29	; 62
    1424:	0f be       	out	0x3f, r0	; 63
    1426:	cd bf       	out	0x3d, r28	; 61
	++g_wrongAttempts;	/* Increment the number of wrong choice */
    1428:	80 91 2e 02 	lds	r24, 0x022E
    142c:	8f 5f       	subi	r24, 0xFF	; 255
    142e:	80 93 2e 02 	sts	0x022E, r24

	LCD_clearScreen();
    1432:	0e 94 9d 13 	call	0x273a	; 0x273a <LCD_clearScreen>
	LCD_displayStringRowColumn(0, 1, "INCORRECT PASSWORD");
    1436:	22 e2       	ldi	r18, 0x22	; 34
    1438:	31 e0       	ldi	r19, 0x01	; 1
    143a:	80 e0       	ldi	r24, 0x00	; 0
    143c:	61 e0       	ldi	r22, 0x01	; 1
    143e:	a9 01       	movw	r20, r18
    1440:	0e 94 61 13 	call	0x26c2	; 0x26c2 <LCD_displayStringRowColumn>
    1444:	80 e0       	ldi	r24, 0x00	; 0
    1446:	90 e0       	ldi	r25, 0x00	; 0
    1448:	aa ef       	ldi	r26, 0xFA	; 250
    144a:	b3 e4       	ldi	r27, 0x43	; 67
    144c:	8f a3       	std	Y+39, r24	; 0x27
    144e:	98 a7       	std	Y+40, r25	; 0x28
    1450:	a9 a7       	std	Y+41, r26	; 0x29
    1452:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1454:	6f a1       	ldd	r22, Y+39	; 0x27
    1456:	78 a5       	ldd	r23, Y+40	; 0x28
    1458:	89 a5       	ldd	r24, Y+41	; 0x29
    145a:	9a a5       	ldd	r25, Y+42	; 0x2a
    145c:	20 e0       	ldi	r18, 0x00	; 0
    145e:	30 e0       	ldi	r19, 0x00	; 0
    1460:	4a ef       	ldi	r20, 0xFA	; 250
    1462:	54 e4       	ldi	r21, 0x44	; 68
    1464:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1468:	dc 01       	movw	r26, r24
    146a:	cb 01       	movw	r24, r22
    146c:	8b a3       	std	Y+35, r24	; 0x23
    146e:	9c a3       	std	Y+36, r25	; 0x24
    1470:	ad a3       	std	Y+37, r26	; 0x25
    1472:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1474:	6b a1       	ldd	r22, Y+35	; 0x23
    1476:	7c a1       	ldd	r23, Y+36	; 0x24
    1478:	8d a1       	ldd	r24, Y+37	; 0x25
    147a:	9e a1       	ldd	r25, Y+38	; 0x26
    147c:	20 e0       	ldi	r18, 0x00	; 0
    147e:	30 e0       	ldi	r19, 0x00	; 0
    1480:	40 e8       	ldi	r20, 0x80	; 128
    1482:	5f e3       	ldi	r21, 0x3F	; 63
    1484:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1488:	88 23       	and	r24, r24
    148a:	2c f4       	brge	.+10     	; 0x1496 <APP_incorrectPassword+0x82>
		__ticks = 1;
    148c:	81 e0       	ldi	r24, 0x01	; 1
    148e:	90 e0       	ldi	r25, 0x00	; 0
    1490:	9a a3       	std	Y+34, r25	; 0x22
    1492:	89 a3       	std	Y+33, r24	; 0x21
    1494:	3f c0       	rjmp	.+126    	; 0x1514 <APP_incorrectPassword+0x100>
	else if (__tmp > 65535)
    1496:	6b a1       	ldd	r22, Y+35	; 0x23
    1498:	7c a1       	ldd	r23, Y+36	; 0x24
    149a:	8d a1       	ldd	r24, Y+37	; 0x25
    149c:	9e a1       	ldd	r25, Y+38	; 0x26
    149e:	20 e0       	ldi	r18, 0x00	; 0
    14a0:	3f ef       	ldi	r19, 0xFF	; 255
    14a2:	4f e7       	ldi	r20, 0x7F	; 127
    14a4:	57 e4       	ldi	r21, 0x47	; 71
    14a6:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    14aa:	18 16       	cp	r1, r24
    14ac:	4c f5       	brge	.+82     	; 0x1500 <APP_incorrectPassword+0xec>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    14ae:	6f a1       	ldd	r22, Y+39	; 0x27
    14b0:	78 a5       	ldd	r23, Y+40	; 0x28
    14b2:	89 a5       	ldd	r24, Y+41	; 0x29
    14b4:	9a a5       	ldd	r25, Y+42	; 0x2a
    14b6:	20 e0       	ldi	r18, 0x00	; 0
    14b8:	30 e0       	ldi	r19, 0x00	; 0
    14ba:	40 e2       	ldi	r20, 0x20	; 32
    14bc:	51 e4       	ldi	r21, 0x41	; 65
    14be:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    14c2:	dc 01       	movw	r26, r24
    14c4:	cb 01       	movw	r24, r22
    14c6:	bc 01       	movw	r22, r24
    14c8:	cd 01       	movw	r24, r26
    14ca:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    14ce:	dc 01       	movw	r26, r24
    14d0:	cb 01       	movw	r24, r22
    14d2:	9a a3       	std	Y+34, r25	; 0x22
    14d4:	89 a3       	std	Y+33, r24	; 0x21
    14d6:	0f c0       	rjmp	.+30     	; 0x14f6 <APP_incorrectPassword+0xe2>
    14d8:	88 ec       	ldi	r24, 0xC8	; 200
    14da:	90 e0       	ldi	r25, 0x00	; 0
    14dc:	98 a3       	std	Y+32, r25	; 0x20
    14de:	8f 8f       	std	Y+31, r24	; 0x1f
    14e0:	8f 8d       	ldd	r24, Y+31	; 0x1f
    14e2:	98 a1       	ldd	r25, Y+32	; 0x20
    14e4:	01 97       	sbiw	r24, 0x01	; 1
    14e6:	f1 f7       	brne	.-4      	; 0x14e4 <APP_incorrectPassword+0xd0>
    14e8:	98 a3       	std	Y+32, r25	; 0x20
    14ea:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    14ec:	89 a1       	ldd	r24, Y+33	; 0x21
    14ee:	9a a1       	ldd	r25, Y+34	; 0x22
    14f0:	01 97       	sbiw	r24, 0x01	; 1
    14f2:	9a a3       	std	Y+34, r25	; 0x22
    14f4:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    14f6:	89 a1       	ldd	r24, Y+33	; 0x21
    14f8:	9a a1       	ldd	r25, Y+34	; 0x22
    14fa:	00 97       	sbiw	r24, 0x00	; 0
    14fc:	69 f7       	brne	.-38     	; 0x14d8 <APP_incorrectPassword+0xc4>
    14fe:	14 c0       	rjmp	.+40     	; 0x1528 <APP_incorrectPassword+0x114>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1500:	6b a1       	ldd	r22, Y+35	; 0x23
    1502:	7c a1       	ldd	r23, Y+36	; 0x24
    1504:	8d a1       	ldd	r24, Y+37	; 0x25
    1506:	9e a1       	ldd	r25, Y+38	; 0x26
    1508:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    150c:	dc 01       	movw	r26, r24
    150e:	cb 01       	movw	r24, r22
    1510:	9a a3       	std	Y+34, r25	; 0x22
    1512:	89 a3       	std	Y+33, r24	; 0x21
    1514:	89 a1       	ldd	r24, Y+33	; 0x21
    1516:	9a a1       	ldd	r25, Y+34	; 0x22
    1518:	9e 8f       	std	Y+30, r25	; 0x1e
    151a:	8d 8f       	std	Y+29, r24	; 0x1d
    151c:	8d 8d       	ldd	r24, Y+29	; 0x1d
    151e:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1520:	01 97       	sbiw	r24, 0x01	; 1
    1522:	f1 f7       	brne	.-4      	; 0x1520 <APP_incorrectPassword+0x10c>
    1524:	9e 8f       	std	Y+30, r25	; 0x1e
    1526:	8d 8f       	std	Y+29, r24	; 0x1d

	/*
	 * Check if the next attempt is the last one, alert the user by displaying
	 * a message "AFTER 1 MORE FAILED ATTEMPT SYSTEM WILL BE LOCKED FOR 10 SECONDS"
	 */
	if(g_wrongAttempts == MAXIMUM_ATTEMPTS-1)
    1528:	80 91 2e 02 	lds	r24, 0x022E
    152c:	82 30       	cpi	r24, 0x02	; 2
    152e:	09 f0       	breq	.+2      	; 0x1532 <APP_incorrectPassword+0x11e>
    1530:	90 c0       	rjmp	.+288    	; 0x1652 <APP_incorrectPassword+0x23e>
	{
		LCD_clearScreen();
    1532:	0e 94 9d 13 	call	0x273a	; 0x273a <LCD_clearScreen>
		LCD_displayStringRowColumn(0, 0, "AFTER 1 MORE FAILED");
    1536:	25 e3       	ldi	r18, 0x35	; 53
    1538:	31 e0       	ldi	r19, 0x01	; 1
    153a:	80 e0       	ldi	r24, 0x00	; 0
    153c:	60 e0       	ldi	r22, 0x00	; 0
    153e:	a9 01       	movw	r20, r18
    1540:	0e 94 61 13 	call	0x26c2	; 0x26c2 <LCD_displayStringRowColumn>
		LCD_displayStringRowColumn(1, 0, "ATTEMPT SYSTEM WILL");
    1544:	29 e4       	ldi	r18, 0x49	; 73
    1546:	31 e0       	ldi	r19, 0x01	; 1
    1548:	81 e0       	ldi	r24, 0x01	; 1
    154a:	60 e0       	ldi	r22, 0x00	; 0
    154c:	a9 01       	movw	r20, r18
    154e:	0e 94 61 13 	call	0x26c2	; 0x26c2 <LCD_displayStringRowColumn>
		LCD_displayStringRowColumn(2, 2, "BE LOCKED FOR 15");
    1552:	2d e5       	ldi	r18, 0x5D	; 93
    1554:	31 e0       	ldi	r19, 0x01	; 1
    1556:	82 e0       	ldi	r24, 0x02	; 2
    1558:	62 e0       	ldi	r22, 0x02	; 2
    155a:	a9 01       	movw	r20, r18
    155c:	0e 94 61 13 	call	0x26c2	; 0x26c2 <LCD_displayStringRowColumn>
		LCD_displayStringRowColumn(3, 6, "SECONDS");
    1560:	2e e6       	ldi	r18, 0x6E	; 110
    1562:	31 e0       	ldi	r19, 0x01	; 1
    1564:	83 e0       	ldi	r24, 0x03	; 3
    1566:	66 e0       	ldi	r22, 0x06	; 6
    1568:	a9 01       	movw	r20, r18
    156a:	0e 94 61 13 	call	0x26c2	; 0x26c2 <LCD_displayStringRowColumn>
    156e:	80 e0       	ldi	r24, 0x00	; 0
    1570:	90 e0       	ldi	r25, 0x00	; 0
    1572:	a8 e4       	ldi	r26, 0x48	; 72
    1574:	b4 e4       	ldi	r27, 0x44	; 68
    1576:	89 8f       	std	Y+25, r24	; 0x19
    1578:	9a 8f       	std	Y+26, r25	; 0x1a
    157a:	ab 8f       	std	Y+27, r26	; 0x1b
    157c:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    157e:	69 8d       	ldd	r22, Y+25	; 0x19
    1580:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1582:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1584:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1586:	20 e0       	ldi	r18, 0x00	; 0
    1588:	30 e0       	ldi	r19, 0x00	; 0
    158a:	4a ef       	ldi	r20, 0xFA	; 250
    158c:	54 e4       	ldi	r21, 0x44	; 68
    158e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1592:	dc 01       	movw	r26, r24
    1594:	cb 01       	movw	r24, r22
    1596:	8d 8b       	std	Y+21, r24	; 0x15
    1598:	9e 8b       	std	Y+22, r25	; 0x16
    159a:	af 8b       	std	Y+23, r26	; 0x17
    159c:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    159e:	6d 89       	ldd	r22, Y+21	; 0x15
    15a0:	7e 89       	ldd	r23, Y+22	; 0x16
    15a2:	8f 89       	ldd	r24, Y+23	; 0x17
    15a4:	98 8d       	ldd	r25, Y+24	; 0x18
    15a6:	20 e0       	ldi	r18, 0x00	; 0
    15a8:	30 e0       	ldi	r19, 0x00	; 0
    15aa:	40 e8       	ldi	r20, 0x80	; 128
    15ac:	5f e3       	ldi	r21, 0x3F	; 63
    15ae:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    15b2:	88 23       	and	r24, r24
    15b4:	2c f4       	brge	.+10     	; 0x15c0 <APP_incorrectPassword+0x1ac>
		__ticks = 1;
    15b6:	81 e0       	ldi	r24, 0x01	; 1
    15b8:	90 e0       	ldi	r25, 0x00	; 0
    15ba:	9c 8b       	std	Y+20, r25	; 0x14
    15bc:	8b 8b       	std	Y+19, r24	; 0x13
    15be:	3f c0       	rjmp	.+126    	; 0x163e <APP_incorrectPassword+0x22a>
	else if (__tmp > 65535)
    15c0:	6d 89       	ldd	r22, Y+21	; 0x15
    15c2:	7e 89       	ldd	r23, Y+22	; 0x16
    15c4:	8f 89       	ldd	r24, Y+23	; 0x17
    15c6:	98 8d       	ldd	r25, Y+24	; 0x18
    15c8:	20 e0       	ldi	r18, 0x00	; 0
    15ca:	3f ef       	ldi	r19, 0xFF	; 255
    15cc:	4f e7       	ldi	r20, 0x7F	; 127
    15ce:	57 e4       	ldi	r21, 0x47	; 71
    15d0:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    15d4:	18 16       	cp	r1, r24
    15d6:	4c f5       	brge	.+82     	; 0x162a <APP_incorrectPassword+0x216>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    15d8:	69 8d       	ldd	r22, Y+25	; 0x19
    15da:	7a 8d       	ldd	r23, Y+26	; 0x1a
    15dc:	8b 8d       	ldd	r24, Y+27	; 0x1b
    15de:	9c 8d       	ldd	r25, Y+28	; 0x1c
    15e0:	20 e0       	ldi	r18, 0x00	; 0
    15e2:	30 e0       	ldi	r19, 0x00	; 0
    15e4:	40 e2       	ldi	r20, 0x20	; 32
    15e6:	51 e4       	ldi	r21, 0x41	; 65
    15e8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    15ec:	dc 01       	movw	r26, r24
    15ee:	cb 01       	movw	r24, r22
    15f0:	bc 01       	movw	r22, r24
    15f2:	cd 01       	movw	r24, r26
    15f4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    15f8:	dc 01       	movw	r26, r24
    15fa:	cb 01       	movw	r24, r22
    15fc:	9c 8b       	std	Y+20, r25	; 0x14
    15fe:	8b 8b       	std	Y+19, r24	; 0x13
    1600:	0f c0       	rjmp	.+30     	; 0x1620 <APP_incorrectPassword+0x20c>
    1602:	88 ec       	ldi	r24, 0xC8	; 200
    1604:	90 e0       	ldi	r25, 0x00	; 0
    1606:	9a 8b       	std	Y+18, r25	; 0x12
    1608:	89 8b       	std	Y+17, r24	; 0x11
    160a:	89 89       	ldd	r24, Y+17	; 0x11
    160c:	9a 89       	ldd	r25, Y+18	; 0x12
    160e:	01 97       	sbiw	r24, 0x01	; 1
    1610:	f1 f7       	brne	.-4      	; 0x160e <APP_incorrectPassword+0x1fa>
    1612:	9a 8b       	std	Y+18, r25	; 0x12
    1614:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1616:	8b 89       	ldd	r24, Y+19	; 0x13
    1618:	9c 89       	ldd	r25, Y+20	; 0x14
    161a:	01 97       	sbiw	r24, 0x01	; 1
    161c:	9c 8b       	std	Y+20, r25	; 0x14
    161e:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1620:	8b 89       	ldd	r24, Y+19	; 0x13
    1622:	9c 89       	ldd	r25, Y+20	; 0x14
    1624:	00 97       	sbiw	r24, 0x00	; 0
    1626:	69 f7       	brne	.-38     	; 0x1602 <APP_incorrectPassword+0x1ee>
    1628:	14 c0       	rjmp	.+40     	; 0x1652 <APP_incorrectPassword+0x23e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    162a:	6d 89       	ldd	r22, Y+21	; 0x15
    162c:	7e 89       	ldd	r23, Y+22	; 0x16
    162e:	8f 89       	ldd	r24, Y+23	; 0x17
    1630:	98 8d       	ldd	r25, Y+24	; 0x18
    1632:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1636:	dc 01       	movw	r26, r24
    1638:	cb 01       	movw	r24, r22
    163a:	9c 8b       	std	Y+20, r25	; 0x14
    163c:	8b 8b       	std	Y+19, r24	; 0x13
    163e:	8b 89       	ldd	r24, Y+19	; 0x13
    1640:	9c 89       	ldd	r25, Y+20	; 0x14
    1642:	98 8b       	std	Y+16, r25	; 0x10
    1644:	8f 87       	std	Y+15, r24	; 0x0f
    1646:	8f 85       	ldd	r24, Y+15	; 0x0f
    1648:	98 89       	ldd	r25, Y+16	; 0x10
    164a:	01 97       	sbiw	r24, 0x01	; 1
    164c:	f1 f7       	brne	.-4      	; 0x164a <APP_incorrectPassword+0x236>
    164e:	98 8b       	std	Y+16, r25	; 0x10
    1650:	8f 87       	std	Y+15, r24	; 0x0f

	/*
	 * Check if this attempt is less than MAXIMUM NUMBER OF ATTEMPTS,
	 * displaying a message "ENTER PASSWORD AGAIN"
	 */
	if(g_wrongAttempts < MAXIMUM_ATTEMPTS)
    1652:	80 91 2e 02 	lds	r24, 0x022E
    1656:	83 30       	cpi	r24, 0x03	; 3
    1658:	b8 f4       	brcc	.+46     	; 0x1688 <APP_incorrectPassword+0x274>
	{
		LCD_clearScreen();
    165a:	0e 94 9d 13 	call	0x273a	; 0x273a <LCD_clearScreen>
		LCD_displayStringRowColumn(0, 0, "ENTER PASSWORD AGAIN");
    165e:	26 e7       	ldi	r18, 0x76	; 118
    1660:	31 e0       	ldi	r19, 0x01	; 1
    1662:	80 e0       	ldi	r24, 0x00	; 0
    1664:	60 e0       	ldi	r22, 0x00	; 0
    1666:	a9 01       	movw	r20, r18
    1668:	0e 94 61 13 	call	0x26c2	; 0x26c2 <LCD_displayStringRowColumn>
		LCD_displayStringRowColumn(1, 0, "= : TO SUMBIT");
    166c:	25 eb       	ldi	r18, 0xB5	; 181
    166e:	30 e0       	ldi	r19, 0x00	; 0
    1670:	81 e0       	ldi	r24, 0x01	; 1
    1672:	60 e0       	ldi	r22, 0x00	; 0
    1674:	a9 01       	movw	r20, r18
    1676:	0e 94 61 13 	call	0x26c2	; 0x26c2 <LCD_displayStringRowColumn>
		LCD_displayStringRowColumn(2, 0, "X : TO CLEAR");
    167a:	23 ec       	ldi	r18, 0xC3	; 195
    167c:	30 e0       	ldi	r19, 0x00	; 0
    167e:	82 e0       	ldi	r24, 0x02	; 2
    1680:	60 e0       	ldi	r22, 0x00	; 0
    1682:	a9 01       	movw	r20, r18
    1684:	0e 94 61 13 	call	0x26c2	; 0x26c2 <LCD_displayStringRowColumn>

	/*
	 * Check if this attempt is equal to MAXIMUM NUMBER OF ATTEMPTS, run the buzzer
	 * and hold system for 15 Seconds
	 */
	if(g_wrongAttempts == MAXIMUM_ATTEMPTS)
    1688:	80 91 2e 02 	lds	r24, 0x022E
    168c:	83 30       	cpi	r24, 0x03	; 3
    168e:	09 f0       	breq	.+2      	; 0x1692 <APP_incorrectPassword+0x27e>
    1690:	ba c0       	rjmp	.+372    	; 0x1806 <APP_incorrectPassword+0x3f2>
	{
		LCD_clearScreen();
    1692:	0e 94 9d 13 	call	0x273a	; 0x273a <LCD_clearScreen>
		LCD_displayStringRowColumn(0, 1, "MAXIMUM NUMBER OF");
    1696:	2b e8       	ldi	r18, 0x8B	; 139
    1698:	31 e0       	ldi	r19, 0x01	; 1
    169a:	80 e0       	ldi	r24, 0x00	; 0
    169c:	61 e0       	ldi	r22, 0x01	; 1
    169e:	a9 01       	movw	r20, r18
    16a0:	0e 94 61 13 	call	0x26c2	; 0x26c2 <LCD_displayStringRowColumn>
		LCD_displayStringRowColumn(1, 1, "ATTEMPTS EXCEEDED");
    16a4:	2d e9       	ldi	r18, 0x9D	; 157
    16a6:	31 e0       	ldi	r19, 0x01	; 1
    16a8:	81 e0       	ldi	r24, 0x01	; 1
    16aa:	61 e0       	ldi	r22, 0x01	; 1
    16ac:	a9 01       	movw	r20, r18
    16ae:	0e 94 61 13 	call	0x26c2	; 0x26c2 <LCD_displayStringRowColumn>
    16b2:	80 e0       	ldi	r24, 0x00	; 0
    16b4:	90 e0       	ldi	r25, 0x00	; 0
    16b6:	aa ef       	ldi	r26, 0xFA	; 250
    16b8:	b3 e4       	ldi	r27, 0x43	; 67
    16ba:	8b 87       	std	Y+11, r24	; 0x0b
    16bc:	9c 87       	std	Y+12, r25	; 0x0c
    16be:	ad 87       	std	Y+13, r26	; 0x0d
    16c0:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    16c2:	6b 85       	ldd	r22, Y+11	; 0x0b
    16c4:	7c 85       	ldd	r23, Y+12	; 0x0c
    16c6:	8d 85       	ldd	r24, Y+13	; 0x0d
    16c8:	9e 85       	ldd	r25, Y+14	; 0x0e
    16ca:	20 e0       	ldi	r18, 0x00	; 0
    16cc:	30 e0       	ldi	r19, 0x00	; 0
    16ce:	4a ef       	ldi	r20, 0xFA	; 250
    16d0:	54 e4       	ldi	r21, 0x44	; 68
    16d2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    16d6:	dc 01       	movw	r26, r24
    16d8:	cb 01       	movw	r24, r22
    16da:	8f 83       	std	Y+7, r24	; 0x07
    16dc:	98 87       	std	Y+8, r25	; 0x08
    16de:	a9 87       	std	Y+9, r26	; 0x09
    16e0:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    16e2:	6f 81       	ldd	r22, Y+7	; 0x07
    16e4:	78 85       	ldd	r23, Y+8	; 0x08
    16e6:	89 85       	ldd	r24, Y+9	; 0x09
    16e8:	9a 85       	ldd	r25, Y+10	; 0x0a
    16ea:	20 e0       	ldi	r18, 0x00	; 0
    16ec:	30 e0       	ldi	r19, 0x00	; 0
    16ee:	40 e8       	ldi	r20, 0x80	; 128
    16f0:	5f e3       	ldi	r21, 0x3F	; 63
    16f2:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    16f6:	88 23       	and	r24, r24
    16f8:	2c f4       	brge	.+10     	; 0x1704 <APP_incorrectPassword+0x2f0>
		__ticks = 1;
    16fa:	81 e0       	ldi	r24, 0x01	; 1
    16fc:	90 e0       	ldi	r25, 0x00	; 0
    16fe:	9e 83       	std	Y+6, r25	; 0x06
    1700:	8d 83       	std	Y+5, r24	; 0x05
    1702:	3f c0       	rjmp	.+126    	; 0x1782 <APP_incorrectPassword+0x36e>
	else if (__tmp > 65535)
    1704:	6f 81       	ldd	r22, Y+7	; 0x07
    1706:	78 85       	ldd	r23, Y+8	; 0x08
    1708:	89 85       	ldd	r24, Y+9	; 0x09
    170a:	9a 85       	ldd	r25, Y+10	; 0x0a
    170c:	20 e0       	ldi	r18, 0x00	; 0
    170e:	3f ef       	ldi	r19, 0xFF	; 255
    1710:	4f e7       	ldi	r20, 0x7F	; 127
    1712:	57 e4       	ldi	r21, 0x47	; 71
    1714:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1718:	18 16       	cp	r1, r24
    171a:	4c f5       	brge	.+82     	; 0x176e <APP_incorrectPassword+0x35a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    171c:	6b 85       	ldd	r22, Y+11	; 0x0b
    171e:	7c 85       	ldd	r23, Y+12	; 0x0c
    1720:	8d 85       	ldd	r24, Y+13	; 0x0d
    1722:	9e 85       	ldd	r25, Y+14	; 0x0e
    1724:	20 e0       	ldi	r18, 0x00	; 0
    1726:	30 e0       	ldi	r19, 0x00	; 0
    1728:	40 e2       	ldi	r20, 0x20	; 32
    172a:	51 e4       	ldi	r21, 0x41	; 65
    172c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1730:	dc 01       	movw	r26, r24
    1732:	cb 01       	movw	r24, r22
    1734:	bc 01       	movw	r22, r24
    1736:	cd 01       	movw	r24, r26
    1738:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    173c:	dc 01       	movw	r26, r24
    173e:	cb 01       	movw	r24, r22
    1740:	9e 83       	std	Y+6, r25	; 0x06
    1742:	8d 83       	std	Y+5, r24	; 0x05
    1744:	0f c0       	rjmp	.+30     	; 0x1764 <APP_incorrectPassword+0x350>
    1746:	88 ec       	ldi	r24, 0xC8	; 200
    1748:	90 e0       	ldi	r25, 0x00	; 0
    174a:	9c 83       	std	Y+4, r25	; 0x04
    174c:	8b 83       	std	Y+3, r24	; 0x03
    174e:	8b 81       	ldd	r24, Y+3	; 0x03
    1750:	9c 81       	ldd	r25, Y+4	; 0x04
    1752:	01 97       	sbiw	r24, 0x01	; 1
    1754:	f1 f7       	brne	.-4      	; 0x1752 <APP_incorrectPassword+0x33e>
    1756:	9c 83       	std	Y+4, r25	; 0x04
    1758:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    175a:	8d 81       	ldd	r24, Y+5	; 0x05
    175c:	9e 81       	ldd	r25, Y+6	; 0x06
    175e:	01 97       	sbiw	r24, 0x01	; 1
    1760:	9e 83       	std	Y+6, r25	; 0x06
    1762:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1764:	8d 81       	ldd	r24, Y+5	; 0x05
    1766:	9e 81       	ldd	r25, Y+6	; 0x06
    1768:	00 97       	sbiw	r24, 0x00	; 0
    176a:	69 f7       	brne	.-38     	; 0x1746 <APP_incorrectPassword+0x332>
    176c:	14 c0       	rjmp	.+40     	; 0x1796 <APP_incorrectPassword+0x382>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    176e:	6f 81       	ldd	r22, Y+7	; 0x07
    1770:	78 85       	ldd	r23, Y+8	; 0x08
    1772:	89 85       	ldd	r24, Y+9	; 0x09
    1774:	9a 85       	ldd	r25, Y+10	; 0x0a
    1776:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    177a:	dc 01       	movw	r26, r24
    177c:	cb 01       	movw	r24, r22
    177e:	9e 83       	std	Y+6, r25	; 0x06
    1780:	8d 83       	std	Y+5, r24	; 0x05
    1782:	8d 81       	ldd	r24, Y+5	; 0x05
    1784:	9e 81       	ldd	r25, Y+6	; 0x06
    1786:	9a 83       	std	Y+2, r25	; 0x02
    1788:	89 83       	std	Y+1, r24	; 0x01
    178a:	89 81       	ldd	r24, Y+1	; 0x01
    178c:	9a 81       	ldd	r25, Y+2	; 0x02
    178e:	01 97       	sbiw	r24, 0x01	; 1
    1790:	f1 f7       	brne	.-4      	; 0x178e <APP_incorrectPassword+0x37a>
    1792:	9a 83       	std	Y+2, r25	; 0x02
    1794:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(SHORT_DISPLAY_TIME);

		/* TIMER Driver Configurations */
		TIMER_ConfigType TIMER_Config = {INITIAL_VALUE,COUNT_ONE_SECOND,TIMER_1,COMPARE,\
    1796:	ce 01       	movw	r24, r28
    1798:	8b 96       	adiw	r24, 0x2b	; 43
    179a:	9b ab       	std	Y+51, r25	; 0x33
    179c:	8a ab       	std	Y+50, r24	; 0x32
    179e:	e5 e1       	ldi	r30, 0x15	; 21
    17a0:	f2 e0       	ldi	r31, 0x02	; 2
    17a2:	fd ab       	std	Y+53, r31	; 0x35
    17a4:	ec ab       	std	Y+52, r30	; 0x34
    17a6:	f7 e0       	ldi	r31, 0x07	; 7
    17a8:	fe ab       	std	Y+54, r31	; 0x36
    17aa:	ec a9       	ldd	r30, Y+52	; 0x34
    17ac:	fd a9       	ldd	r31, Y+53	; 0x35
    17ae:	00 80       	ld	r0, Z
    17b0:	8c a9       	ldd	r24, Y+52	; 0x34
    17b2:	9d a9       	ldd	r25, Y+53	; 0x35
    17b4:	01 96       	adiw	r24, 0x01	; 1
    17b6:	9d ab       	std	Y+53, r25	; 0x35
    17b8:	8c ab       	std	Y+52, r24	; 0x34
    17ba:	ea a9       	ldd	r30, Y+50	; 0x32
    17bc:	fb a9       	ldd	r31, Y+51	; 0x33
    17be:	00 82       	st	Z, r0
    17c0:	8a a9       	ldd	r24, Y+50	; 0x32
    17c2:	9b a9       	ldd	r25, Y+51	; 0x33
    17c4:	01 96       	adiw	r24, 0x01	; 1
    17c6:	9b ab       	std	Y+51, r25	; 0x33
    17c8:	8a ab       	std	Y+50, r24	; 0x32
    17ca:	9e a9       	ldd	r25, Y+54	; 0x36
    17cc:	91 50       	subi	r25, 0x01	; 1
    17ce:	9e ab       	std	Y+54, r25	; 0x36
    17d0:	ee a9       	ldd	r30, Y+54	; 0x36
    17d2:	ee 23       	and	r30, r30
    17d4:	51 f7       	brne	.-44     	; 0x17aa <APP_incorrectPassword+0x396>
										 T1_F_CPU_1024};
		/*
		 * Call function that call back the alarm function if the TIMER1
		 * interrupt is fired
		 */
		TIMER_setCallBack(APP_countAlarmTime, TIMER_1);
    17d6:	8c e0       	ldi	r24, 0x0C	; 12
    17d8:	9c e0       	ldi	r25, 0x0C	; 12
    17da:	61 e0       	ldi	r22, 0x01	; 1
    17dc:	0e 94 1d 16 	call	0x2c3a	; 0x2c3a <TIMER_setCallBack>

		/* TIMER Driver Initialization */
		TIMER_init(&TIMER_Config);
    17e0:	ce 01       	movw	r24, r28
    17e2:	8b 96       	adiw	r24, 0x2b	; 43
    17e4:	0e 94 d9 14 	call	0x29b2	; 0x29b2 <TIMER_init>

		/* Display message to the */
		LCD_clearScreen();
    17e8:	0e 94 9d 13 	call	0x273a	; 0x273a <LCD_clearScreen>
		LCD_displayStringRowColumn(1, 2, "SYSTEM IS LOCKED");
    17ec:	2f ea       	ldi	r18, 0xAF	; 175
    17ee:	31 e0       	ldi	r19, 0x01	; 1
    17f0:	81 e0       	ldi	r24, 0x01	; 1
    17f2:	62 e0       	ldi	r22, 0x02	; 2
    17f4:	a9 01       	movw	r20, r18
    17f6:	0e 94 61 13 	call	0x26c2	; 0x26c2 <LCD_displayStringRowColumn>

		/* Wait until the alarm turned off */
		while(g_lockSystem != OPENED){}
    17fa:	80 91 2d 02 	lds	r24, 0x022D
    17fe:	81 30       	cpi	r24, 0x01	; 1
    1800:	e1 f7       	brne	.-8      	; 0x17fa <APP_incorrectPassword+0x3e6>
		/* Reset the lock system status to its initial value (SYSTEM UNLOCKED) */
		g_lockSystem = UNLOCKED;
    1802:	10 92 2d 02 	sts	0x022D, r1

	}	/* END OF MAXIMUM_ATTEMPTS */
}	/* END OF INCORRECT PASSWORD */
    1806:	e6 96       	adiw	r28, 0x36	; 54
    1808:	0f b6       	in	r0, 0x3f	; 63
    180a:	f8 94       	cli
    180c:	de bf       	out	0x3e, r29	; 62
    180e:	0f be       	out	0x3f, r0	; 63
    1810:	cd bf       	out	0x3d, r28	; 61
    1812:	cf 91       	pop	r28
    1814:	df 91       	pop	r29
    1816:	08 95       	ret

00001818 <APP_countAlarmTime>:
 * [in/out]		 	None
 *
 * [Returns]:       None
 ********************************************************************************/
void APP_countAlarmTime(void)
{
    1818:	df 93       	push	r29
    181a:	cf 93       	push	r28
    181c:	cd b7       	in	r28, 0x3d	; 61
    181e:	de b7       	in	r29, 0x3e	; 62
	++g_tick;	/* Increment global tick flag each time the interrupt fired */
    1820:	80 91 2c 02 	lds	r24, 0x022C
    1824:	8f 5f       	subi	r24, 0xFF	; 255
    1826:	80 93 2c 02 	sts	0x022C, r24

	if(g_tick == MAXIMUM_ALARM_TIME)
    182a:	80 91 2c 02 	lds	r24, 0x022C
    182e:	8f 30       	cpi	r24, 0x0F	; 15
    1830:	41 f4       	brne	.+16     	; 0x1842 <APP_countAlarmTime+0x2a>
	{
		/*
		 * De-initialization for the timer to be able to use it again correctly
		 */
		TIMER_DeInit(TIMER_1);
    1832:	81 e0       	ldi	r24, 0x01	; 1
    1834:	0e 94 8d 16 	call	0x2d1a	; 0x2d1a <TIMER_DeInit>
		g_tick = INITIAL_VALUE;	/* Clear global tick flag for the next time */
    1838:	10 92 2c 02 	sts	0x022C, r1
		g_lockSystem = OPENED;	/* Open the system again */
    183c:	81 e0       	ldi	r24, 0x01	; 1
    183e:	80 93 2d 02 	sts	0x022D, r24
	}
}
    1842:	cf 91       	pop	r28
    1844:	df 91       	pop	r29
    1846:	08 95       	ret

00001848 <APP_countMotorRunTime>:
 * [in/out]		 	None
 *
 * [Returns]:       None
 ********************************************************************************/
void APP_countMotorRunTime(void)
{
    1848:	df 93       	push	r29
    184a:	cf 93       	push	r28
    184c:	cd b7       	in	r28, 0x3d	; 61
    184e:	de b7       	in	r29, 0x3e	; 62
	++g_tick;	/* Increment global tick flag each time the interrupt fired */
    1850:	80 91 2c 02 	lds	r24, 0x022C
    1854:	8f 5f       	subi	r24, 0xFF	; 255
    1856:	80 93 2c 02 	sts	0x022C, r24

	if(g_tick == MAXIMUM_RUNNING_TIME)
    185a:	80 91 2c 02 	lds	r24, 0x022C
    185e:	8f 30       	cpi	r24, 0x0F	; 15
    1860:	41 f4       	brne	.+16     	; 0x1872 <APP_countMotorRunTime+0x2a>
	{
		/*
		 * De-initialization for the timer to be able to use it again correctly
		 */
		TIMER_DeInit(TIMER_1);
    1862:	81 e0       	ldi	r24, 0x01	; 1
    1864:	0e 94 8d 16 	call	0x2d1a	; 0x2d1a <TIMER_DeInit>
		g_tick = INITIAL_VALUE;	/* Clear global tick flag for the next time */
    1868:	10 92 2c 02 	sts	0x022C, r1
		g_lockSystem = OPENED;	/* Open the system again */
    186c:	81 e0       	ldi	r24, 0x01	; 1
    186e:	80 93 2d 02 	sts	0x022D, r24
	}
}
    1872:	cf 91       	pop	r28
    1874:	df 91       	pop	r29
    1876:	08 95       	ret

00001878 <APP_countMotorStopTime>:
 * [in/out]		 	None
 *
 * [Returns]:       None
 ********************************************************************************/
void APP_countMotorStopTime(void)
{
    1878:	df 93       	push	r29
    187a:	cf 93       	push	r28
    187c:	cd b7       	in	r28, 0x3d	; 61
    187e:	de b7       	in	r29, 0x3e	; 62
	++g_tick;	/* Increment global tick flag each time the interrupt fired */
    1880:	80 91 2c 02 	lds	r24, 0x022C
    1884:	8f 5f       	subi	r24, 0xFF	; 255
    1886:	80 93 2c 02 	sts	0x022C, r24

	if(g_tick == MAXIMUM_STOPING_TIME)
    188a:	80 91 2c 02 	lds	r24, 0x022C
    188e:	83 30       	cpi	r24, 0x03	; 3
    1890:	41 f4       	brne	.+16     	; 0x18a2 <APP_countMotorStopTime+0x2a>
	{
		/*
		 * De-initialization for the timer to be able to use it again correctly
		 */
		TIMER_DeInit(TIMER_1);
    1892:	81 e0       	ldi	r24, 0x01	; 1
    1894:	0e 94 8d 16 	call	0x2d1a	; 0x2d1a <TIMER_DeInit>
		g_tick = INITIAL_VALUE;	/* Clear global tick flag for the next time */
    1898:	10 92 2c 02 	sts	0x022C, r1
		g_lockSystem = OPENED;	/* Open the system again */
    189c:	81 e0       	ldi	r24, 0x01	; 1
    189e:	80 93 2d 02 	sts	0x022D, r24
	}
}
    18a2:	cf 91       	pop	r28
    18a4:	df 91       	pop	r29
    18a6:	08 95       	ret

000018a8 <main>:
/*****************************************************************************************
 *                                MAIN FUNCTION                                          *
 *****************************************************************************************/

int main(void)
{
    18a8:	df 93       	push	r29
    18aa:	cf 93       	push	r28
    18ac:	cd b7       	in	r28, 0x3d	; 61
    18ae:	de b7       	in	r29, 0x3e	; 62
    18b0:	a7 97       	sbiw	r28, 0x27	; 39
    18b2:	0f b6       	in	r0, 0x3f	; 63
    18b4:	f8 94       	cli
    18b6:	de bf       	out	0x3e, r29	; 62
    18b8:	0f be       	out	0x3f, r0	; 63
    18ba:	cd bf       	out	0x3d, r28	; 61
	/********************************************************************************
	 *                           SYSTEM INITIALIZATION                              *
	 ********************************************************************************/

	LCD_init(); /* LCD Driver Initialization */
    18bc:	0e 94 e3 0e 	call	0x1dc6	; 0x1dc6 <LCD_init>

	/* UART Driver Configurations */
	UART_ConfigType UART_Config = {BPS_9600,DOUBLE_SPEED,EIGHT_BITS,DISABLED,ONE_BIT};
    18c0:	ce 01       	movw	r24, r28
    18c2:	0f 96       	adiw	r24, 0x0f	; 15
    18c4:	9f 8f       	std	Y+31, r25	; 0x1f
    18c6:	8e 8f       	std	Y+30, r24	; 0x1e
    18c8:	e3 e2       	ldi	r30, 0x23	; 35
    18ca:	f2 e0       	ldi	r31, 0x02	; 2
    18cc:	f9 a3       	std	Y+33, r31	; 0x21
    18ce:	e8 a3       	std	Y+32, r30	; 0x20
    18d0:	f8 e0       	ldi	r31, 0x08	; 8
    18d2:	fa a3       	std	Y+34, r31	; 0x22
    18d4:	e8 a1       	ldd	r30, Y+32	; 0x20
    18d6:	f9 a1       	ldd	r31, Y+33	; 0x21
    18d8:	00 80       	ld	r0, Z
    18da:	88 a1       	ldd	r24, Y+32	; 0x20
    18dc:	99 a1       	ldd	r25, Y+33	; 0x21
    18de:	01 96       	adiw	r24, 0x01	; 1
    18e0:	99 a3       	std	Y+33, r25	; 0x21
    18e2:	88 a3       	std	Y+32, r24	; 0x20
    18e4:	ee 8d       	ldd	r30, Y+30	; 0x1e
    18e6:	ff 8d       	ldd	r31, Y+31	; 0x1f
    18e8:	00 82       	st	Z, r0
    18ea:	8e 8d       	ldd	r24, Y+30	; 0x1e
    18ec:	9f 8d       	ldd	r25, Y+31	; 0x1f
    18ee:	01 96       	adiw	r24, 0x01	; 1
    18f0:	9f 8f       	std	Y+31, r25	; 0x1f
    18f2:	8e 8f       	std	Y+30, r24	; 0x1e
    18f4:	9a a1       	ldd	r25, Y+34	; 0x22
    18f6:	91 50       	subi	r25, 0x01	; 1
    18f8:	9a a3       	std	Y+34, r25	; 0x22
    18fa:	ea a1       	ldd	r30, Y+34	; 0x22
    18fc:	ee 23       	and	r30, r30
    18fe:	51 f7       	brne	.-44     	; 0x18d4 <main+0x2c>

	/* TIMER Driver Configurations */
	TIMER_ConfigType TIMER_Config = {INITIAL_VALUE,COUNT_ONE_SECOND,TIMER_1,COMPARE,T1_F_CPU_1024};
    1900:	ce 01       	movw	r24, r28
    1902:	47 96       	adiw	r24, 0x17	; 23
    1904:	9c a3       	std	Y+36, r25	; 0x24
    1906:	8b a3       	std	Y+35, r24	; 0x23
    1908:	ec e1       	ldi	r30, 0x1C	; 28
    190a:	f2 e0       	ldi	r31, 0x02	; 2
    190c:	fe a3       	std	Y+38, r31	; 0x26
    190e:	ed a3       	std	Y+37, r30	; 0x25
    1910:	f7 e0       	ldi	r31, 0x07	; 7
    1912:	ff a3       	std	Y+39, r31	; 0x27
    1914:	ed a1       	ldd	r30, Y+37	; 0x25
    1916:	fe a1       	ldd	r31, Y+38	; 0x26
    1918:	00 80       	ld	r0, Z
    191a:	8d a1       	ldd	r24, Y+37	; 0x25
    191c:	9e a1       	ldd	r25, Y+38	; 0x26
    191e:	01 96       	adiw	r24, 0x01	; 1
    1920:	9e a3       	std	Y+38, r25	; 0x26
    1922:	8d a3       	std	Y+37, r24	; 0x25
    1924:	eb a1       	ldd	r30, Y+35	; 0x23
    1926:	fc a1       	ldd	r31, Y+36	; 0x24
    1928:	00 82       	st	Z, r0
    192a:	8b a1       	ldd	r24, Y+35	; 0x23
    192c:	9c a1       	ldd	r25, Y+36	; 0x24
    192e:	01 96       	adiw	r24, 0x01	; 1
    1930:	9c a3       	std	Y+36, r25	; 0x24
    1932:	8b a3       	std	Y+35, r24	; 0x23
    1934:	9f a1       	ldd	r25, Y+39	; 0x27
    1936:	91 50       	subi	r25, 0x01	; 1
    1938:	9f a3       	std	Y+39, r25	; 0x27
    193a:	ef a1       	ldd	r30, Y+39	; 0x27
    193c:	ee 23       	and	r30, r30
    193e:	51 f7       	brne	.-44     	; 0x1914 <main+0x6c>

	UART_init(&UART_Config); /* UART Driver Initialization */
    1940:	ce 01       	movw	r24, r28
    1942:	0f 96       	adiw	r24, 0x0f	; 15
    1944:	0e 94 fa 16 	call	0x2df4	; 0x2df4 <UART_init>

	SREG |= (1 << 7);	/* Enable Global Interrupt, I-bit in SREG register */
    1948:	af e5       	ldi	r26, 0x5F	; 95
    194a:	b0 e0       	ldi	r27, 0x00	; 0
    194c:	ef e5       	ldi	r30, 0x5F	; 95
    194e:	f0 e0       	ldi	r31, 0x00	; 0
    1950:	80 81       	ld	r24, Z
    1952:	80 68       	ori	r24, 0x80	; 128
    1954:	8c 93       	st	X, r24

	UART_sendByte(ECU_READY);	/* Check if the Control ECU is ready */
    1956:	80 e1       	ldi	r24, 0x10	; 16
    1958:	0e 94 31 18 	call	0x3062	; 0x3062 <UART_sendByte>

	g_systemStatus = UART_recieveByte();	/* Receive system status from Control ECU */
    195c:	0e 94 48 18 	call	0x3090	; 0x3090 <UART_recieveByte>
    1960:	80 93 3c 02 	sts	0x023C, r24
	 * 		  	    stored in the EEPROM
	 * 		  	5- If two passwords are not identical, repeat these steps again
	 *
	 * 		- If this is not the first time to run the system, skip this condition
	 */
	if (g_systemStatus == FIRST_TIME_TO_LOGIN)
    1964:	80 91 3c 02 	lds	r24, 0x023C
    1968:	81 30       	cpi	r24, 0x01	; 1
    196a:	19 f4       	brne	.+6      	; 0x1972 <main+0xca>
	{
		APP_setNewPassword(FIRST_TIME_TO_LOGIN);
    196c:	81 e0       	ldi	r24, 0x01	; 1
    196e:	0e 94 a3 05 	call	0xb46	; 0xb46 <APP_setNewPassword>
		/*
		 * Call function that responsible for asking user to Enter one of these options:
		 * 	 "+" : TO CHANGE PASSWORD
		 * 	 "-" : TO DOOR OPEN
		 */
		g_choice = APP_getUserDecision();
    1972:	0e 94 2f 09 	call	0x125e	; 0x125e <APP_getUserDecision>
    1976:	80 93 34 02 	sts	0x0234, r24

		while(UART_recieveByte() != ECU_READY){}	/* Wait until Control ECU be ready */
    197a:	0e 94 48 18 	call	0x3090	; 0x3090 <UART_recieveByte>
    197e:	80 31       	cpi	r24, 0x10	; 16
    1980:	e1 f7       	brne	.-8      	; 0x197a <main+0xd2>
		UART_sendByte(g_choice);					/* Send the user choice to the Control ECU */
    1982:	80 91 34 02 	lds	r24, 0x0234
    1986:	0e 94 31 18 	call	0x3062	; 0x3062 <UART_sendByte>

		LCD_clearScreen();	/* Display message to the user to enter the current password */
    198a:	0e 94 9d 13 	call	0x273a	; 0x273a <LCD_clearScreen>
		LCD_displayStringRowColumn(0, 4, "ENTER CURRENT");
    198e:	20 ec       	ldi	r18, 0xC0	; 192
    1990:	31 e0       	ldi	r19, 0x01	; 1
    1992:	80 e0       	ldi	r24, 0x00	; 0
    1994:	64 e0       	ldi	r22, 0x04	; 4
    1996:	a9 01       	movw	r20, r18
    1998:	0e 94 61 13 	call	0x26c2	; 0x26c2 <LCD_displayStringRowColumn>
		LCD_displayStringRowColumn(1, 6, "PASSWORD");
    199c:	2e ec       	ldi	r18, 0xCE	; 206
    199e:	31 e0       	ldi	r19, 0x01	; 1
    19a0:	81 e0       	ldi	r24, 0x01	; 1
    19a2:	66 e0       	ldi	r22, 0x06	; 6
    19a4:	a9 01       	movw	r20, r18
    19a6:	0e 94 61 13 	call	0x26c2	; 0x26c2 <LCD_displayStringRowColumn>
		 *  If the user decision is to change password, make the following steps:
		 *	 - Get the current password from the user
		 *	 - Send the current password to the Control ECU to (check is this user is owner or not)
		 *	 - Receive the comparison result between the current password and the old password
		 */
		if(g_choice == CHANGE_PASSWORD)
    19aa:	80 91 34 02 	lds	r24, 0x0234
    19ae:	8b 32       	cpi	r24, 0x2B	; 43
    19b0:	09 f5       	brne	.+66     	; 0x19f4 <main+0x14c>
		{
			do
			{
				/* Call function that responsible for taking password from the user */
				APP_getPassword(g_password1);
    19b2:	8d e3       	ldi	r24, 0x3D	; 61
    19b4:	92 e0       	ldi	r25, 0x02	; 2
    19b6:	0e 94 16 08 	call	0x102c	; 0x102c <APP_getPassword>

				/* Call function that responsible for sending password to the Control ECU */
				APP_sendPassword(g_password1);
    19ba:	8d e3       	ldi	r24, 0x3D	; 61
    19bc:	92 e0       	ldi	r25, 0x02	; 2
    19be:	0e 94 e2 09 	call	0x13c4	; 0x13c4 <APP_sendPassword>

				UART_sendByte(ECU_READY);	/* Check if the Control ECU is ready */
    19c2:	80 e1       	ldi	r24, 0x10	; 16
    19c4:	0e 94 31 18 	call	0x3062	; 0x3062 <UART_sendByte>
				/* Receive the current password status from the Control ECU */
				g_passwordStatus = UART_recieveByte();
    19c8:	0e 94 48 18 	call	0x3090	; 0x3090 <UART_recieveByte>
    19cc:	80 93 35 02 	sts	0x0235, r24
				 *	 	- Compare between these two passwords
				 *   	- If two passwords are identical, send password to the Control ECU to be
				 *   	  stored in the EEPROM
				 *      - If two passwords are not identical, repeat these steps again
				 */
				if(g_passwordStatus == MATCHED)
    19d0:	80 91 35 02 	lds	r24, 0x0235
    19d4:	88 23       	and	r24, r24
    19d6:	21 f4       	brne	.+8      	; 0x19e0 <main+0x138>
				{
					APP_setNewPassword(ANY_TIME_TO_LOGIN);
    19d8:	80 e0       	ldi	r24, 0x00	; 0
    19da:	0e 94 a3 05 	call	0xb46	; 0xb46 <APP_setNewPassword>
    19de:	0a c0       	rjmp	.+20     	; 0x19f4 <main+0x14c>
				 *		       from the function to get the password again from the user
				 *			2- If it is equal to MAXIMUM NUMBER OF ATTEMPTS, count the alarm time
				 *			   and hold the system for (15 Seconds), then return back to the MAIN
				 *			   LOOP again
				 */
				else if(g_passwordStatus == MISMATCHED)
    19e0:	80 91 35 02 	lds	r24, 0x0235
    19e4:	81 30       	cpi	r24, 0x01	; 1
    19e6:	11 f4       	brne	.+4      	; 0x19ec <main+0x144>
				{
					APP_incorrectPassword();
    19e8:	0e 94 0a 0a 	call	0x1414	; 0x1414 <APP_incorrectPassword>
				}

			}while(MAXIMUM_ATTEMPTS > g_wrongAttempts);
    19ec:	80 91 2e 02 	lds	r24, 0x022E
    19f0:	83 30       	cpi	r24, 0x03	; 3
    19f2:	f8 f2       	brcs	.-66     	; 0x19b2 <main+0x10a>
		 *  If the user decision is to open door, make the following steps:
		 *	 - Get the current password from the user
		 *	 - Send the current password to the Control ECU to (check is this user is owner or not)
		 *	 - Receive the comparison result between the current password and the old password
		 */
		if(g_choice == DOOR_OPEN)
    19f4:	80 91 34 02 	lds	r24, 0x0234
    19f8:	8d 32       	cpi	r24, 0x2D	; 45
    19fa:	09 f0       	breq	.+2      	; 0x19fe <main+0x156>
    19fc:	e3 c0       	rjmp	.+454    	; 0x1bc4 <main+0x31c>
		{
			do
			{
				/* Call function that responsible for taking password from the user */
				APP_getPassword(g_password2);
    19fe:	82 e4       	ldi	r24, 0x42	; 66
    1a00:	92 e0       	ldi	r25, 0x02	; 2
    1a02:	0e 94 16 08 	call	0x102c	; 0x102c <APP_getPassword>

				/* Call function that responsible for sending password to the Control ECU */
				APP_sendPassword(g_password2);
    1a06:	82 e4       	ldi	r24, 0x42	; 66
    1a08:	92 e0       	ldi	r25, 0x02	; 2
    1a0a:	0e 94 e2 09 	call	0x13c4	; 0x13c4 <APP_sendPassword>

				UART_sendByte(ECU_READY);	/* Check if the Control ECU is ready */
    1a0e:	80 e1       	ldi	r24, 0x10	; 16
    1a10:	0e 94 31 18 	call	0x3062	; 0x3062 <UART_sendByte>
				/* Receive the current password status from the Control ECU */
				g_passwordStatus = UART_recieveByte();
    1a14:	0e 94 48 18 	call	0x3090	; 0x3090 <UART_recieveByte>
    1a18:	80 93 35 02 	sts	0x0235, r24
				 *		- Count time of stopping the motor, when the Control ECU hold the door
				 *		  for (3 seconds)
				 *	 	- Count time of rotating the motor Anti ClockWise, when the Control ECU
				 *	 	  close the door for (15 seconds)
				 */
				if(g_passwordStatus == MATCHED)
    1a1c:	80 91 35 02 	lds	r24, 0x0235
    1a20:	88 23       	and	r24, r24
    1a22:	09 f0       	breq	.+2      	; 0x1a26 <main+0x17e>
    1a24:	c4 c0       	rjmp	.+392    	; 0x1bae <main+0x306>

					/*
					 * Call function that call back the function that is responsible
					 * for counting the motor RunTime if the TIMER1 interrupt is fired
					 */
					TIMER_setCallBack(APP_countMotorRunTime, TIMER_1);
    1a26:	84 e2       	ldi	r24, 0x24	; 36
    1a28:	9c e0       	ldi	r25, 0x0C	; 12
    1a2a:	61 e0       	ldi	r22, 0x01	; 1
    1a2c:	0e 94 1d 16 	call	0x2c3a	; 0x2c3a <TIMER_setCallBack>

					/* TIMER Driver Initialization */
					TIMER_init(&TIMER_Config);
    1a30:	ce 01       	movw	r24, r28
    1a32:	47 96       	adiw	r24, 0x17	; 23
    1a34:	0e 94 d9 14 	call	0x29b2	; 0x29b2 <TIMER_init>

					/* Display message to the user, that the door is opening */
					LCD_clearScreen();
    1a38:	0e 94 9d 13 	call	0x273a	; 0x273a <LCD_clearScreen>
					LCD_displayStringRowColumn(1, 2, "DOOR IS OPENING");
    1a3c:	27 ed       	ldi	r18, 0xD7	; 215
    1a3e:	31 e0       	ldi	r19, 0x01	; 1
    1a40:	81 e0       	ldi	r24, 0x01	; 1
    1a42:	62 e0       	ldi	r22, 0x02	; 2
    1a44:	a9 01       	movw	r20, r18
    1a46:	0e 94 61 13 	call	0x26c2	; 0x26c2 <LCD_displayStringRowColumn>

					/* Wait until the system open again */
					while(g_lockSystem != OPENED){}
    1a4a:	80 91 2d 02 	lds	r24, 0x022D
    1a4e:	81 30       	cpi	r24, 0x01	; 1
    1a50:	e1 f7       	brne	.-8      	; 0x1a4a <main+0x1a2>

					/* Reset the lock system status to its initial value (SYSTEM UNLOCKED) */
					g_lockSystem = UNLOCKED;
    1a52:	10 92 2d 02 	sts	0x022D, r1

					/*
					 * Call function that call back the function that is responsible
					 * for counting the motor StopTime if the TIMER1 interrupt is fired
					 */
					TIMER_setCallBack(APP_countMotorStopTime, TIMER_1);
    1a56:	8c e3       	ldi	r24, 0x3C	; 60
    1a58:	9c e0       	ldi	r25, 0x0C	; 12
    1a5a:	61 e0       	ldi	r22, 0x01	; 1
    1a5c:	0e 94 1d 16 	call	0x2c3a	; 0x2c3a <TIMER_setCallBack>

					/* TIMER Driver Initialization */
					TIMER_init(&TIMER_Config);
    1a60:	ce 01       	movw	r24, r28
    1a62:	47 96       	adiw	r24, 0x17	; 23
    1a64:	0e 94 d9 14 	call	0x29b2	; 0x29b2 <TIMER_init>

					/* Display message to the user, that the door open */
					LCD_clearScreen();
    1a68:	0e 94 9d 13 	call	0x273a	; 0x273a <LCD_clearScreen>
					LCD_displayStringRowColumn(1, 5, "DOOR OPEN");
    1a6c:	27 ee       	ldi	r18, 0xE7	; 231
    1a6e:	31 e0       	ldi	r19, 0x01	; 1
    1a70:	81 e0       	ldi	r24, 0x01	; 1
    1a72:	65 e0       	ldi	r22, 0x05	; 5
    1a74:	a9 01       	movw	r20, r18
    1a76:	0e 94 61 13 	call	0x26c2	; 0x26c2 <LCD_displayStringRowColumn>

					/* Wait until the system open again */
					while(g_lockSystem != OPENED){}
    1a7a:	80 91 2d 02 	lds	r24, 0x022D
    1a7e:	81 30       	cpi	r24, 0x01	; 1
    1a80:	e1 f7       	brne	.-8      	; 0x1a7a <main+0x1d2>

					/* Reset the lock system status to its initial value (SYSTEM UNLOCKED) */
					g_lockSystem = UNLOCKED;
    1a82:	10 92 2d 02 	sts	0x022D, r1

					/*
					 * Call function that call back the function that is responsible
					 * for counting the motor RunTime if the TIMER1 interrupt is fired
					 */
					TIMER_setCallBack(APP_countMotorRunTime, TIMER_1);
    1a86:	84 e2       	ldi	r24, 0x24	; 36
    1a88:	9c e0       	ldi	r25, 0x0C	; 12
    1a8a:	61 e0       	ldi	r22, 0x01	; 1
    1a8c:	0e 94 1d 16 	call	0x2c3a	; 0x2c3a <TIMER_setCallBack>

					/* TIMER Driver Initialization */
					TIMER_init(&TIMER_Config);
    1a90:	ce 01       	movw	r24, r28
    1a92:	47 96       	adiw	r24, 0x17	; 23
    1a94:	0e 94 d9 14 	call	0x29b2	; 0x29b2 <TIMER_init>

					/* Display message to the user, that the door is closing */
					LCD_clearScreen();
    1a98:	0e 94 9d 13 	call	0x273a	; 0x273a <LCD_clearScreen>
					LCD_displayStringRowColumn(1, 3, "DOOR IS CLOSING");
    1a9c:	21 ef       	ldi	r18, 0xF1	; 241
    1a9e:	31 e0       	ldi	r19, 0x01	; 1
    1aa0:	81 e0       	ldi	r24, 0x01	; 1
    1aa2:	63 e0       	ldi	r22, 0x03	; 3
    1aa4:	a9 01       	movw	r20, r18
    1aa6:	0e 94 61 13 	call	0x26c2	; 0x26c2 <LCD_displayStringRowColumn>

					/* Wait until the system open again */
					while(g_lockSystem != OPENED){}
    1aaa:	80 91 2d 02 	lds	r24, 0x022D
    1aae:	81 30       	cpi	r24, 0x01	; 1
    1ab0:	e1 f7       	brne	.-8      	; 0x1aaa <main+0x202>

					/* Display message to the user, that the door closed */
					LCD_clearScreen();
    1ab2:	0e 94 9d 13 	call	0x273a	; 0x273a <LCD_clearScreen>
					LCD_displayStringRowColumn(1, 5, "DOOR CLOSED");
    1ab6:	21 e0       	ldi	r18, 0x01	; 1
    1ab8:	32 e0       	ldi	r19, 0x02	; 2
    1aba:	81 e0       	ldi	r24, 0x01	; 1
    1abc:	65 e0       	ldi	r22, 0x05	; 5
    1abe:	a9 01       	movw	r20, r18
    1ac0:	0e 94 61 13 	call	0x26c2	; 0x26c2 <LCD_displayStringRowColumn>
    1ac4:	80 e0       	ldi	r24, 0x00	; 0
    1ac6:	90 e0       	ldi	r25, 0x00	; 0
    1ac8:	aa ef       	ldi	r26, 0xFA	; 250
    1aca:	b3 e4       	ldi	r27, 0x43	; 67
    1acc:	8b 87       	std	Y+11, r24	; 0x0b
    1ace:	9c 87       	std	Y+12, r25	; 0x0c
    1ad0:	ad 87       	std	Y+13, r26	; 0x0d
    1ad2:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1ad4:	6b 85       	ldd	r22, Y+11	; 0x0b
    1ad6:	7c 85       	ldd	r23, Y+12	; 0x0c
    1ad8:	8d 85       	ldd	r24, Y+13	; 0x0d
    1ada:	9e 85       	ldd	r25, Y+14	; 0x0e
    1adc:	20 e0       	ldi	r18, 0x00	; 0
    1ade:	30 e0       	ldi	r19, 0x00	; 0
    1ae0:	4a ef       	ldi	r20, 0xFA	; 250
    1ae2:	54 e4       	ldi	r21, 0x44	; 68
    1ae4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1ae8:	dc 01       	movw	r26, r24
    1aea:	cb 01       	movw	r24, r22
    1aec:	8f 83       	std	Y+7, r24	; 0x07
    1aee:	98 87       	std	Y+8, r25	; 0x08
    1af0:	a9 87       	std	Y+9, r26	; 0x09
    1af2:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1af4:	6f 81       	ldd	r22, Y+7	; 0x07
    1af6:	78 85       	ldd	r23, Y+8	; 0x08
    1af8:	89 85       	ldd	r24, Y+9	; 0x09
    1afa:	9a 85       	ldd	r25, Y+10	; 0x0a
    1afc:	20 e0       	ldi	r18, 0x00	; 0
    1afe:	30 e0       	ldi	r19, 0x00	; 0
    1b00:	40 e8       	ldi	r20, 0x80	; 128
    1b02:	5f e3       	ldi	r21, 0x3F	; 63
    1b04:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1b08:	88 23       	and	r24, r24
    1b0a:	2c f4       	brge	.+10     	; 0x1b16 <main+0x26e>
		__ticks = 1;
    1b0c:	81 e0       	ldi	r24, 0x01	; 1
    1b0e:	90 e0       	ldi	r25, 0x00	; 0
    1b10:	9e 83       	std	Y+6, r25	; 0x06
    1b12:	8d 83       	std	Y+5, r24	; 0x05
    1b14:	3f c0       	rjmp	.+126    	; 0x1b94 <main+0x2ec>
	else if (__tmp > 65535)
    1b16:	6f 81       	ldd	r22, Y+7	; 0x07
    1b18:	78 85       	ldd	r23, Y+8	; 0x08
    1b1a:	89 85       	ldd	r24, Y+9	; 0x09
    1b1c:	9a 85       	ldd	r25, Y+10	; 0x0a
    1b1e:	20 e0       	ldi	r18, 0x00	; 0
    1b20:	3f ef       	ldi	r19, 0xFF	; 255
    1b22:	4f e7       	ldi	r20, 0x7F	; 127
    1b24:	57 e4       	ldi	r21, 0x47	; 71
    1b26:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1b2a:	18 16       	cp	r1, r24
    1b2c:	4c f5       	brge	.+82     	; 0x1b80 <main+0x2d8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1b2e:	6b 85       	ldd	r22, Y+11	; 0x0b
    1b30:	7c 85       	ldd	r23, Y+12	; 0x0c
    1b32:	8d 85       	ldd	r24, Y+13	; 0x0d
    1b34:	9e 85       	ldd	r25, Y+14	; 0x0e
    1b36:	20 e0       	ldi	r18, 0x00	; 0
    1b38:	30 e0       	ldi	r19, 0x00	; 0
    1b3a:	40 e2       	ldi	r20, 0x20	; 32
    1b3c:	51 e4       	ldi	r21, 0x41	; 65
    1b3e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1b42:	dc 01       	movw	r26, r24
    1b44:	cb 01       	movw	r24, r22
    1b46:	bc 01       	movw	r22, r24
    1b48:	cd 01       	movw	r24, r26
    1b4a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1b4e:	dc 01       	movw	r26, r24
    1b50:	cb 01       	movw	r24, r22
    1b52:	9e 83       	std	Y+6, r25	; 0x06
    1b54:	8d 83       	std	Y+5, r24	; 0x05
    1b56:	0f c0       	rjmp	.+30     	; 0x1b76 <main+0x2ce>
    1b58:	88 ec       	ldi	r24, 0xC8	; 200
    1b5a:	90 e0       	ldi	r25, 0x00	; 0
    1b5c:	9c 83       	std	Y+4, r25	; 0x04
    1b5e:	8b 83       	std	Y+3, r24	; 0x03
    1b60:	8b 81       	ldd	r24, Y+3	; 0x03
    1b62:	9c 81       	ldd	r25, Y+4	; 0x04
    1b64:	01 97       	sbiw	r24, 0x01	; 1
    1b66:	f1 f7       	brne	.-4      	; 0x1b64 <main+0x2bc>
    1b68:	9c 83       	std	Y+4, r25	; 0x04
    1b6a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1b6c:	8d 81       	ldd	r24, Y+5	; 0x05
    1b6e:	9e 81       	ldd	r25, Y+6	; 0x06
    1b70:	01 97       	sbiw	r24, 0x01	; 1
    1b72:	9e 83       	std	Y+6, r25	; 0x06
    1b74:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1b76:	8d 81       	ldd	r24, Y+5	; 0x05
    1b78:	9e 81       	ldd	r25, Y+6	; 0x06
    1b7a:	00 97       	sbiw	r24, 0x00	; 0
    1b7c:	69 f7       	brne	.-38     	; 0x1b58 <main+0x2b0>
    1b7e:	14 c0       	rjmp	.+40     	; 0x1ba8 <main+0x300>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1b80:	6f 81       	ldd	r22, Y+7	; 0x07
    1b82:	78 85       	ldd	r23, Y+8	; 0x08
    1b84:	89 85       	ldd	r24, Y+9	; 0x09
    1b86:	9a 85       	ldd	r25, Y+10	; 0x0a
    1b88:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1b8c:	dc 01       	movw	r26, r24
    1b8e:	cb 01       	movw	r24, r22
    1b90:	9e 83       	std	Y+6, r25	; 0x06
    1b92:	8d 83       	std	Y+5, r24	; 0x05
    1b94:	8d 81       	ldd	r24, Y+5	; 0x05
    1b96:	9e 81       	ldd	r25, Y+6	; 0x06
    1b98:	9a 83       	std	Y+2, r25	; 0x02
    1b9a:	89 83       	std	Y+1, r24	; 0x01
    1b9c:	89 81       	ldd	r24, Y+1	; 0x01
    1b9e:	9a 81       	ldd	r25, Y+2	; 0x02
    1ba0:	01 97       	sbiw	r24, 0x01	; 1
    1ba2:	f1 f7       	brne	.-4      	; 0x1ba0 <main+0x2f8>
    1ba4:	9a 83       	std	Y+2, r25	; 0x02
    1ba6:	89 83       	std	Y+1, r24	; 0x01
					_delay_ms(SHORT_DISPLAY_TIME);

					/* Reset the lock system status to its initial value (SYSTEM UNLOCKED) */
					g_lockSystem = UNLOCKED;
    1ba8:	10 92 2d 02 	sts	0x022D, r1
    1bac:	0b c0       	rjmp	.+22     	; 0x1bc4 <main+0x31c>
				 *		       from the function to get the password again from the user
				 *			2- If it is equal to MAXIMUM NUMBER OF ATTEMPTS, count the alarm time
				 *			   and hold the system for (15 Seconds), then return back to the MAIN
				 *			   LOOP again
				 */
				else if(g_passwordStatus == MISMATCHED)
    1bae:	80 91 35 02 	lds	r24, 0x0235
    1bb2:	81 30       	cpi	r24, 0x01	; 1
    1bb4:	11 f4       	brne	.+4      	; 0x1bba <main+0x312>
				{
					APP_incorrectPassword();
    1bb6:	0e 94 0a 0a 	call	0x1414	; 0x1414 <APP_incorrectPassword>
				}	/* END OF INCORRECT PASSWORD */

			}while(MAXIMUM_ATTEMPTS > g_wrongAttempts);
    1bba:	80 91 2e 02 	lds	r24, 0x022E
    1bbe:	83 30       	cpi	r24, 0x03	; 3
    1bc0:	08 f4       	brcc	.+2      	; 0x1bc4 <main+0x31c>
    1bc2:	1d cf       	rjmp	.-454    	; 0x19fe <main+0x156>

		} /* END OF SECOND CHOICE "CHANGE PASSWORD */

		g_wrongAttempts = NO_ATTEMPT; /* Reset number of attempts for next time */
    1bc4:	10 92 2e 02 	sts	0x022E, r1
    1bc8:	d4 ce       	rjmp	.-600    	; 0x1972 <main+0xca>

00001bca <KeyPad_getPressedKey>:
#endif

/*******************************************************************************
 *                      Functions Definitions                                  *
 *******************************************************************************/
uint8 KeyPad_getPressedKey(void){
    1bca:	df 93       	push	r29
    1bcc:	cf 93       	push	r28
    1bce:	00 d0       	rcall	.+0      	; 0x1bd0 <KeyPad_getPressedKey+0x6>
    1bd0:	cd b7       	in	r28, 0x3d	; 61
    1bd2:	de b7       	in	r29, 0x3e	; 62
	uint8 col,row;
	while(1)
	{
		for(col=0;col<N_col;col++) /* Loop for columns */
    1bd4:	1a 82       	std	Y+2, r1	; 0x02
    1bd6:	4c c0       	rjmp	.+152    	; 0x1c70 <KeyPad_getPressedKey+0xa6>
		{
			/* 
			 * Each time only one of the column pins will be output and 
			 * the rest will be input pins include the row pins 
			 */ 
			KEYPAD_PORT_DIR = (0b00010000<<col); 
    1bd8:	ea e3       	ldi	r30, 0x3A	; 58
    1bda:	f0 e0       	ldi	r31, 0x00	; 0
    1bdc:	8a 81       	ldd	r24, Y+2	; 0x02
    1bde:	28 2f       	mov	r18, r24
    1be0:	30 e0       	ldi	r19, 0x00	; 0
    1be2:	80 e1       	ldi	r24, 0x10	; 16
    1be4:	90 e0       	ldi	r25, 0x00	; 0
    1be6:	02 c0       	rjmp	.+4      	; 0x1bec <KeyPad_getPressedKey+0x22>
    1be8:	88 0f       	add	r24, r24
    1bea:	99 1f       	adc	r25, r25
    1bec:	2a 95       	dec	r18
    1bee:	e2 f7       	brpl	.-8      	; 0x1be8 <KeyPad_getPressedKey+0x1e>
    1bf0:	80 83       	st	Z, r24
			
			/* 
			 * Clear the output pin column in this trace and enable the internal 
			 * pull up resistors for the rows pins
			 */ 
			KEYPAD_PORT_OUT = (~(0b00010000<<col)); 
    1bf2:	eb e3       	ldi	r30, 0x3B	; 59
    1bf4:	f0 e0       	ldi	r31, 0x00	; 0
    1bf6:	8a 81       	ldd	r24, Y+2	; 0x02
    1bf8:	28 2f       	mov	r18, r24
    1bfa:	30 e0       	ldi	r19, 0x00	; 0
    1bfc:	80 e1       	ldi	r24, 0x10	; 16
    1bfe:	90 e0       	ldi	r25, 0x00	; 0
    1c00:	02 2e       	mov	r0, r18
    1c02:	02 c0       	rjmp	.+4      	; 0x1c08 <KeyPad_getPressedKey+0x3e>
    1c04:	88 0f       	add	r24, r24
    1c06:	99 1f       	adc	r25, r25
    1c08:	0a 94       	dec	r0
    1c0a:	e2 f7       	brpl	.-8      	; 0x1c04 <KeyPad_getPressedKey+0x3a>
    1c0c:	80 95       	com	r24
    1c0e:	80 83       	st	Z, r24
			for(row=0;row<N_row;row++) /* Loop for rows */
    1c10:	19 82       	std	Y+1, r1	; 0x01
    1c12:	28 c0       	rjmp	.+80     	; 0x1c64 <KeyPad_getPressedKey+0x9a>
			{
				if(BIT_IS_CLEAR(KEYPAD_PORT_IN,row)) /* If the switch is press in this row */ 
    1c14:	e9 e3       	ldi	r30, 0x39	; 57
    1c16:	f0 e0       	ldi	r31, 0x00	; 0
    1c18:	80 81       	ld	r24, Z
    1c1a:	28 2f       	mov	r18, r24
    1c1c:	30 e0       	ldi	r19, 0x00	; 0
    1c1e:	89 81       	ldd	r24, Y+1	; 0x01
    1c20:	88 2f       	mov	r24, r24
    1c22:	90 e0       	ldi	r25, 0x00	; 0
    1c24:	a9 01       	movw	r20, r18
    1c26:	02 c0       	rjmp	.+4      	; 0x1c2c <KeyPad_getPressedKey+0x62>
    1c28:	55 95       	asr	r21
    1c2a:	47 95       	ror	r20
    1c2c:	8a 95       	dec	r24
    1c2e:	e2 f7       	brpl	.-8      	; 0x1c28 <KeyPad_getPressedKey+0x5e>
    1c30:	ca 01       	movw	r24, r20
    1c32:	81 70       	andi	r24, 0x01	; 1
    1c34:	90 70       	andi	r25, 0x00	; 0
    1c36:	00 97       	sbiw	r24, 0x00	; 0
    1c38:	91 f4       	brne	.+36     	; 0x1c5e <KeyPad_getPressedKey+0x94>
				{
					#if (N_col == 3)  
						return KeyPad_4x3_adjustKeyNumber((row*N_col)+col+1); 
					#elif (N_col == 4)
						return KeyPad_4x4_adjustKeyNumber((row*N_col)+col+1);
    1c3a:	89 81       	ldd	r24, Y+1	; 0x01
    1c3c:	88 2f       	mov	r24, r24
    1c3e:	90 e0       	ldi	r25, 0x00	; 0
    1c40:	88 0f       	add	r24, r24
    1c42:	99 1f       	adc	r25, r25
    1c44:	88 0f       	add	r24, r24
    1c46:	99 1f       	adc	r25, r25
    1c48:	98 2f       	mov	r25, r24
    1c4a:	8a 81       	ldd	r24, Y+2	; 0x02
    1c4c:	89 0f       	add	r24, r25
    1c4e:	8f 5f       	subi	r24, 0xFF	; 255
    1c50:	0e 94 3d 0e 	call	0x1c7a	; 0x1c7a <KeyPad_4x4_adjustKeyNumber>
					#endif				
				}
			}
		}
	}	
}
    1c54:	0f 90       	pop	r0
    1c56:	0f 90       	pop	r0
    1c58:	cf 91       	pop	r28
    1c5a:	df 91       	pop	r29
    1c5c:	08 95       	ret
			/* 
			 * Clear the output pin column in this trace and enable the internal 
			 * pull up resistors for the rows pins
			 */ 
			KEYPAD_PORT_OUT = (~(0b00010000<<col)); 
			for(row=0;row<N_row;row++) /* Loop for rows */
    1c5e:	89 81       	ldd	r24, Y+1	; 0x01
    1c60:	8f 5f       	subi	r24, 0xFF	; 255
    1c62:	89 83       	std	Y+1, r24	; 0x01
    1c64:	89 81       	ldd	r24, Y+1	; 0x01
    1c66:	84 30       	cpi	r24, 0x04	; 4
    1c68:	a8 f2       	brcs	.-86     	; 0x1c14 <KeyPad_getPressedKey+0x4a>
 *******************************************************************************/
uint8 KeyPad_getPressedKey(void){
	uint8 col,row;
	while(1)
	{
		for(col=0;col<N_col;col++) /* Loop for columns */
    1c6a:	8a 81       	ldd	r24, Y+2	; 0x02
    1c6c:	8f 5f       	subi	r24, 0xFF	; 255
    1c6e:	8a 83       	std	Y+2, r24	; 0x02
    1c70:	8a 81       	ldd	r24, Y+2	; 0x02
    1c72:	84 30       	cpi	r24, 0x04	; 4
    1c74:	08 f4       	brcc	.+2      	; 0x1c78 <KeyPad_getPressedKey+0xae>
    1c76:	b0 cf       	rjmp	.-160    	; 0x1bd8 <KeyPad_getPressedKey+0xe>
    1c78:	ad cf       	rjmp	.-166    	; 0x1bd4 <KeyPad_getPressedKey+0xa>

00001c7a <KeyPad_4x4_adjustKeyNumber>:
} 

#elif (N_col == 4)
 
static uint8 KeyPad_4x4_adjustKeyNumber(uint8 button_number)
{
    1c7a:	df 93       	push	r29
    1c7c:	cf 93       	push	r28
    1c7e:	00 d0       	rcall	.+0      	; 0x1c80 <KeyPad_4x4_adjustKeyNumber+0x6>
    1c80:	00 d0       	rcall	.+0      	; 0x1c82 <KeyPad_4x4_adjustKeyNumber+0x8>
    1c82:	cd b7       	in	r28, 0x3d	; 61
    1c84:	de b7       	in	r29, 0x3e	; 62
    1c86:	89 83       	std	Y+1, r24	; 0x01
	switch(button_number)
    1c88:	89 81       	ldd	r24, Y+1	; 0x01
    1c8a:	28 2f       	mov	r18, r24
    1c8c:	30 e0       	ldi	r19, 0x00	; 0
    1c8e:	3c 83       	std	Y+4, r19	; 0x04
    1c90:	2b 83       	std	Y+3, r18	; 0x03
    1c92:	8b 81       	ldd	r24, Y+3	; 0x03
    1c94:	9c 81       	ldd	r25, Y+4	; 0x04
    1c96:	88 30       	cpi	r24, 0x08	; 8
    1c98:	91 05       	cpc	r25, r1
    1c9a:	09 f4       	brne	.+2      	; 0x1c9e <KeyPad_4x4_adjustKeyNumber+0x24>
    1c9c:	70 c0       	rjmp	.+224    	; 0x1d7e <KeyPad_4x4_adjustKeyNumber+0x104>
    1c9e:	2b 81       	ldd	r18, Y+3	; 0x03
    1ca0:	3c 81       	ldd	r19, Y+4	; 0x04
    1ca2:	29 30       	cpi	r18, 0x09	; 9
    1ca4:	31 05       	cpc	r19, r1
    1ca6:	5c f5       	brge	.+86     	; 0x1cfe <KeyPad_4x4_adjustKeyNumber+0x84>
    1ca8:	8b 81       	ldd	r24, Y+3	; 0x03
    1caa:	9c 81       	ldd	r25, Y+4	; 0x04
    1cac:	84 30       	cpi	r24, 0x04	; 4
    1cae:	91 05       	cpc	r25, r1
    1cb0:	09 f4       	brne	.+2      	; 0x1cb4 <KeyPad_4x4_adjustKeyNumber+0x3a>
    1cb2:	59 c0       	rjmp	.+178    	; 0x1d66 <KeyPad_4x4_adjustKeyNumber+0xec>
    1cb4:	2b 81       	ldd	r18, Y+3	; 0x03
    1cb6:	3c 81       	ldd	r19, Y+4	; 0x04
    1cb8:	25 30       	cpi	r18, 0x05	; 5
    1cba:	31 05       	cpc	r19, r1
    1cbc:	9c f4       	brge	.+38     	; 0x1ce4 <KeyPad_4x4_adjustKeyNumber+0x6a>
    1cbe:	8b 81       	ldd	r24, Y+3	; 0x03
    1cc0:	9c 81       	ldd	r25, Y+4	; 0x04
    1cc2:	82 30       	cpi	r24, 0x02	; 2
    1cc4:	91 05       	cpc	r25, r1
    1cc6:	09 f4       	brne	.+2      	; 0x1cca <KeyPad_4x4_adjustKeyNumber+0x50>
    1cc8:	48 c0       	rjmp	.+144    	; 0x1d5a <KeyPad_4x4_adjustKeyNumber+0xe0>
    1cca:	2b 81       	ldd	r18, Y+3	; 0x03
    1ccc:	3c 81       	ldd	r19, Y+4	; 0x04
    1cce:	23 30       	cpi	r18, 0x03	; 3
    1cd0:	31 05       	cpc	r19, r1
    1cd2:	0c f0       	brlt	.+2      	; 0x1cd6 <KeyPad_4x4_adjustKeyNumber+0x5c>
    1cd4:	45 c0       	rjmp	.+138    	; 0x1d60 <KeyPad_4x4_adjustKeyNumber+0xe6>
    1cd6:	8b 81       	ldd	r24, Y+3	; 0x03
    1cd8:	9c 81       	ldd	r25, Y+4	; 0x04
    1cda:	81 30       	cpi	r24, 0x01	; 1
    1cdc:	91 05       	cpc	r25, r1
    1cde:	09 f4       	brne	.+2      	; 0x1ce2 <KeyPad_4x4_adjustKeyNumber+0x68>
    1ce0:	39 c0       	rjmp	.+114    	; 0x1d54 <KeyPad_4x4_adjustKeyNumber+0xda>
    1ce2:	67 c0       	rjmp	.+206    	; 0x1db2 <KeyPad_4x4_adjustKeyNumber+0x138>
    1ce4:	2b 81       	ldd	r18, Y+3	; 0x03
    1ce6:	3c 81       	ldd	r19, Y+4	; 0x04
    1ce8:	26 30       	cpi	r18, 0x06	; 6
    1cea:	31 05       	cpc	r19, r1
    1cec:	09 f4       	brne	.+2      	; 0x1cf0 <KeyPad_4x4_adjustKeyNumber+0x76>
    1cee:	41 c0       	rjmp	.+130    	; 0x1d72 <KeyPad_4x4_adjustKeyNumber+0xf8>
    1cf0:	8b 81       	ldd	r24, Y+3	; 0x03
    1cf2:	9c 81       	ldd	r25, Y+4	; 0x04
    1cf4:	87 30       	cpi	r24, 0x07	; 7
    1cf6:	91 05       	cpc	r25, r1
    1cf8:	0c f0       	brlt	.+2      	; 0x1cfc <KeyPad_4x4_adjustKeyNumber+0x82>
    1cfa:	3e c0       	rjmp	.+124    	; 0x1d78 <KeyPad_4x4_adjustKeyNumber+0xfe>
    1cfc:	37 c0       	rjmp	.+110    	; 0x1d6c <KeyPad_4x4_adjustKeyNumber+0xf2>
    1cfe:	2b 81       	ldd	r18, Y+3	; 0x03
    1d00:	3c 81       	ldd	r19, Y+4	; 0x04
    1d02:	2c 30       	cpi	r18, 0x0C	; 12
    1d04:	31 05       	cpc	r19, r1
    1d06:	09 f4       	brne	.+2      	; 0x1d0a <KeyPad_4x4_adjustKeyNumber+0x90>
    1d08:	46 c0       	rjmp	.+140    	; 0x1d96 <KeyPad_4x4_adjustKeyNumber+0x11c>
    1d0a:	8b 81       	ldd	r24, Y+3	; 0x03
    1d0c:	9c 81       	ldd	r25, Y+4	; 0x04
    1d0e:	8d 30       	cpi	r24, 0x0D	; 13
    1d10:	91 05       	cpc	r25, r1
    1d12:	5c f4       	brge	.+22     	; 0x1d2a <KeyPad_4x4_adjustKeyNumber+0xb0>
    1d14:	2b 81       	ldd	r18, Y+3	; 0x03
    1d16:	3c 81       	ldd	r19, Y+4	; 0x04
    1d18:	2a 30       	cpi	r18, 0x0A	; 10
    1d1a:	31 05       	cpc	r19, r1
    1d1c:	b1 f1       	breq	.+108    	; 0x1d8a <KeyPad_4x4_adjustKeyNumber+0x110>
    1d1e:	8b 81       	ldd	r24, Y+3	; 0x03
    1d20:	9c 81       	ldd	r25, Y+4	; 0x04
    1d22:	8b 30       	cpi	r24, 0x0B	; 11
    1d24:	91 05       	cpc	r25, r1
    1d26:	a4 f5       	brge	.+104    	; 0x1d90 <KeyPad_4x4_adjustKeyNumber+0x116>
    1d28:	2d c0       	rjmp	.+90     	; 0x1d84 <KeyPad_4x4_adjustKeyNumber+0x10a>
    1d2a:	2b 81       	ldd	r18, Y+3	; 0x03
    1d2c:	3c 81       	ldd	r19, Y+4	; 0x04
    1d2e:	2e 30       	cpi	r18, 0x0E	; 14
    1d30:	31 05       	cpc	r19, r1
    1d32:	b9 f1       	breq	.+110    	; 0x1da2 <KeyPad_4x4_adjustKeyNumber+0x128>
    1d34:	8b 81       	ldd	r24, Y+3	; 0x03
    1d36:	9c 81       	ldd	r25, Y+4	; 0x04
    1d38:	8e 30       	cpi	r24, 0x0E	; 14
    1d3a:	91 05       	cpc	r25, r1
    1d3c:	7c f1       	brlt	.+94     	; 0x1d9c <KeyPad_4x4_adjustKeyNumber+0x122>
    1d3e:	2b 81       	ldd	r18, Y+3	; 0x03
    1d40:	3c 81       	ldd	r19, Y+4	; 0x04
    1d42:	2f 30       	cpi	r18, 0x0F	; 15
    1d44:	31 05       	cpc	r19, r1
    1d46:	79 f1       	breq	.+94     	; 0x1da6 <KeyPad_4x4_adjustKeyNumber+0x12c>
    1d48:	8b 81       	ldd	r24, Y+3	; 0x03
    1d4a:	9c 81       	ldd	r25, Y+4	; 0x04
    1d4c:	80 31       	cpi	r24, 0x10	; 16
    1d4e:	91 05       	cpc	r25, r1
    1d50:	69 f1       	breq	.+90     	; 0x1dac <KeyPad_4x4_adjustKeyNumber+0x132>
    1d52:	2f c0       	rjmp	.+94     	; 0x1db2 <KeyPad_4x4_adjustKeyNumber+0x138>
	{
		case 1: return 7; 
    1d54:	97 e0       	ldi	r25, 0x07	; 7
    1d56:	9a 83       	std	Y+2, r25	; 0x02
    1d58:	2e c0       	rjmp	.+92     	; 0x1db6 <KeyPad_4x4_adjustKeyNumber+0x13c>
				break;
		case 2: return 8; 
    1d5a:	28 e0       	ldi	r18, 0x08	; 8
    1d5c:	2a 83       	std	Y+2, r18	; 0x02
    1d5e:	2b c0       	rjmp	.+86     	; 0x1db6 <KeyPad_4x4_adjustKeyNumber+0x13c>
				break;
		case 3: return 9; 
    1d60:	39 e0       	ldi	r19, 0x09	; 9
    1d62:	3a 83       	std	Y+2, r19	; 0x02
    1d64:	28 c0       	rjmp	.+80     	; 0x1db6 <KeyPad_4x4_adjustKeyNumber+0x13c>
				break;
		case 4: return '%'; /* ASCII Code of % */
    1d66:	85 e2       	ldi	r24, 0x25	; 37
    1d68:	8a 83       	std	Y+2, r24	; 0x02
    1d6a:	25 c0       	rjmp	.+74     	; 0x1db6 <KeyPad_4x4_adjustKeyNumber+0x13c>
				break;
		case 5: return 4; 
    1d6c:	94 e0       	ldi	r25, 0x04	; 4
    1d6e:	9a 83       	std	Y+2, r25	; 0x02
    1d70:	22 c0       	rjmp	.+68     	; 0x1db6 <KeyPad_4x4_adjustKeyNumber+0x13c>
				break;
		case 6: return 5;
    1d72:	25 e0       	ldi	r18, 0x05	; 5
    1d74:	2a 83       	std	Y+2, r18	; 0x02
    1d76:	1f c0       	rjmp	.+62     	; 0x1db6 <KeyPad_4x4_adjustKeyNumber+0x13c>
				break;
		case 7: return 6; 
    1d78:	36 e0       	ldi	r19, 0x06	; 6
    1d7a:	3a 83       	std	Y+2, r19	; 0x02
    1d7c:	1c c0       	rjmp	.+56     	; 0x1db6 <KeyPad_4x4_adjustKeyNumber+0x13c>
				break;
		case 8: return '*'; /* ASCII Code of '*' */
    1d7e:	8a e2       	ldi	r24, 0x2A	; 42
    1d80:	8a 83       	std	Y+2, r24	; 0x02
    1d82:	19 c0       	rjmp	.+50     	; 0x1db6 <KeyPad_4x4_adjustKeyNumber+0x13c>
				break;		
		case 9: return 1; 
    1d84:	91 e0       	ldi	r25, 0x01	; 1
    1d86:	9a 83       	std	Y+2, r25	; 0x02
    1d88:	16 c0       	rjmp	.+44     	; 0x1db6 <KeyPad_4x4_adjustKeyNumber+0x13c>
				break;
		case 10: return 2; 
    1d8a:	22 e0       	ldi	r18, 0x02	; 2
    1d8c:	2a 83       	std	Y+2, r18	; 0x02
    1d8e:	13 c0       	rjmp	.+38     	; 0x1db6 <KeyPad_4x4_adjustKeyNumber+0x13c>
				break;
		case 11: return 3; 
    1d90:	33 e0       	ldi	r19, 0x03	; 3
    1d92:	3a 83       	std	Y+2, r19	; 0x02
    1d94:	10 c0       	rjmp	.+32     	; 0x1db6 <KeyPad_4x4_adjustKeyNumber+0x13c>
				break;
		case 12: return '-'; /* ASCII Code of '-' */
    1d96:	8d e2       	ldi	r24, 0x2D	; 45
    1d98:	8a 83       	std	Y+2, r24	; 0x02
    1d9a:	0d c0       	rjmp	.+26     	; 0x1db6 <KeyPad_4x4_adjustKeyNumber+0x13c>
				break;
		case 13: return 13;  /* ASCII of Enter */
    1d9c:	9d e0       	ldi	r25, 0x0D	; 13
    1d9e:	9a 83       	std	Y+2, r25	; 0x02
    1da0:	0a c0       	rjmp	.+20     	; 0x1db6 <KeyPad_4x4_adjustKeyNumber+0x13c>
				break;			
		case 14: return 0; 
    1da2:	1a 82       	std	Y+2, r1	; 0x02
    1da4:	08 c0       	rjmp	.+16     	; 0x1db6 <KeyPad_4x4_adjustKeyNumber+0x13c>
				break;
		case 15: return '='; /* ASCII Code of '=' */
    1da6:	2d e3       	ldi	r18, 0x3D	; 61
    1da8:	2a 83       	std	Y+2, r18	; 0x02
    1daa:	05 c0       	rjmp	.+10     	; 0x1db6 <KeyPad_4x4_adjustKeyNumber+0x13c>
				break;
		case 16: return '+'; /* ASCII Code of '+' */
    1dac:	3b e2       	ldi	r19, 0x2B	; 43
    1dae:	3a 83       	std	Y+2, r19	; 0x02
    1db0:	02 c0       	rjmp	.+4      	; 0x1db6 <KeyPad_4x4_adjustKeyNumber+0x13c>
				break;
		default: return button_number;								 						
    1db2:	89 81       	ldd	r24, Y+1	; 0x01
    1db4:	8a 83       	std	Y+2, r24	; 0x02
    1db6:	8a 81       	ldd	r24, Y+2	; 0x02
	}
} 
    1db8:	0f 90       	pop	r0
    1dba:	0f 90       	pop	r0
    1dbc:	0f 90       	pop	r0
    1dbe:	0f 90       	pop	r0
    1dc0:	cf 91       	pop	r28
    1dc2:	df 91       	pop	r29
    1dc4:	08 95       	ret

00001dc6 <LCD_init>:

/*******************************************************************************
 *                      Functions Definitions                                  *
 *******************************************************************************/
void LCD_init(void)
{
    1dc6:	df 93       	push	r29
    1dc8:	cf 93       	push	r28
    1dca:	cd b7       	in	r28, 0x3d	; 61
    1dcc:	de b7       	in	r29, 0x3e	; 62
	LCD_DATA_PORT_DIR = 0xFF; /* Configure the data port as output port */ 
    1dce:	e4 e3       	ldi	r30, 0x34	; 52
    1dd0:	f0 e0       	ldi	r31, 0x00	; 0
    1dd2:	8f ef       	ldi	r24, 0xFF	; 255
    1dd4:	80 83       	st	Z, r24
	LCD_CTRL_PORT_DIR |= (1<<E) | (1<<RS) | (1<<RW); /* Configure the control pins(E,RS,RW) as output pins */
    1dd6:	a7 e3       	ldi	r26, 0x37	; 55
    1dd8:	b0 e0       	ldi	r27, 0x00	; 0
    1dda:	e7 e3       	ldi	r30, 0x37	; 55
    1ddc:	f0 e0       	ldi	r31, 0x00	; 0
    1dde:	80 81       	ld	r24, Z
    1de0:	80 6e       	ori	r24, 0xE0	; 224
    1de2:	8c 93       	st	X, r24
	
	LCD_sendCommand(TWO_LINE_LCD_Eight_BIT_MODE); /* Use 2-line lcd + 8-bit Data Mode + 5*7 dot display Mode */
    1de4:	88 e3       	ldi	r24, 0x38	; 56
    1de6:	0e 94 fe 0e 	call	0x1dfc	; 0x1dfc <LCD_sendCommand>
	
	LCD_sendCommand(CURSOR_OFF); /* Cursor off */
    1dea:	8c e0       	ldi	r24, 0x0C	; 12
    1dec:	0e 94 fe 0e 	call	0x1dfc	; 0x1dfc <LCD_sendCommand>
	
	LCD_sendCommand(CLEAR_COMMAND); /* Clear LCD at the beginning */
    1df0:	81 e0       	ldi	r24, 0x01	; 1
    1df2:	0e 94 fe 0e 	call	0x1dfc	; 0x1dfc <LCD_sendCommand>
}
    1df6:	cf 91       	pop	r28
    1df8:	df 91       	pop	r29
    1dfa:	08 95       	ret

00001dfc <LCD_sendCommand>:

void LCD_sendCommand(uint8 command)
{
    1dfc:	df 93       	push	r29
    1dfe:	cf 93       	push	r28
    1e00:	cd b7       	in	r28, 0x3d	; 61
    1e02:	de b7       	in	r29, 0x3e	; 62
    1e04:	e9 97       	sbiw	r28, 0x39	; 57
    1e06:	0f b6       	in	r0, 0x3f	; 63
    1e08:	f8 94       	cli
    1e0a:	de bf       	out	0x3e, r29	; 62
    1e0c:	0f be       	out	0x3f, r0	; 63
    1e0e:	cd bf       	out	0x3d, r28	; 61
    1e10:	89 af       	std	Y+57, r24	; 0x39
	CLEAR_BIT(LCD_CTRL_PORT,RS); /* Instruction Mode RS = 0 */
    1e12:	a8 e3       	ldi	r26, 0x38	; 56
    1e14:	b0 e0       	ldi	r27, 0x00	; 0
    1e16:	e8 e3       	ldi	r30, 0x38	; 56
    1e18:	f0 e0       	ldi	r31, 0x00	; 0
    1e1a:	80 81       	ld	r24, Z
    1e1c:	8f 7d       	andi	r24, 0xDF	; 223
    1e1e:	8c 93       	st	X, r24
	CLEAR_BIT(LCD_CTRL_PORT,RW); /* Write data to LCD so RW = 0 */
    1e20:	a8 e3       	ldi	r26, 0x38	; 56
    1e22:	b0 e0       	ldi	r27, 0x00	; 0
    1e24:	e8 e3       	ldi	r30, 0x38	; 56
    1e26:	f0 e0       	ldi	r31, 0x00	; 0
    1e28:	80 81       	ld	r24, Z
    1e2a:	8f 7b       	andi	r24, 0xBF	; 191
    1e2c:	8c 93       	st	X, r24
    1e2e:	80 e0       	ldi	r24, 0x00	; 0
    1e30:	90 e0       	ldi	r25, 0x00	; 0
    1e32:	a0 e8       	ldi	r26, 0x80	; 128
    1e34:	bf e3       	ldi	r27, 0x3F	; 63
    1e36:	8d ab       	std	Y+53, r24	; 0x35
    1e38:	9e ab       	std	Y+54, r25	; 0x36
    1e3a:	af ab       	std	Y+55, r26	; 0x37
    1e3c:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1e3e:	6d a9       	ldd	r22, Y+53	; 0x35
    1e40:	7e a9       	ldd	r23, Y+54	; 0x36
    1e42:	8f a9       	ldd	r24, Y+55	; 0x37
    1e44:	98 ad       	ldd	r25, Y+56	; 0x38
    1e46:	20 e0       	ldi	r18, 0x00	; 0
    1e48:	30 e0       	ldi	r19, 0x00	; 0
    1e4a:	4a ef       	ldi	r20, 0xFA	; 250
    1e4c:	54 e4       	ldi	r21, 0x44	; 68
    1e4e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1e52:	dc 01       	movw	r26, r24
    1e54:	cb 01       	movw	r24, r22
    1e56:	89 ab       	std	Y+49, r24	; 0x31
    1e58:	9a ab       	std	Y+50, r25	; 0x32
    1e5a:	ab ab       	std	Y+51, r26	; 0x33
    1e5c:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    1e5e:	69 a9       	ldd	r22, Y+49	; 0x31
    1e60:	7a a9       	ldd	r23, Y+50	; 0x32
    1e62:	8b a9       	ldd	r24, Y+51	; 0x33
    1e64:	9c a9       	ldd	r25, Y+52	; 0x34
    1e66:	20 e0       	ldi	r18, 0x00	; 0
    1e68:	30 e0       	ldi	r19, 0x00	; 0
    1e6a:	40 e8       	ldi	r20, 0x80	; 128
    1e6c:	5f e3       	ldi	r21, 0x3F	; 63
    1e6e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1e72:	88 23       	and	r24, r24
    1e74:	2c f4       	brge	.+10     	; 0x1e80 <LCD_sendCommand+0x84>
		__ticks = 1;
    1e76:	81 e0       	ldi	r24, 0x01	; 1
    1e78:	90 e0       	ldi	r25, 0x00	; 0
    1e7a:	98 ab       	std	Y+48, r25	; 0x30
    1e7c:	8f a7       	std	Y+47, r24	; 0x2f
    1e7e:	3f c0       	rjmp	.+126    	; 0x1efe <LCD_sendCommand+0x102>
	else if (__tmp > 65535)
    1e80:	69 a9       	ldd	r22, Y+49	; 0x31
    1e82:	7a a9       	ldd	r23, Y+50	; 0x32
    1e84:	8b a9       	ldd	r24, Y+51	; 0x33
    1e86:	9c a9       	ldd	r25, Y+52	; 0x34
    1e88:	20 e0       	ldi	r18, 0x00	; 0
    1e8a:	3f ef       	ldi	r19, 0xFF	; 255
    1e8c:	4f e7       	ldi	r20, 0x7F	; 127
    1e8e:	57 e4       	ldi	r21, 0x47	; 71
    1e90:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1e94:	18 16       	cp	r1, r24
    1e96:	4c f5       	brge	.+82     	; 0x1eea <LCD_sendCommand+0xee>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1e98:	6d a9       	ldd	r22, Y+53	; 0x35
    1e9a:	7e a9       	ldd	r23, Y+54	; 0x36
    1e9c:	8f a9       	ldd	r24, Y+55	; 0x37
    1e9e:	98 ad       	ldd	r25, Y+56	; 0x38
    1ea0:	20 e0       	ldi	r18, 0x00	; 0
    1ea2:	30 e0       	ldi	r19, 0x00	; 0
    1ea4:	40 e2       	ldi	r20, 0x20	; 32
    1ea6:	51 e4       	ldi	r21, 0x41	; 65
    1ea8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1eac:	dc 01       	movw	r26, r24
    1eae:	cb 01       	movw	r24, r22
    1eb0:	bc 01       	movw	r22, r24
    1eb2:	cd 01       	movw	r24, r26
    1eb4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1eb8:	dc 01       	movw	r26, r24
    1eba:	cb 01       	movw	r24, r22
    1ebc:	98 ab       	std	Y+48, r25	; 0x30
    1ebe:	8f a7       	std	Y+47, r24	; 0x2f
    1ec0:	0f c0       	rjmp	.+30     	; 0x1ee0 <LCD_sendCommand+0xe4>
    1ec2:	88 ec       	ldi	r24, 0xC8	; 200
    1ec4:	90 e0       	ldi	r25, 0x00	; 0
    1ec6:	9e a7       	std	Y+46, r25	; 0x2e
    1ec8:	8d a7       	std	Y+45, r24	; 0x2d
    1eca:	8d a5       	ldd	r24, Y+45	; 0x2d
    1ecc:	9e a5       	ldd	r25, Y+46	; 0x2e
    1ece:	01 97       	sbiw	r24, 0x01	; 1
    1ed0:	f1 f7       	brne	.-4      	; 0x1ece <LCD_sendCommand+0xd2>
    1ed2:	9e a7       	std	Y+46, r25	; 0x2e
    1ed4:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1ed6:	8f a5       	ldd	r24, Y+47	; 0x2f
    1ed8:	98 a9       	ldd	r25, Y+48	; 0x30
    1eda:	01 97       	sbiw	r24, 0x01	; 1
    1edc:	98 ab       	std	Y+48, r25	; 0x30
    1ede:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1ee0:	8f a5       	ldd	r24, Y+47	; 0x2f
    1ee2:	98 a9       	ldd	r25, Y+48	; 0x30
    1ee4:	00 97       	sbiw	r24, 0x00	; 0
    1ee6:	69 f7       	brne	.-38     	; 0x1ec2 <LCD_sendCommand+0xc6>
    1ee8:	14 c0       	rjmp	.+40     	; 0x1f12 <LCD_sendCommand+0x116>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1eea:	69 a9       	ldd	r22, Y+49	; 0x31
    1eec:	7a a9       	ldd	r23, Y+50	; 0x32
    1eee:	8b a9       	ldd	r24, Y+51	; 0x33
    1ef0:	9c a9       	ldd	r25, Y+52	; 0x34
    1ef2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1ef6:	dc 01       	movw	r26, r24
    1ef8:	cb 01       	movw	r24, r22
    1efa:	98 ab       	std	Y+48, r25	; 0x30
    1efc:	8f a7       	std	Y+47, r24	; 0x2f
    1efe:	8f a5       	ldd	r24, Y+47	; 0x2f
    1f00:	98 a9       	ldd	r25, Y+48	; 0x30
    1f02:	9c a7       	std	Y+44, r25	; 0x2c
    1f04:	8b a7       	std	Y+43, r24	; 0x2b
    1f06:	8b a5       	ldd	r24, Y+43	; 0x2b
    1f08:	9c a5       	ldd	r25, Y+44	; 0x2c
    1f0a:	01 97       	sbiw	r24, 0x01	; 1
    1f0c:	f1 f7       	brne	.-4      	; 0x1f0a <LCD_sendCommand+0x10e>
    1f0e:	9c a7       	std	Y+44, r25	; 0x2c
    1f10:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1); /* Delay for processing Tas = 50ns */
	SET_BIT(LCD_CTRL_PORT,E); /* Enable LCD E = 1 */
    1f12:	a8 e3       	ldi	r26, 0x38	; 56
    1f14:	b0 e0       	ldi	r27, 0x00	; 0
    1f16:	e8 e3       	ldi	r30, 0x38	; 56
    1f18:	f0 e0       	ldi	r31, 0x00	; 0
    1f1a:	80 81       	ld	r24, Z
    1f1c:	80 68       	ori	r24, 0x80	; 128
    1f1e:	8c 93       	st	X, r24
    1f20:	80 e0       	ldi	r24, 0x00	; 0
    1f22:	90 e0       	ldi	r25, 0x00	; 0
    1f24:	a0 e8       	ldi	r26, 0x80	; 128
    1f26:	bf e3       	ldi	r27, 0x3F	; 63
    1f28:	8f a3       	std	Y+39, r24	; 0x27
    1f2a:	98 a7       	std	Y+40, r25	; 0x28
    1f2c:	a9 a7       	std	Y+41, r26	; 0x29
    1f2e:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1f30:	6f a1       	ldd	r22, Y+39	; 0x27
    1f32:	78 a5       	ldd	r23, Y+40	; 0x28
    1f34:	89 a5       	ldd	r24, Y+41	; 0x29
    1f36:	9a a5       	ldd	r25, Y+42	; 0x2a
    1f38:	20 e0       	ldi	r18, 0x00	; 0
    1f3a:	30 e0       	ldi	r19, 0x00	; 0
    1f3c:	4a ef       	ldi	r20, 0xFA	; 250
    1f3e:	54 e4       	ldi	r21, 0x44	; 68
    1f40:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f44:	dc 01       	movw	r26, r24
    1f46:	cb 01       	movw	r24, r22
    1f48:	8b a3       	std	Y+35, r24	; 0x23
    1f4a:	9c a3       	std	Y+36, r25	; 0x24
    1f4c:	ad a3       	std	Y+37, r26	; 0x25
    1f4e:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1f50:	6b a1       	ldd	r22, Y+35	; 0x23
    1f52:	7c a1       	ldd	r23, Y+36	; 0x24
    1f54:	8d a1       	ldd	r24, Y+37	; 0x25
    1f56:	9e a1       	ldd	r25, Y+38	; 0x26
    1f58:	20 e0       	ldi	r18, 0x00	; 0
    1f5a:	30 e0       	ldi	r19, 0x00	; 0
    1f5c:	40 e8       	ldi	r20, 0x80	; 128
    1f5e:	5f e3       	ldi	r21, 0x3F	; 63
    1f60:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1f64:	88 23       	and	r24, r24
    1f66:	2c f4       	brge	.+10     	; 0x1f72 <LCD_sendCommand+0x176>
		__ticks = 1;
    1f68:	81 e0       	ldi	r24, 0x01	; 1
    1f6a:	90 e0       	ldi	r25, 0x00	; 0
    1f6c:	9a a3       	std	Y+34, r25	; 0x22
    1f6e:	89 a3       	std	Y+33, r24	; 0x21
    1f70:	3f c0       	rjmp	.+126    	; 0x1ff0 <LCD_sendCommand+0x1f4>
	else if (__tmp > 65535)
    1f72:	6b a1       	ldd	r22, Y+35	; 0x23
    1f74:	7c a1       	ldd	r23, Y+36	; 0x24
    1f76:	8d a1       	ldd	r24, Y+37	; 0x25
    1f78:	9e a1       	ldd	r25, Y+38	; 0x26
    1f7a:	20 e0       	ldi	r18, 0x00	; 0
    1f7c:	3f ef       	ldi	r19, 0xFF	; 255
    1f7e:	4f e7       	ldi	r20, 0x7F	; 127
    1f80:	57 e4       	ldi	r21, 0x47	; 71
    1f82:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1f86:	18 16       	cp	r1, r24
    1f88:	4c f5       	brge	.+82     	; 0x1fdc <LCD_sendCommand+0x1e0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1f8a:	6f a1       	ldd	r22, Y+39	; 0x27
    1f8c:	78 a5       	ldd	r23, Y+40	; 0x28
    1f8e:	89 a5       	ldd	r24, Y+41	; 0x29
    1f90:	9a a5       	ldd	r25, Y+42	; 0x2a
    1f92:	20 e0       	ldi	r18, 0x00	; 0
    1f94:	30 e0       	ldi	r19, 0x00	; 0
    1f96:	40 e2       	ldi	r20, 0x20	; 32
    1f98:	51 e4       	ldi	r21, 0x41	; 65
    1f9a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f9e:	dc 01       	movw	r26, r24
    1fa0:	cb 01       	movw	r24, r22
    1fa2:	bc 01       	movw	r22, r24
    1fa4:	cd 01       	movw	r24, r26
    1fa6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1faa:	dc 01       	movw	r26, r24
    1fac:	cb 01       	movw	r24, r22
    1fae:	9a a3       	std	Y+34, r25	; 0x22
    1fb0:	89 a3       	std	Y+33, r24	; 0x21
    1fb2:	0f c0       	rjmp	.+30     	; 0x1fd2 <LCD_sendCommand+0x1d6>
    1fb4:	88 ec       	ldi	r24, 0xC8	; 200
    1fb6:	90 e0       	ldi	r25, 0x00	; 0
    1fb8:	98 a3       	std	Y+32, r25	; 0x20
    1fba:	8f 8f       	std	Y+31, r24	; 0x1f
    1fbc:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1fbe:	98 a1       	ldd	r25, Y+32	; 0x20
    1fc0:	01 97       	sbiw	r24, 0x01	; 1
    1fc2:	f1 f7       	brne	.-4      	; 0x1fc0 <LCD_sendCommand+0x1c4>
    1fc4:	98 a3       	std	Y+32, r25	; 0x20
    1fc6:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1fc8:	89 a1       	ldd	r24, Y+33	; 0x21
    1fca:	9a a1       	ldd	r25, Y+34	; 0x22
    1fcc:	01 97       	sbiw	r24, 0x01	; 1
    1fce:	9a a3       	std	Y+34, r25	; 0x22
    1fd0:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1fd2:	89 a1       	ldd	r24, Y+33	; 0x21
    1fd4:	9a a1       	ldd	r25, Y+34	; 0x22
    1fd6:	00 97       	sbiw	r24, 0x00	; 0
    1fd8:	69 f7       	brne	.-38     	; 0x1fb4 <LCD_sendCommand+0x1b8>
    1fda:	14 c0       	rjmp	.+40     	; 0x2004 <LCD_sendCommand+0x208>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1fdc:	6b a1       	ldd	r22, Y+35	; 0x23
    1fde:	7c a1       	ldd	r23, Y+36	; 0x24
    1fe0:	8d a1       	ldd	r24, Y+37	; 0x25
    1fe2:	9e a1       	ldd	r25, Y+38	; 0x26
    1fe4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1fe8:	dc 01       	movw	r26, r24
    1fea:	cb 01       	movw	r24, r22
    1fec:	9a a3       	std	Y+34, r25	; 0x22
    1fee:	89 a3       	std	Y+33, r24	; 0x21
    1ff0:	89 a1       	ldd	r24, Y+33	; 0x21
    1ff2:	9a a1       	ldd	r25, Y+34	; 0x22
    1ff4:	9e 8f       	std	Y+30, r25	; 0x1e
    1ff6:	8d 8f       	std	Y+29, r24	; 0x1d
    1ff8:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1ffa:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1ffc:	01 97       	sbiw	r24, 0x01	; 1
    1ffe:	f1 f7       	brne	.-4      	; 0x1ffc <LCD_sendCommand+0x200>
    2000:	9e 8f       	std	Y+30, r25	; 0x1e
    2002:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1); /* Delay for processing Tpw - Tdws = 190ns */
	LCD_DATA_PORT = command; /* Out the required command to the data bus D0 --> D7 */
    2004:	e5 e3       	ldi	r30, 0x35	; 53
    2006:	f0 e0       	ldi	r31, 0x00	; 0
    2008:	89 ad       	ldd	r24, Y+57	; 0x39
    200a:	80 83       	st	Z, r24
    200c:	80 e0       	ldi	r24, 0x00	; 0
    200e:	90 e0       	ldi	r25, 0x00	; 0
    2010:	a0 e8       	ldi	r26, 0x80	; 128
    2012:	bf e3       	ldi	r27, 0x3F	; 63
    2014:	89 8f       	std	Y+25, r24	; 0x19
    2016:	9a 8f       	std	Y+26, r25	; 0x1a
    2018:	ab 8f       	std	Y+27, r26	; 0x1b
    201a:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    201c:	69 8d       	ldd	r22, Y+25	; 0x19
    201e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2020:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2022:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2024:	20 e0       	ldi	r18, 0x00	; 0
    2026:	30 e0       	ldi	r19, 0x00	; 0
    2028:	4a ef       	ldi	r20, 0xFA	; 250
    202a:	54 e4       	ldi	r21, 0x44	; 68
    202c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2030:	dc 01       	movw	r26, r24
    2032:	cb 01       	movw	r24, r22
    2034:	8d 8b       	std	Y+21, r24	; 0x15
    2036:	9e 8b       	std	Y+22, r25	; 0x16
    2038:	af 8b       	std	Y+23, r26	; 0x17
    203a:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    203c:	6d 89       	ldd	r22, Y+21	; 0x15
    203e:	7e 89       	ldd	r23, Y+22	; 0x16
    2040:	8f 89       	ldd	r24, Y+23	; 0x17
    2042:	98 8d       	ldd	r25, Y+24	; 0x18
    2044:	20 e0       	ldi	r18, 0x00	; 0
    2046:	30 e0       	ldi	r19, 0x00	; 0
    2048:	40 e8       	ldi	r20, 0x80	; 128
    204a:	5f e3       	ldi	r21, 0x3F	; 63
    204c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2050:	88 23       	and	r24, r24
    2052:	2c f4       	brge	.+10     	; 0x205e <LCD_sendCommand+0x262>
		__ticks = 1;
    2054:	81 e0       	ldi	r24, 0x01	; 1
    2056:	90 e0       	ldi	r25, 0x00	; 0
    2058:	9c 8b       	std	Y+20, r25	; 0x14
    205a:	8b 8b       	std	Y+19, r24	; 0x13
    205c:	3f c0       	rjmp	.+126    	; 0x20dc <LCD_sendCommand+0x2e0>
	else if (__tmp > 65535)
    205e:	6d 89       	ldd	r22, Y+21	; 0x15
    2060:	7e 89       	ldd	r23, Y+22	; 0x16
    2062:	8f 89       	ldd	r24, Y+23	; 0x17
    2064:	98 8d       	ldd	r25, Y+24	; 0x18
    2066:	20 e0       	ldi	r18, 0x00	; 0
    2068:	3f ef       	ldi	r19, 0xFF	; 255
    206a:	4f e7       	ldi	r20, 0x7F	; 127
    206c:	57 e4       	ldi	r21, 0x47	; 71
    206e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2072:	18 16       	cp	r1, r24
    2074:	4c f5       	brge	.+82     	; 0x20c8 <LCD_sendCommand+0x2cc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2076:	69 8d       	ldd	r22, Y+25	; 0x19
    2078:	7a 8d       	ldd	r23, Y+26	; 0x1a
    207a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    207c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    207e:	20 e0       	ldi	r18, 0x00	; 0
    2080:	30 e0       	ldi	r19, 0x00	; 0
    2082:	40 e2       	ldi	r20, 0x20	; 32
    2084:	51 e4       	ldi	r21, 0x41	; 65
    2086:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    208a:	dc 01       	movw	r26, r24
    208c:	cb 01       	movw	r24, r22
    208e:	bc 01       	movw	r22, r24
    2090:	cd 01       	movw	r24, r26
    2092:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2096:	dc 01       	movw	r26, r24
    2098:	cb 01       	movw	r24, r22
    209a:	9c 8b       	std	Y+20, r25	; 0x14
    209c:	8b 8b       	std	Y+19, r24	; 0x13
    209e:	0f c0       	rjmp	.+30     	; 0x20be <LCD_sendCommand+0x2c2>
    20a0:	88 ec       	ldi	r24, 0xC8	; 200
    20a2:	90 e0       	ldi	r25, 0x00	; 0
    20a4:	9a 8b       	std	Y+18, r25	; 0x12
    20a6:	89 8b       	std	Y+17, r24	; 0x11
    20a8:	89 89       	ldd	r24, Y+17	; 0x11
    20aa:	9a 89       	ldd	r25, Y+18	; 0x12
    20ac:	01 97       	sbiw	r24, 0x01	; 1
    20ae:	f1 f7       	brne	.-4      	; 0x20ac <LCD_sendCommand+0x2b0>
    20b0:	9a 8b       	std	Y+18, r25	; 0x12
    20b2:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    20b4:	8b 89       	ldd	r24, Y+19	; 0x13
    20b6:	9c 89       	ldd	r25, Y+20	; 0x14
    20b8:	01 97       	sbiw	r24, 0x01	; 1
    20ba:	9c 8b       	std	Y+20, r25	; 0x14
    20bc:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    20be:	8b 89       	ldd	r24, Y+19	; 0x13
    20c0:	9c 89       	ldd	r25, Y+20	; 0x14
    20c2:	00 97       	sbiw	r24, 0x00	; 0
    20c4:	69 f7       	brne	.-38     	; 0x20a0 <LCD_sendCommand+0x2a4>
    20c6:	14 c0       	rjmp	.+40     	; 0x20f0 <LCD_sendCommand+0x2f4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    20c8:	6d 89       	ldd	r22, Y+21	; 0x15
    20ca:	7e 89       	ldd	r23, Y+22	; 0x16
    20cc:	8f 89       	ldd	r24, Y+23	; 0x17
    20ce:	98 8d       	ldd	r25, Y+24	; 0x18
    20d0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    20d4:	dc 01       	movw	r26, r24
    20d6:	cb 01       	movw	r24, r22
    20d8:	9c 8b       	std	Y+20, r25	; 0x14
    20da:	8b 8b       	std	Y+19, r24	; 0x13
    20dc:	8b 89       	ldd	r24, Y+19	; 0x13
    20de:	9c 89       	ldd	r25, Y+20	; 0x14
    20e0:	98 8b       	std	Y+16, r25	; 0x10
    20e2:	8f 87       	std	Y+15, r24	; 0x0f
    20e4:	8f 85       	ldd	r24, Y+15	; 0x0f
    20e6:	98 89       	ldd	r25, Y+16	; 0x10
    20e8:	01 97       	sbiw	r24, 0x01	; 1
    20ea:	f1 f7       	brne	.-4      	; 0x20e8 <LCD_sendCommand+0x2ec>
    20ec:	98 8b       	std	Y+16, r25	; 0x10
    20ee:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1); /* Delay for processing Tdsw = 100ns */
	CLEAR_BIT(LCD_CTRL_PORT,E); /* Disable LCD E = 0 */
    20f0:	a8 e3       	ldi	r26, 0x38	; 56
    20f2:	b0 e0       	ldi	r27, 0x00	; 0
    20f4:	e8 e3       	ldi	r30, 0x38	; 56
    20f6:	f0 e0       	ldi	r31, 0x00	; 0
    20f8:	80 81       	ld	r24, Z
    20fa:	8f 77       	andi	r24, 0x7F	; 127
    20fc:	8c 93       	st	X, r24
    20fe:	80 e0       	ldi	r24, 0x00	; 0
    2100:	90 e0       	ldi	r25, 0x00	; 0
    2102:	a0 e8       	ldi	r26, 0x80	; 128
    2104:	bf e3       	ldi	r27, 0x3F	; 63
    2106:	8b 87       	std	Y+11, r24	; 0x0b
    2108:	9c 87       	std	Y+12, r25	; 0x0c
    210a:	ad 87       	std	Y+13, r26	; 0x0d
    210c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    210e:	6b 85       	ldd	r22, Y+11	; 0x0b
    2110:	7c 85       	ldd	r23, Y+12	; 0x0c
    2112:	8d 85       	ldd	r24, Y+13	; 0x0d
    2114:	9e 85       	ldd	r25, Y+14	; 0x0e
    2116:	20 e0       	ldi	r18, 0x00	; 0
    2118:	30 e0       	ldi	r19, 0x00	; 0
    211a:	4a ef       	ldi	r20, 0xFA	; 250
    211c:	54 e4       	ldi	r21, 0x44	; 68
    211e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2122:	dc 01       	movw	r26, r24
    2124:	cb 01       	movw	r24, r22
    2126:	8f 83       	std	Y+7, r24	; 0x07
    2128:	98 87       	std	Y+8, r25	; 0x08
    212a:	a9 87       	std	Y+9, r26	; 0x09
    212c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    212e:	6f 81       	ldd	r22, Y+7	; 0x07
    2130:	78 85       	ldd	r23, Y+8	; 0x08
    2132:	89 85       	ldd	r24, Y+9	; 0x09
    2134:	9a 85       	ldd	r25, Y+10	; 0x0a
    2136:	20 e0       	ldi	r18, 0x00	; 0
    2138:	30 e0       	ldi	r19, 0x00	; 0
    213a:	40 e8       	ldi	r20, 0x80	; 128
    213c:	5f e3       	ldi	r21, 0x3F	; 63
    213e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2142:	88 23       	and	r24, r24
    2144:	2c f4       	brge	.+10     	; 0x2150 <LCD_sendCommand+0x354>
		__ticks = 1;
    2146:	81 e0       	ldi	r24, 0x01	; 1
    2148:	90 e0       	ldi	r25, 0x00	; 0
    214a:	9e 83       	std	Y+6, r25	; 0x06
    214c:	8d 83       	std	Y+5, r24	; 0x05
    214e:	3f c0       	rjmp	.+126    	; 0x21ce <LCD_sendCommand+0x3d2>
	else if (__tmp > 65535)
    2150:	6f 81       	ldd	r22, Y+7	; 0x07
    2152:	78 85       	ldd	r23, Y+8	; 0x08
    2154:	89 85       	ldd	r24, Y+9	; 0x09
    2156:	9a 85       	ldd	r25, Y+10	; 0x0a
    2158:	20 e0       	ldi	r18, 0x00	; 0
    215a:	3f ef       	ldi	r19, 0xFF	; 255
    215c:	4f e7       	ldi	r20, 0x7F	; 127
    215e:	57 e4       	ldi	r21, 0x47	; 71
    2160:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2164:	18 16       	cp	r1, r24
    2166:	4c f5       	brge	.+82     	; 0x21ba <LCD_sendCommand+0x3be>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2168:	6b 85       	ldd	r22, Y+11	; 0x0b
    216a:	7c 85       	ldd	r23, Y+12	; 0x0c
    216c:	8d 85       	ldd	r24, Y+13	; 0x0d
    216e:	9e 85       	ldd	r25, Y+14	; 0x0e
    2170:	20 e0       	ldi	r18, 0x00	; 0
    2172:	30 e0       	ldi	r19, 0x00	; 0
    2174:	40 e2       	ldi	r20, 0x20	; 32
    2176:	51 e4       	ldi	r21, 0x41	; 65
    2178:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    217c:	dc 01       	movw	r26, r24
    217e:	cb 01       	movw	r24, r22
    2180:	bc 01       	movw	r22, r24
    2182:	cd 01       	movw	r24, r26
    2184:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2188:	dc 01       	movw	r26, r24
    218a:	cb 01       	movw	r24, r22
    218c:	9e 83       	std	Y+6, r25	; 0x06
    218e:	8d 83       	std	Y+5, r24	; 0x05
    2190:	0f c0       	rjmp	.+30     	; 0x21b0 <LCD_sendCommand+0x3b4>
    2192:	88 ec       	ldi	r24, 0xC8	; 200
    2194:	90 e0       	ldi	r25, 0x00	; 0
    2196:	9c 83       	std	Y+4, r25	; 0x04
    2198:	8b 83       	std	Y+3, r24	; 0x03
    219a:	8b 81       	ldd	r24, Y+3	; 0x03
    219c:	9c 81       	ldd	r25, Y+4	; 0x04
    219e:	01 97       	sbiw	r24, 0x01	; 1
    21a0:	f1 f7       	brne	.-4      	; 0x219e <LCD_sendCommand+0x3a2>
    21a2:	9c 83       	std	Y+4, r25	; 0x04
    21a4:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    21a6:	8d 81       	ldd	r24, Y+5	; 0x05
    21a8:	9e 81       	ldd	r25, Y+6	; 0x06
    21aa:	01 97       	sbiw	r24, 0x01	; 1
    21ac:	9e 83       	std	Y+6, r25	; 0x06
    21ae:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    21b0:	8d 81       	ldd	r24, Y+5	; 0x05
    21b2:	9e 81       	ldd	r25, Y+6	; 0x06
    21b4:	00 97       	sbiw	r24, 0x00	; 0
    21b6:	69 f7       	brne	.-38     	; 0x2192 <LCD_sendCommand+0x396>
    21b8:	14 c0       	rjmp	.+40     	; 0x21e2 <LCD_sendCommand+0x3e6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    21ba:	6f 81       	ldd	r22, Y+7	; 0x07
    21bc:	78 85       	ldd	r23, Y+8	; 0x08
    21be:	89 85       	ldd	r24, Y+9	; 0x09
    21c0:	9a 85       	ldd	r25, Y+10	; 0x0a
    21c2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    21c6:	dc 01       	movw	r26, r24
    21c8:	cb 01       	movw	r24, r22
    21ca:	9e 83       	std	Y+6, r25	; 0x06
    21cc:	8d 83       	std	Y+5, r24	; 0x05
    21ce:	8d 81       	ldd	r24, Y+5	; 0x05
    21d0:	9e 81       	ldd	r25, Y+6	; 0x06
    21d2:	9a 83       	std	Y+2, r25	; 0x02
    21d4:	89 83       	std	Y+1, r24	; 0x01
    21d6:	89 81       	ldd	r24, Y+1	; 0x01
    21d8:	9a 81       	ldd	r25, Y+2	; 0x02
    21da:	01 97       	sbiw	r24, 0x01	; 1
    21dc:	f1 f7       	brne	.-4      	; 0x21da <LCD_sendCommand+0x3de>
    21de:	9a 83       	std	Y+2, r25	; 0x02
    21e0:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1); /* Delay for processing Th = 13ns */
}
    21e2:	e9 96       	adiw	r28, 0x39	; 57
    21e4:	0f b6       	in	r0, 0x3f	; 63
    21e6:	f8 94       	cli
    21e8:	de bf       	out	0x3e, r29	; 62
    21ea:	0f be       	out	0x3f, r0	; 63
    21ec:	cd bf       	out	0x3d, r28	; 61
    21ee:	cf 91       	pop	r28
    21f0:	df 91       	pop	r29
    21f2:	08 95       	ret

000021f4 <LCD_displayCharacter>:

void LCD_displayCharacter(uint8 data)
{
    21f4:	df 93       	push	r29
    21f6:	cf 93       	push	r28
    21f8:	cd b7       	in	r28, 0x3d	; 61
    21fa:	de b7       	in	r29, 0x3e	; 62
    21fc:	e9 97       	sbiw	r28, 0x39	; 57
    21fe:	0f b6       	in	r0, 0x3f	; 63
    2200:	f8 94       	cli
    2202:	de bf       	out	0x3e, r29	; 62
    2204:	0f be       	out	0x3f, r0	; 63
    2206:	cd bf       	out	0x3d, r28	; 61
    2208:	89 af       	std	Y+57, r24	; 0x39
	SET_BIT(LCD_CTRL_PORT,RS); /* Data Mode RS = 1 */
    220a:	a8 e3       	ldi	r26, 0x38	; 56
    220c:	b0 e0       	ldi	r27, 0x00	; 0
    220e:	e8 e3       	ldi	r30, 0x38	; 56
    2210:	f0 e0       	ldi	r31, 0x00	; 0
    2212:	80 81       	ld	r24, Z
    2214:	80 62       	ori	r24, 0x20	; 32
    2216:	8c 93       	st	X, r24
	CLEAR_BIT(LCD_CTRL_PORT,RW); /* Write data to LCD so RW = 0 */
    2218:	a8 e3       	ldi	r26, 0x38	; 56
    221a:	b0 e0       	ldi	r27, 0x00	; 0
    221c:	e8 e3       	ldi	r30, 0x38	; 56
    221e:	f0 e0       	ldi	r31, 0x00	; 0
    2220:	80 81       	ld	r24, Z
    2222:	8f 7b       	andi	r24, 0xBF	; 191
    2224:	8c 93       	st	X, r24
    2226:	80 e0       	ldi	r24, 0x00	; 0
    2228:	90 e0       	ldi	r25, 0x00	; 0
    222a:	a0 e8       	ldi	r26, 0x80	; 128
    222c:	bf e3       	ldi	r27, 0x3F	; 63
    222e:	8d ab       	std	Y+53, r24	; 0x35
    2230:	9e ab       	std	Y+54, r25	; 0x36
    2232:	af ab       	std	Y+55, r26	; 0x37
    2234:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2236:	6d a9       	ldd	r22, Y+53	; 0x35
    2238:	7e a9       	ldd	r23, Y+54	; 0x36
    223a:	8f a9       	ldd	r24, Y+55	; 0x37
    223c:	98 ad       	ldd	r25, Y+56	; 0x38
    223e:	20 e0       	ldi	r18, 0x00	; 0
    2240:	30 e0       	ldi	r19, 0x00	; 0
    2242:	4a ef       	ldi	r20, 0xFA	; 250
    2244:	54 e4       	ldi	r21, 0x44	; 68
    2246:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    224a:	dc 01       	movw	r26, r24
    224c:	cb 01       	movw	r24, r22
    224e:	89 ab       	std	Y+49, r24	; 0x31
    2250:	9a ab       	std	Y+50, r25	; 0x32
    2252:	ab ab       	std	Y+51, r26	; 0x33
    2254:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    2256:	69 a9       	ldd	r22, Y+49	; 0x31
    2258:	7a a9       	ldd	r23, Y+50	; 0x32
    225a:	8b a9       	ldd	r24, Y+51	; 0x33
    225c:	9c a9       	ldd	r25, Y+52	; 0x34
    225e:	20 e0       	ldi	r18, 0x00	; 0
    2260:	30 e0       	ldi	r19, 0x00	; 0
    2262:	40 e8       	ldi	r20, 0x80	; 128
    2264:	5f e3       	ldi	r21, 0x3F	; 63
    2266:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    226a:	88 23       	and	r24, r24
    226c:	2c f4       	brge	.+10     	; 0x2278 <LCD_displayCharacter+0x84>
		__ticks = 1;
    226e:	81 e0       	ldi	r24, 0x01	; 1
    2270:	90 e0       	ldi	r25, 0x00	; 0
    2272:	98 ab       	std	Y+48, r25	; 0x30
    2274:	8f a7       	std	Y+47, r24	; 0x2f
    2276:	3f c0       	rjmp	.+126    	; 0x22f6 <LCD_displayCharacter+0x102>
	else if (__tmp > 65535)
    2278:	69 a9       	ldd	r22, Y+49	; 0x31
    227a:	7a a9       	ldd	r23, Y+50	; 0x32
    227c:	8b a9       	ldd	r24, Y+51	; 0x33
    227e:	9c a9       	ldd	r25, Y+52	; 0x34
    2280:	20 e0       	ldi	r18, 0x00	; 0
    2282:	3f ef       	ldi	r19, 0xFF	; 255
    2284:	4f e7       	ldi	r20, 0x7F	; 127
    2286:	57 e4       	ldi	r21, 0x47	; 71
    2288:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    228c:	18 16       	cp	r1, r24
    228e:	4c f5       	brge	.+82     	; 0x22e2 <LCD_displayCharacter+0xee>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2290:	6d a9       	ldd	r22, Y+53	; 0x35
    2292:	7e a9       	ldd	r23, Y+54	; 0x36
    2294:	8f a9       	ldd	r24, Y+55	; 0x37
    2296:	98 ad       	ldd	r25, Y+56	; 0x38
    2298:	20 e0       	ldi	r18, 0x00	; 0
    229a:	30 e0       	ldi	r19, 0x00	; 0
    229c:	40 e2       	ldi	r20, 0x20	; 32
    229e:	51 e4       	ldi	r21, 0x41	; 65
    22a0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    22a4:	dc 01       	movw	r26, r24
    22a6:	cb 01       	movw	r24, r22
    22a8:	bc 01       	movw	r22, r24
    22aa:	cd 01       	movw	r24, r26
    22ac:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    22b0:	dc 01       	movw	r26, r24
    22b2:	cb 01       	movw	r24, r22
    22b4:	98 ab       	std	Y+48, r25	; 0x30
    22b6:	8f a7       	std	Y+47, r24	; 0x2f
    22b8:	0f c0       	rjmp	.+30     	; 0x22d8 <LCD_displayCharacter+0xe4>
    22ba:	88 ec       	ldi	r24, 0xC8	; 200
    22bc:	90 e0       	ldi	r25, 0x00	; 0
    22be:	9e a7       	std	Y+46, r25	; 0x2e
    22c0:	8d a7       	std	Y+45, r24	; 0x2d
    22c2:	8d a5       	ldd	r24, Y+45	; 0x2d
    22c4:	9e a5       	ldd	r25, Y+46	; 0x2e
    22c6:	01 97       	sbiw	r24, 0x01	; 1
    22c8:	f1 f7       	brne	.-4      	; 0x22c6 <LCD_displayCharacter+0xd2>
    22ca:	9e a7       	std	Y+46, r25	; 0x2e
    22cc:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    22ce:	8f a5       	ldd	r24, Y+47	; 0x2f
    22d0:	98 a9       	ldd	r25, Y+48	; 0x30
    22d2:	01 97       	sbiw	r24, 0x01	; 1
    22d4:	98 ab       	std	Y+48, r25	; 0x30
    22d6:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    22d8:	8f a5       	ldd	r24, Y+47	; 0x2f
    22da:	98 a9       	ldd	r25, Y+48	; 0x30
    22dc:	00 97       	sbiw	r24, 0x00	; 0
    22de:	69 f7       	brne	.-38     	; 0x22ba <LCD_displayCharacter+0xc6>
    22e0:	14 c0       	rjmp	.+40     	; 0x230a <LCD_displayCharacter+0x116>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    22e2:	69 a9       	ldd	r22, Y+49	; 0x31
    22e4:	7a a9       	ldd	r23, Y+50	; 0x32
    22e6:	8b a9       	ldd	r24, Y+51	; 0x33
    22e8:	9c a9       	ldd	r25, Y+52	; 0x34
    22ea:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    22ee:	dc 01       	movw	r26, r24
    22f0:	cb 01       	movw	r24, r22
    22f2:	98 ab       	std	Y+48, r25	; 0x30
    22f4:	8f a7       	std	Y+47, r24	; 0x2f
    22f6:	8f a5       	ldd	r24, Y+47	; 0x2f
    22f8:	98 a9       	ldd	r25, Y+48	; 0x30
    22fa:	9c a7       	std	Y+44, r25	; 0x2c
    22fc:	8b a7       	std	Y+43, r24	; 0x2b
    22fe:	8b a5       	ldd	r24, Y+43	; 0x2b
    2300:	9c a5       	ldd	r25, Y+44	; 0x2c
    2302:	01 97       	sbiw	r24, 0x01	; 1
    2304:	f1 f7       	brne	.-4      	; 0x2302 <LCD_displayCharacter+0x10e>
    2306:	9c a7       	std	Y+44, r25	; 0x2c
    2308:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1); /* Delay for processing Tas = 50ns */
	SET_BIT(LCD_CTRL_PORT,E); /* Enable LCD E = 1 */
    230a:	a8 e3       	ldi	r26, 0x38	; 56
    230c:	b0 e0       	ldi	r27, 0x00	; 0
    230e:	e8 e3       	ldi	r30, 0x38	; 56
    2310:	f0 e0       	ldi	r31, 0x00	; 0
    2312:	80 81       	ld	r24, Z
    2314:	80 68       	ori	r24, 0x80	; 128
    2316:	8c 93       	st	X, r24
    2318:	80 e0       	ldi	r24, 0x00	; 0
    231a:	90 e0       	ldi	r25, 0x00	; 0
    231c:	a0 e8       	ldi	r26, 0x80	; 128
    231e:	bf e3       	ldi	r27, 0x3F	; 63
    2320:	8f a3       	std	Y+39, r24	; 0x27
    2322:	98 a7       	std	Y+40, r25	; 0x28
    2324:	a9 a7       	std	Y+41, r26	; 0x29
    2326:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2328:	6f a1       	ldd	r22, Y+39	; 0x27
    232a:	78 a5       	ldd	r23, Y+40	; 0x28
    232c:	89 a5       	ldd	r24, Y+41	; 0x29
    232e:	9a a5       	ldd	r25, Y+42	; 0x2a
    2330:	20 e0       	ldi	r18, 0x00	; 0
    2332:	30 e0       	ldi	r19, 0x00	; 0
    2334:	4a ef       	ldi	r20, 0xFA	; 250
    2336:	54 e4       	ldi	r21, 0x44	; 68
    2338:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    233c:	dc 01       	movw	r26, r24
    233e:	cb 01       	movw	r24, r22
    2340:	8b a3       	std	Y+35, r24	; 0x23
    2342:	9c a3       	std	Y+36, r25	; 0x24
    2344:	ad a3       	std	Y+37, r26	; 0x25
    2346:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    2348:	6b a1       	ldd	r22, Y+35	; 0x23
    234a:	7c a1       	ldd	r23, Y+36	; 0x24
    234c:	8d a1       	ldd	r24, Y+37	; 0x25
    234e:	9e a1       	ldd	r25, Y+38	; 0x26
    2350:	20 e0       	ldi	r18, 0x00	; 0
    2352:	30 e0       	ldi	r19, 0x00	; 0
    2354:	40 e8       	ldi	r20, 0x80	; 128
    2356:	5f e3       	ldi	r21, 0x3F	; 63
    2358:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    235c:	88 23       	and	r24, r24
    235e:	2c f4       	brge	.+10     	; 0x236a <LCD_displayCharacter+0x176>
		__ticks = 1;
    2360:	81 e0       	ldi	r24, 0x01	; 1
    2362:	90 e0       	ldi	r25, 0x00	; 0
    2364:	9a a3       	std	Y+34, r25	; 0x22
    2366:	89 a3       	std	Y+33, r24	; 0x21
    2368:	3f c0       	rjmp	.+126    	; 0x23e8 <LCD_displayCharacter+0x1f4>
	else if (__tmp > 65535)
    236a:	6b a1       	ldd	r22, Y+35	; 0x23
    236c:	7c a1       	ldd	r23, Y+36	; 0x24
    236e:	8d a1       	ldd	r24, Y+37	; 0x25
    2370:	9e a1       	ldd	r25, Y+38	; 0x26
    2372:	20 e0       	ldi	r18, 0x00	; 0
    2374:	3f ef       	ldi	r19, 0xFF	; 255
    2376:	4f e7       	ldi	r20, 0x7F	; 127
    2378:	57 e4       	ldi	r21, 0x47	; 71
    237a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    237e:	18 16       	cp	r1, r24
    2380:	4c f5       	brge	.+82     	; 0x23d4 <LCD_displayCharacter+0x1e0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2382:	6f a1       	ldd	r22, Y+39	; 0x27
    2384:	78 a5       	ldd	r23, Y+40	; 0x28
    2386:	89 a5       	ldd	r24, Y+41	; 0x29
    2388:	9a a5       	ldd	r25, Y+42	; 0x2a
    238a:	20 e0       	ldi	r18, 0x00	; 0
    238c:	30 e0       	ldi	r19, 0x00	; 0
    238e:	40 e2       	ldi	r20, 0x20	; 32
    2390:	51 e4       	ldi	r21, 0x41	; 65
    2392:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2396:	dc 01       	movw	r26, r24
    2398:	cb 01       	movw	r24, r22
    239a:	bc 01       	movw	r22, r24
    239c:	cd 01       	movw	r24, r26
    239e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    23a2:	dc 01       	movw	r26, r24
    23a4:	cb 01       	movw	r24, r22
    23a6:	9a a3       	std	Y+34, r25	; 0x22
    23a8:	89 a3       	std	Y+33, r24	; 0x21
    23aa:	0f c0       	rjmp	.+30     	; 0x23ca <LCD_displayCharacter+0x1d6>
    23ac:	88 ec       	ldi	r24, 0xC8	; 200
    23ae:	90 e0       	ldi	r25, 0x00	; 0
    23b0:	98 a3       	std	Y+32, r25	; 0x20
    23b2:	8f 8f       	std	Y+31, r24	; 0x1f
    23b4:	8f 8d       	ldd	r24, Y+31	; 0x1f
    23b6:	98 a1       	ldd	r25, Y+32	; 0x20
    23b8:	01 97       	sbiw	r24, 0x01	; 1
    23ba:	f1 f7       	brne	.-4      	; 0x23b8 <LCD_displayCharacter+0x1c4>
    23bc:	98 a3       	std	Y+32, r25	; 0x20
    23be:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    23c0:	89 a1       	ldd	r24, Y+33	; 0x21
    23c2:	9a a1       	ldd	r25, Y+34	; 0x22
    23c4:	01 97       	sbiw	r24, 0x01	; 1
    23c6:	9a a3       	std	Y+34, r25	; 0x22
    23c8:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    23ca:	89 a1       	ldd	r24, Y+33	; 0x21
    23cc:	9a a1       	ldd	r25, Y+34	; 0x22
    23ce:	00 97       	sbiw	r24, 0x00	; 0
    23d0:	69 f7       	brne	.-38     	; 0x23ac <LCD_displayCharacter+0x1b8>
    23d2:	14 c0       	rjmp	.+40     	; 0x23fc <LCD_displayCharacter+0x208>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    23d4:	6b a1       	ldd	r22, Y+35	; 0x23
    23d6:	7c a1       	ldd	r23, Y+36	; 0x24
    23d8:	8d a1       	ldd	r24, Y+37	; 0x25
    23da:	9e a1       	ldd	r25, Y+38	; 0x26
    23dc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    23e0:	dc 01       	movw	r26, r24
    23e2:	cb 01       	movw	r24, r22
    23e4:	9a a3       	std	Y+34, r25	; 0x22
    23e6:	89 a3       	std	Y+33, r24	; 0x21
    23e8:	89 a1       	ldd	r24, Y+33	; 0x21
    23ea:	9a a1       	ldd	r25, Y+34	; 0x22
    23ec:	9e 8f       	std	Y+30, r25	; 0x1e
    23ee:	8d 8f       	std	Y+29, r24	; 0x1d
    23f0:	8d 8d       	ldd	r24, Y+29	; 0x1d
    23f2:	9e 8d       	ldd	r25, Y+30	; 0x1e
    23f4:	01 97       	sbiw	r24, 0x01	; 1
    23f6:	f1 f7       	brne	.-4      	; 0x23f4 <LCD_displayCharacter+0x200>
    23f8:	9e 8f       	std	Y+30, r25	; 0x1e
    23fa:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1); /* Delay for processing Tpw - Tdws = 190ns */
	LCD_DATA_PORT = data; /* Out the required data char to the data bus D0 --> D7 */
    23fc:	e5 e3       	ldi	r30, 0x35	; 53
    23fe:	f0 e0       	ldi	r31, 0x00	; 0
    2400:	89 ad       	ldd	r24, Y+57	; 0x39
    2402:	80 83       	st	Z, r24
    2404:	80 e0       	ldi	r24, 0x00	; 0
    2406:	90 e0       	ldi	r25, 0x00	; 0
    2408:	a0 e8       	ldi	r26, 0x80	; 128
    240a:	bf e3       	ldi	r27, 0x3F	; 63
    240c:	89 8f       	std	Y+25, r24	; 0x19
    240e:	9a 8f       	std	Y+26, r25	; 0x1a
    2410:	ab 8f       	std	Y+27, r26	; 0x1b
    2412:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2414:	69 8d       	ldd	r22, Y+25	; 0x19
    2416:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2418:	8b 8d       	ldd	r24, Y+27	; 0x1b
    241a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    241c:	20 e0       	ldi	r18, 0x00	; 0
    241e:	30 e0       	ldi	r19, 0x00	; 0
    2420:	4a ef       	ldi	r20, 0xFA	; 250
    2422:	54 e4       	ldi	r21, 0x44	; 68
    2424:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2428:	dc 01       	movw	r26, r24
    242a:	cb 01       	movw	r24, r22
    242c:	8d 8b       	std	Y+21, r24	; 0x15
    242e:	9e 8b       	std	Y+22, r25	; 0x16
    2430:	af 8b       	std	Y+23, r26	; 0x17
    2432:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2434:	6d 89       	ldd	r22, Y+21	; 0x15
    2436:	7e 89       	ldd	r23, Y+22	; 0x16
    2438:	8f 89       	ldd	r24, Y+23	; 0x17
    243a:	98 8d       	ldd	r25, Y+24	; 0x18
    243c:	20 e0       	ldi	r18, 0x00	; 0
    243e:	30 e0       	ldi	r19, 0x00	; 0
    2440:	40 e8       	ldi	r20, 0x80	; 128
    2442:	5f e3       	ldi	r21, 0x3F	; 63
    2444:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2448:	88 23       	and	r24, r24
    244a:	2c f4       	brge	.+10     	; 0x2456 <LCD_displayCharacter+0x262>
		__ticks = 1;
    244c:	81 e0       	ldi	r24, 0x01	; 1
    244e:	90 e0       	ldi	r25, 0x00	; 0
    2450:	9c 8b       	std	Y+20, r25	; 0x14
    2452:	8b 8b       	std	Y+19, r24	; 0x13
    2454:	3f c0       	rjmp	.+126    	; 0x24d4 <LCD_displayCharacter+0x2e0>
	else if (__tmp > 65535)
    2456:	6d 89       	ldd	r22, Y+21	; 0x15
    2458:	7e 89       	ldd	r23, Y+22	; 0x16
    245a:	8f 89       	ldd	r24, Y+23	; 0x17
    245c:	98 8d       	ldd	r25, Y+24	; 0x18
    245e:	20 e0       	ldi	r18, 0x00	; 0
    2460:	3f ef       	ldi	r19, 0xFF	; 255
    2462:	4f e7       	ldi	r20, 0x7F	; 127
    2464:	57 e4       	ldi	r21, 0x47	; 71
    2466:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    246a:	18 16       	cp	r1, r24
    246c:	4c f5       	brge	.+82     	; 0x24c0 <LCD_displayCharacter+0x2cc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    246e:	69 8d       	ldd	r22, Y+25	; 0x19
    2470:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2472:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2474:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2476:	20 e0       	ldi	r18, 0x00	; 0
    2478:	30 e0       	ldi	r19, 0x00	; 0
    247a:	40 e2       	ldi	r20, 0x20	; 32
    247c:	51 e4       	ldi	r21, 0x41	; 65
    247e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2482:	dc 01       	movw	r26, r24
    2484:	cb 01       	movw	r24, r22
    2486:	bc 01       	movw	r22, r24
    2488:	cd 01       	movw	r24, r26
    248a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    248e:	dc 01       	movw	r26, r24
    2490:	cb 01       	movw	r24, r22
    2492:	9c 8b       	std	Y+20, r25	; 0x14
    2494:	8b 8b       	std	Y+19, r24	; 0x13
    2496:	0f c0       	rjmp	.+30     	; 0x24b6 <LCD_displayCharacter+0x2c2>
    2498:	88 ec       	ldi	r24, 0xC8	; 200
    249a:	90 e0       	ldi	r25, 0x00	; 0
    249c:	9a 8b       	std	Y+18, r25	; 0x12
    249e:	89 8b       	std	Y+17, r24	; 0x11
    24a0:	89 89       	ldd	r24, Y+17	; 0x11
    24a2:	9a 89       	ldd	r25, Y+18	; 0x12
    24a4:	01 97       	sbiw	r24, 0x01	; 1
    24a6:	f1 f7       	brne	.-4      	; 0x24a4 <LCD_displayCharacter+0x2b0>
    24a8:	9a 8b       	std	Y+18, r25	; 0x12
    24aa:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    24ac:	8b 89       	ldd	r24, Y+19	; 0x13
    24ae:	9c 89       	ldd	r25, Y+20	; 0x14
    24b0:	01 97       	sbiw	r24, 0x01	; 1
    24b2:	9c 8b       	std	Y+20, r25	; 0x14
    24b4:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    24b6:	8b 89       	ldd	r24, Y+19	; 0x13
    24b8:	9c 89       	ldd	r25, Y+20	; 0x14
    24ba:	00 97       	sbiw	r24, 0x00	; 0
    24bc:	69 f7       	brne	.-38     	; 0x2498 <LCD_displayCharacter+0x2a4>
    24be:	14 c0       	rjmp	.+40     	; 0x24e8 <LCD_displayCharacter+0x2f4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    24c0:	6d 89       	ldd	r22, Y+21	; 0x15
    24c2:	7e 89       	ldd	r23, Y+22	; 0x16
    24c4:	8f 89       	ldd	r24, Y+23	; 0x17
    24c6:	98 8d       	ldd	r25, Y+24	; 0x18
    24c8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    24cc:	dc 01       	movw	r26, r24
    24ce:	cb 01       	movw	r24, r22
    24d0:	9c 8b       	std	Y+20, r25	; 0x14
    24d2:	8b 8b       	std	Y+19, r24	; 0x13
    24d4:	8b 89       	ldd	r24, Y+19	; 0x13
    24d6:	9c 89       	ldd	r25, Y+20	; 0x14
    24d8:	98 8b       	std	Y+16, r25	; 0x10
    24da:	8f 87       	std	Y+15, r24	; 0x0f
    24dc:	8f 85       	ldd	r24, Y+15	; 0x0f
    24de:	98 89       	ldd	r25, Y+16	; 0x10
    24e0:	01 97       	sbiw	r24, 0x01	; 1
    24e2:	f1 f7       	brne	.-4      	; 0x24e0 <LCD_displayCharacter+0x2ec>
    24e4:	98 8b       	std	Y+16, r25	; 0x10
    24e6:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1); /* Delay for processing Tdsw = 100ns */
	CLEAR_BIT(LCD_CTRL_PORT,E); /* disable LCD E = 0 */
    24e8:	a8 e3       	ldi	r26, 0x38	; 56
    24ea:	b0 e0       	ldi	r27, 0x00	; 0
    24ec:	e8 e3       	ldi	r30, 0x38	; 56
    24ee:	f0 e0       	ldi	r31, 0x00	; 0
    24f0:	80 81       	ld	r24, Z
    24f2:	8f 77       	andi	r24, 0x7F	; 127
    24f4:	8c 93       	st	X, r24
    24f6:	80 e0       	ldi	r24, 0x00	; 0
    24f8:	90 e0       	ldi	r25, 0x00	; 0
    24fa:	a0 e8       	ldi	r26, 0x80	; 128
    24fc:	bf e3       	ldi	r27, 0x3F	; 63
    24fe:	8b 87       	std	Y+11, r24	; 0x0b
    2500:	9c 87       	std	Y+12, r25	; 0x0c
    2502:	ad 87       	std	Y+13, r26	; 0x0d
    2504:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2506:	6b 85       	ldd	r22, Y+11	; 0x0b
    2508:	7c 85       	ldd	r23, Y+12	; 0x0c
    250a:	8d 85       	ldd	r24, Y+13	; 0x0d
    250c:	9e 85       	ldd	r25, Y+14	; 0x0e
    250e:	20 e0       	ldi	r18, 0x00	; 0
    2510:	30 e0       	ldi	r19, 0x00	; 0
    2512:	4a ef       	ldi	r20, 0xFA	; 250
    2514:	54 e4       	ldi	r21, 0x44	; 68
    2516:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    251a:	dc 01       	movw	r26, r24
    251c:	cb 01       	movw	r24, r22
    251e:	8f 83       	std	Y+7, r24	; 0x07
    2520:	98 87       	std	Y+8, r25	; 0x08
    2522:	a9 87       	std	Y+9, r26	; 0x09
    2524:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2526:	6f 81       	ldd	r22, Y+7	; 0x07
    2528:	78 85       	ldd	r23, Y+8	; 0x08
    252a:	89 85       	ldd	r24, Y+9	; 0x09
    252c:	9a 85       	ldd	r25, Y+10	; 0x0a
    252e:	20 e0       	ldi	r18, 0x00	; 0
    2530:	30 e0       	ldi	r19, 0x00	; 0
    2532:	40 e8       	ldi	r20, 0x80	; 128
    2534:	5f e3       	ldi	r21, 0x3F	; 63
    2536:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    253a:	88 23       	and	r24, r24
    253c:	2c f4       	brge	.+10     	; 0x2548 <LCD_displayCharacter+0x354>
		__ticks = 1;
    253e:	81 e0       	ldi	r24, 0x01	; 1
    2540:	90 e0       	ldi	r25, 0x00	; 0
    2542:	9e 83       	std	Y+6, r25	; 0x06
    2544:	8d 83       	std	Y+5, r24	; 0x05
    2546:	3f c0       	rjmp	.+126    	; 0x25c6 <LCD_displayCharacter+0x3d2>
	else if (__tmp > 65535)
    2548:	6f 81       	ldd	r22, Y+7	; 0x07
    254a:	78 85       	ldd	r23, Y+8	; 0x08
    254c:	89 85       	ldd	r24, Y+9	; 0x09
    254e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2550:	20 e0       	ldi	r18, 0x00	; 0
    2552:	3f ef       	ldi	r19, 0xFF	; 255
    2554:	4f e7       	ldi	r20, 0x7F	; 127
    2556:	57 e4       	ldi	r21, 0x47	; 71
    2558:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    255c:	18 16       	cp	r1, r24
    255e:	4c f5       	brge	.+82     	; 0x25b2 <LCD_displayCharacter+0x3be>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2560:	6b 85       	ldd	r22, Y+11	; 0x0b
    2562:	7c 85       	ldd	r23, Y+12	; 0x0c
    2564:	8d 85       	ldd	r24, Y+13	; 0x0d
    2566:	9e 85       	ldd	r25, Y+14	; 0x0e
    2568:	20 e0       	ldi	r18, 0x00	; 0
    256a:	30 e0       	ldi	r19, 0x00	; 0
    256c:	40 e2       	ldi	r20, 0x20	; 32
    256e:	51 e4       	ldi	r21, 0x41	; 65
    2570:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2574:	dc 01       	movw	r26, r24
    2576:	cb 01       	movw	r24, r22
    2578:	bc 01       	movw	r22, r24
    257a:	cd 01       	movw	r24, r26
    257c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2580:	dc 01       	movw	r26, r24
    2582:	cb 01       	movw	r24, r22
    2584:	9e 83       	std	Y+6, r25	; 0x06
    2586:	8d 83       	std	Y+5, r24	; 0x05
    2588:	0f c0       	rjmp	.+30     	; 0x25a8 <LCD_displayCharacter+0x3b4>
    258a:	88 ec       	ldi	r24, 0xC8	; 200
    258c:	90 e0       	ldi	r25, 0x00	; 0
    258e:	9c 83       	std	Y+4, r25	; 0x04
    2590:	8b 83       	std	Y+3, r24	; 0x03
    2592:	8b 81       	ldd	r24, Y+3	; 0x03
    2594:	9c 81       	ldd	r25, Y+4	; 0x04
    2596:	01 97       	sbiw	r24, 0x01	; 1
    2598:	f1 f7       	brne	.-4      	; 0x2596 <LCD_displayCharacter+0x3a2>
    259a:	9c 83       	std	Y+4, r25	; 0x04
    259c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    259e:	8d 81       	ldd	r24, Y+5	; 0x05
    25a0:	9e 81       	ldd	r25, Y+6	; 0x06
    25a2:	01 97       	sbiw	r24, 0x01	; 1
    25a4:	9e 83       	std	Y+6, r25	; 0x06
    25a6:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    25a8:	8d 81       	ldd	r24, Y+5	; 0x05
    25aa:	9e 81       	ldd	r25, Y+6	; 0x06
    25ac:	00 97       	sbiw	r24, 0x00	; 0
    25ae:	69 f7       	brne	.-38     	; 0x258a <LCD_displayCharacter+0x396>
    25b0:	14 c0       	rjmp	.+40     	; 0x25da <LCD_displayCharacter+0x3e6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    25b2:	6f 81       	ldd	r22, Y+7	; 0x07
    25b4:	78 85       	ldd	r23, Y+8	; 0x08
    25b6:	89 85       	ldd	r24, Y+9	; 0x09
    25b8:	9a 85       	ldd	r25, Y+10	; 0x0a
    25ba:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    25be:	dc 01       	movw	r26, r24
    25c0:	cb 01       	movw	r24, r22
    25c2:	9e 83       	std	Y+6, r25	; 0x06
    25c4:	8d 83       	std	Y+5, r24	; 0x05
    25c6:	8d 81       	ldd	r24, Y+5	; 0x05
    25c8:	9e 81       	ldd	r25, Y+6	; 0x06
    25ca:	9a 83       	std	Y+2, r25	; 0x02
    25cc:	89 83       	std	Y+1, r24	; 0x01
    25ce:	89 81       	ldd	r24, Y+1	; 0x01
    25d0:	9a 81       	ldd	r25, Y+2	; 0x02
    25d2:	01 97       	sbiw	r24, 0x01	; 1
    25d4:	f1 f7       	brne	.-4      	; 0x25d2 <LCD_displayCharacter+0x3de>
    25d6:	9a 83       	std	Y+2, r25	; 0x02
    25d8:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1); /* Delay for processing Th = 13ns */	
}
    25da:	e9 96       	adiw	r28, 0x39	; 57
    25dc:	0f b6       	in	r0, 0x3f	; 63
    25de:	f8 94       	cli
    25e0:	de bf       	out	0x3e, r29	; 62
    25e2:	0f be       	out	0x3f, r0	; 63
    25e4:	cd bf       	out	0x3d, r28	; 61
    25e6:	cf 91       	pop	r28
    25e8:	df 91       	pop	r29
    25ea:	08 95       	ret

000025ec <LCD_displayString>:

void LCD_displayString(const char * Str)
{
    25ec:	df 93       	push	r29
    25ee:	cf 93       	push	r28
    25f0:	00 d0       	rcall	.+0      	; 0x25f2 <LCD_displayString+0x6>
    25f2:	0f 92       	push	r0
    25f4:	cd b7       	in	r28, 0x3d	; 61
    25f6:	de b7       	in	r29, 0x3e	; 62
    25f8:	9b 83       	std	Y+3, r25	; 0x03
    25fa:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    25fc:	19 82       	std	Y+1, r1	; 0x01
    25fe:	0e c0       	rjmp	.+28     	; 0x261c <LCD_displayString+0x30>
	while(Str[i] != '\0')
	{
		LCD_displayCharacter(Str[i]);
    2600:	89 81       	ldd	r24, Y+1	; 0x01
    2602:	28 2f       	mov	r18, r24
    2604:	30 e0       	ldi	r19, 0x00	; 0
    2606:	8a 81       	ldd	r24, Y+2	; 0x02
    2608:	9b 81       	ldd	r25, Y+3	; 0x03
    260a:	fc 01       	movw	r30, r24
    260c:	e2 0f       	add	r30, r18
    260e:	f3 1f       	adc	r31, r19
    2610:	80 81       	ld	r24, Z
    2612:	0e 94 fa 10 	call	0x21f4	; 0x21f4 <LCD_displayCharacter>
		i++;
    2616:	89 81       	ldd	r24, Y+1	; 0x01
    2618:	8f 5f       	subi	r24, 0xFF	; 255
    261a:	89 83       	std	Y+1, r24	; 0x01
}

void LCD_displayString(const char * Str)
{
	uint8 i = 0;
	while(Str[i] != '\0')
    261c:	89 81       	ldd	r24, Y+1	; 0x01
    261e:	28 2f       	mov	r18, r24
    2620:	30 e0       	ldi	r19, 0x00	; 0
    2622:	8a 81       	ldd	r24, Y+2	; 0x02
    2624:	9b 81       	ldd	r25, Y+3	; 0x03
    2626:	fc 01       	movw	r30, r24
    2628:	e2 0f       	add	r30, r18
    262a:	f3 1f       	adc	r31, r19
    262c:	80 81       	ld	r24, Z
    262e:	88 23       	and	r24, r24
    2630:	39 f7       	brne	.-50     	; 0x2600 <LCD_displayString+0x14>
	{
		LCD_displayCharacter(Str[i]);
		i++;
	}
}
    2632:	0f 90       	pop	r0
    2634:	0f 90       	pop	r0
    2636:	0f 90       	pop	r0
    2638:	cf 91       	pop	r28
    263a:	df 91       	pop	r29
    263c:	08 95       	ret

0000263e <LCD_goToRowColumn>:

void LCD_goToRowColumn(uint8 row,uint8 col)
{
    263e:	df 93       	push	r29
    2640:	cf 93       	push	r28
    2642:	00 d0       	rcall	.+0      	; 0x2644 <LCD_goToRowColumn+0x6>
    2644:	00 d0       	rcall	.+0      	; 0x2646 <LCD_goToRowColumn+0x8>
    2646:	0f 92       	push	r0
    2648:	cd b7       	in	r28, 0x3d	; 61
    264a:	de b7       	in	r29, 0x3e	; 62
    264c:	8a 83       	std	Y+2, r24	; 0x02
    264e:	6b 83       	std	Y+3, r22	; 0x03
	uint8 Address;
	
	/* First of all calculate the required address */
	switch(row)
    2650:	8a 81       	ldd	r24, Y+2	; 0x02
    2652:	28 2f       	mov	r18, r24
    2654:	30 e0       	ldi	r19, 0x00	; 0
    2656:	3d 83       	std	Y+5, r19	; 0x05
    2658:	2c 83       	std	Y+4, r18	; 0x04
    265a:	8c 81       	ldd	r24, Y+4	; 0x04
    265c:	9d 81       	ldd	r25, Y+5	; 0x05
    265e:	81 30       	cpi	r24, 0x01	; 1
    2660:	91 05       	cpc	r25, r1
    2662:	c1 f0       	breq	.+48     	; 0x2694 <LCD_goToRowColumn+0x56>
    2664:	2c 81       	ldd	r18, Y+4	; 0x04
    2666:	3d 81       	ldd	r19, Y+5	; 0x05
    2668:	22 30       	cpi	r18, 0x02	; 2
    266a:	31 05       	cpc	r19, r1
    266c:	2c f4       	brge	.+10     	; 0x2678 <LCD_goToRowColumn+0x3a>
    266e:	8c 81       	ldd	r24, Y+4	; 0x04
    2670:	9d 81       	ldd	r25, Y+5	; 0x05
    2672:	00 97       	sbiw	r24, 0x00	; 0
    2674:	61 f0       	breq	.+24     	; 0x268e <LCD_goToRowColumn+0x50>
    2676:	19 c0       	rjmp	.+50     	; 0x26aa <LCD_goToRowColumn+0x6c>
    2678:	2c 81       	ldd	r18, Y+4	; 0x04
    267a:	3d 81       	ldd	r19, Y+5	; 0x05
    267c:	22 30       	cpi	r18, 0x02	; 2
    267e:	31 05       	cpc	r19, r1
    2680:	69 f0       	breq	.+26     	; 0x269c <LCD_goToRowColumn+0x5e>
    2682:	8c 81       	ldd	r24, Y+4	; 0x04
    2684:	9d 81       	ldd	r25, Y+5	; 0x05
    2686:	83 30       	cpi	r24, 0x03	; 3
    2688:	91 05       	cpc	r25, r1
    268a:	61 f0       	breq	.+24     	; 0x26a4 <LCD_goToRowColumn+0x66>
    268c:	0e c0       	rjmp	.+28     	; 0x26aa <LCD_goToRowColumn+0x6c>
	{
		case 0:
				Address=col;
    268e:	8b 81       	ldd	r24, Y+3	; 0x03
    2690:	89 83       	std	Y+1, r24	; 0x01
    2692:	0b c0       	rjmp	.+22     	; 0x26aa <LCD_goToRowColumn+0x6c>
				break;
		case 1:
				Address=col+0x40;
    2694:	8b 81       	ldd	r24, Y+3	; 0x03
    2696:	80 5c       	subi	r24, 0xC0	; 192
    2698:	89 83       	std	Y+1, r24	; 0x01
    269a:	07 c0       	rjmp	.+14     	; 0x26aa <LCD_goToRowColumn+0x6c>
				break;
		case 2:
				Address=col+0x14;
    269c:	8b 81       	ldd	r24, Y+3	; 0x03
    269e:	8c 5e       	subi	r24, 0xEC	; 236
    26a0:	89 83       	std	Y+1, r24	; 0x01
    26a2:	03 c0       	rjmp	.+6      	; 0x26aa <LCD_goToRowColumn+0x6c>
				break;
		case 3:
				Address=col+0x54;
    26a4:	8b 81       	ldd	r24, Y+3	; 0x03
    26a6:	8c 5a       	subi	r24, 0xAC	; 172
    26a8:	89 83       	std	Y+1, r24	; 0x01
	}					
	/* 
	 * To write to a specific address in the LCD 
	 * we need to apply the corresponding command 0b10000000+Address 
	 */
	LCD_sendCommand(Address | SET_CURSOR_LOCATION); 
    26aa:	89 81       	ldd	r24, Y+1	; 0x01
    26ac:	80 68       	ori	r24, 0x80	; 128
    26ae:	0e 94 fe 0e 	call	0x1dfc	; 0x1dfc <LCD_sendCommand>
}
    26b2:	0f 90       	pop	r0
    26b4:	0f 90       	pop	r0
    26b6:	0f 90       	pop	r0
    26b8:	0f 90       	pop	r0
    26ba:	0f 90       	pop	r0
    26bc:	cf 91       	pop	r28
    26be:	df 91       	pop	r29
    26c0:	08 95       	ret

000026c2 <LCD_displayStringRowColumn>:

void LCD_displayStringRowColumn(uint8 row,uint8 col,const char * Str)
{
    26c2:	df 93       	push	r29
    26c4:	cf 93       	push	r28
    26c6:	00 d0       	rcall	.+0      	; 0x26c8 <LCD_displayStringRowColumn+0x6>
    26c8:	00 d0       	rcall	.+0      	; 0x26ca <LCD_displayStringRowColumn+0x8>
    26ca:	cd b7       	in	r28, 0x3d	; 61
    26cc:	de b7       	in	r29, 0x3e	; 62
    26ce:	89 83       	std	Y+1, r24	; 0x01
    26d0:	6a 83       	std	Y+2, r22	; 0x02
    26d2:	5c 83       	std	Y+4, r21	; 0x04
    26d4:	4b 83       	std	Y+3, r20	; 0x03
	LCD_goToRowColumn(row,col); /* Go to to the required LCD position */
    26d6:	89 81       	ldd	r24, Y+1	; 0x01
    26d8:	6a 81       	ldd	r22, Y+2	; 0x02
    26da:	0e 94 1f 13 	call	0x263e	; 0x263e <LCD_goToRowColumn>
	LCD_displayString(Str); /* Display the string */
    26de:	8b 81       	ldd	r24, Y+3	; 0x03
    26e0:	9c 81       	ldd	r25, Y+4	; 0x04
    26e2:	0e 94 f6 12 	call	0x25ec	; 0x25ec <LCD_displayString>
}
    26e6:	0f 90       	pop	r0
    26e8:	0f 90       	pop	r0
    26ea:	0f 90       	pop	r0
    26ec:	0f 90       	pop	r0
    26ee:	cf 91       	pop	r28
    26f0:	df 91       	pop	r29
    26f2:	08 95       	ret

000026f4 <LCD_intgerToString>:

void LCD_intgerToString(int data)
{
    26f4:	df 93       	push	r29
    26f6:	cf 93       	push	r28
    26f8:	cd b7       	in	r28, 0x3d	; 61
    26fa:	de b7       	in	r29, 0x3e	; 62
    26fc:	66 97       	sbiw	r28, 0x16	; 22
    26fe:	0f b6       	in	r0, 0x3f	; 63
    2700:	f8 94       	cli
    2702:	de bf       	out	0x3e, r29	; 62
    2704:	0f be       	out	0x3f, r0	; 63
    2706:	cd bf       	out	0x3d, r28	; 61
    2708:	9e 8b       	std	Y+22, r25	; 0x16
    270a:	8d 8b       	std	Y+21, r24	; 0x15
   char buff[20]; /* String to hold the ASCII result */
   itoa(data,buff,10); /* 10 for decimal */
    270c:	8d 89       	ldd	r24, Y+21	; 0x15
    270e:	9e 89       	ldd	r25, Y+22	; 0x16
    2710:	9e 01       	movw	r18, r28
    2712:	2f 5f       	subi	r18, 0xFF	; 255
    2714:	3f 4f       	sbci	r19, 0xFF	; 255
    2716:	b9 01       	movw	r22, r18
    2718:	4a e0       	ldi	r20, 0x0A	; 10
    271a:	50 e0       	ldi	r21, 0x00	; 0
    271c:	0e 94 6c 19 	call	0x32d8	; 0x32d8 <itoa>
   LCD_displayString(buff);
    2720:	ce 01       	movw	r24, r28
    2722:	01 96       	adiw	r24, 0x01	; 1
    2724:	0e 94 f6 12 	call	0x25ec	; 0x25ec <LCD_displayString>
}
    2728:	66 96       	adiw	r28, 0x16	; 22
    272a:	0f b6       	in	r0, 0x3f	; 63
    272c:	f8 94       	cli
    272e:	de bf       	out	0x3e, r29	; 62
    2730:	0f be       	out	0x3f, r0	; 63
    2732:	cd bf       	out	0x3d, r28	; 61
    2734:	cf 91       	pop	r28
    2736:	df 91       	pop	r29
    2738:	08 95       	ret

0000273a <LCD_clearScreen>:

void LCD_clearScreen(void)
{
    273a:	df 93       	push	r29
    273c:	cf 93       	push	r28
    273e:	cd b7       	in	r28, 0x3d	; 61
    2740:	de b7       	in	r29, 0x3e	; 62
	LCD_sendCommand(CLEAR_COMMAND); /* Clear display */
    2742:	81 e0       	ldi	r24, 0x01	; 1
    2744:	0e 94 fe 0e 	call	0x1dfc	; 0x1dfc <LCD_sendCommand>
}
    2748:	cf 91       	pop	r28
    274a:	df 91       	pop	r29
    274c:	08 95       	ret

0000274e <__vector_9>:
/************************************************************************************
 *                                     TIMER0                                       *
 ************************************************************************************/

ISR(TIMER0_OVF_vect)
{
    274e:	1f 92       	push	r1
    2750:	0f 92       	push	r0
    2752:	0f b6       	in	r0, 0x3f	; 63
    2754:	0f 92       	push	r0
    2756:	11 24       	eor	r1, r1
    2758:	2f 93       	push	r18
    275a:	3f 93       	push	r19
    275c:	4f 93       	push	r20
    275e:	5f 93       	push	r21
    2760:	6f 93       	push	r22
    2762:	7f 93       	push	r23
    2764:	8f 93       	push	r24
    2766:	9f 93       	push	r25
    2768:	af 93       	push	r26
    276a:	bf 93       	push	r27
    276c:	ef 93       	push	r30
    276e:	ff 93       	push	r31
    2770:	df 93       	push	r29
    2772:	cf 93       	push	r28
    2774:	cd b7       	in	r28, 0x3d	; 61
    2776:	de b7       	in	r29, 0x3e	; 62
	/* Check if Pointer is not a NULL one, to avoid Segmentation fault */
	if(g_callBackPtrTimer0 != NULL_PTR)
    2778:	80 91 36 02 	lds	r24, 0x0236
    277c:	90 91 37 02 	lds	r25, 0x0237
    2780:	00 97       	sbiw	r24, 0x00	; 0
    2782:	29 f0       	breq	.+10     	; 0x278e <__vector_9+0x40>
	{
		/*
		 * Call the callback function in the application after the overflow has
		 * occurred in TIMER0 (NORMAL MODE)
		 */
		(*g_callBackPtrTimer0)();
    2784:	e0 91 36 02 	lds	r30, 0x0236
    2788:	f0 91 37 02 	lds	r31, 0x0237
    278c:	09 95       	icall
	}
}
    278e:	cf 91       	pop	r28
    2790:	df 91       	pop	r29
    2792:	ff 91       	pop	r31
    2794:	ef 91       	pop	r30
    2796:	bf 91       	pop	r27
    2798:	af 91       	pop	r26
    279a:	9f 91       	pop	r25
    279c:	8f 91       	pop	r24
    279e:	7f 91       	pop	r23
    27a0:	6f 91       	pop	r22
    27a2:	5f 91       	pop	r21
    27a4:	4f 91       	pop	r20
    27a6:	3f 91       	pop	r19
    27a8:	2f 91       	pop	r18
    27aa:	0f 90       	pop	r0
    27ac:	0f be       	out	0x3f, r0	; 63
    27ae:	0f 90       	pop	r0
    27b0:	1f 90       	pop	r1
    27b2:	18 95       	reti

000027b4 <__vector_19>:

ISR(TIMER0_COMP_vect)
{
    27b4:	1f 92       	push	r1
    27b6:	0f 92       	push	r0
    27b8:	0f b6       	in	r0, 0x3f	; 63
    27ba:	0f 92       	push	r0
    27bc:	11 24       	eor	r1, r1
    27be:	2f 93       	push	r18
    27c0:	3f 93       	push	r19
    27c2:	4f 93       	push	r20
    27c4:	5f 93       	push	r21
    27c6:	6f 93       	push	r22
    27c8:	7f 93       	push	r23
    27ca:	8f 93       	push	r24
    27cc:	9f 93       	push	r25
    27ce:	af 93       	push	r26
    27d0:	bf 93       	push	r27
    27d2:	ef 93       	push	r30
    27d4:	ff 93       	push	r31
    27d6:	df 93       	push	r29
    27d8:	cf 93       	push	r28
    27da:	cd b7       	in	r28, 0x3d	; 61
    27dc:	de b7       	in	r29, 0x3e	; 62
	/* Check if Pointer is not a NULL one, to avoid Segmentation fault */
	if(g_callBackPtrTimer0 != NULL_PTR)
    27de:	80 91 36 02 	lds	r24, 0x0236
    27e2:	90 91 37 02 	lds	r25, 0x0237
    27e6:	00 97       	sbiw	r24, 0x00	; 0
    27e8:	29 f0       	breq	.+10     	; 0x27f4 <__vector_19+0x40>
	{
		/*
		 * Call the callback function in the application after the compare match has
		 * occurred in TIMER0 (COMPARE MODE)
		 */
		(*g_callBackPtrTimer0)();
    27ea:	e0 91 36 02 	lds	r30, 0x0236
    27ee:	f0 91 37 02 	lds	r31, 0x0237
    27f2:	09 95       	icall
	}
}
    27f4:	cf 91       	pop	r28
    27f6:	df 91       	pop	r29
    27f8:	ff 91       	pop	r31
    27fa:	ef 91       	pop	r30
    27fc:	bf 91       	pop	r27
    27fe:	af 91       	pop	r26
    2800:	9f 91       	pop	r25
    2802:	8f 91       	pop	r24
    2804:	7f 91       	pop	r23
    2806:	6f 91       	pop	r22
    2808:	5f 91       	pop	r21
    280a:	4f 91       	pop	r20
    280c:	3f 91       	pop	r19
    280e:	2f 91       	pop	r18
    2810:	0f 90       	pop	r0
    2812:	0f be       	out	0x3f, r0	; 63
    2814:	0f 90       	pop	r0
    2816:	1f 90       	pop	r1
    2818:	18 95       	reti

0000281a <__vector_8>:
/************************************************************************************
 *                                       TIMER1                                     *
 ************************************************************************************/

ISR(TIMER1_OVF_vect)
{
    281a:	1f 92       	push	r1
    281c:	0f 92       	push	r0
    281e:	0f b6       	in	r0, 0x3f	; 63
    2820:	0f 92       	push	r0
    2822:	11 24       	eor	r1, r1
    2824:	2f 93       	push	r18
    2826:	3f 93       	push	r19
    2828:	4f 93       	push	r20
    282a:	5f 93       	push	r21
    282c:	6f 93       	push	r22
    282e:	7f 93       	push	r23
    2830:	8f 93       	push	r24
    2832:	9f 93       	push	r25
    2834:	af 93       	push	r26
    2836:	bf 93       	push	r27
    2838:	ef 93       	push	r30
    283a:	ff 93       	push	r31
    283c:	df 93       	push	r29
    283e:	cf 93       	push	r28
    2840:	cd b7       	in	r28, 0x3d	; 61
    2842:	de b7       	in	r29, 0x3e	; 62
	/* Check if Pointer is not a NULL one, to avoid Segmentation fault */
	if(g_callBackPtrTimer1 != NULL_PTR)
    2844:	80 91 38 02 	lds	r24, 0x0238
    2848:	90 91 39 02 	lds	r25, 0x0239
    284c:	00 97       	sbiw	r24, 0x00	; 0
    284e:	29 f0       	breq	.+10     	; 0x285a <__vector_8+0x40>
	{
		/*
		 * Call the callback function in the application after the overflow has
		 * occurred in TIMER1 (NORMAL MODE)
		 */
		(*g_callBackPtrTimer1)();
    2850:	e0 91 38 02 	lds	r30, 0x0238
    2854:	f0 91 39 02 	lds	r31, 0x0239
    2858:	09 95       	icall
	}
}
    285a:	cf 91       	pop	r28
    285c:	df 91       	pop	r29
    285e:	ff 91       	pop	r31
    2860:	ef 91       	pop	r30
    2862:	bf 91       	pop	r27
    2864:	af 91       	pop	r26
    2866:	9f 91       	pop	r25
    2868:	8f 91       	pop	r24
    286a:	7f 91       	pop	r23
    286c:	6f 91       	pop	r22
    286e:	5f 91       	pop	r21
    2870:	4f 91       	pop	r20
    2872:	3f 91       	pop	r19
    2874:	2f 91       	pop	r18
    2876:	0f 90       	pop	r0
    2878:	0f be       	out	0x3f, r0	; 63
    287a:	0f 90       	pop	r0
    287c:	1f 90       	pop	r1
    287e:	18 95       	reti

00002880 <__vector_6>:

ISR(TIMER1_COMPA_vect)
{
    2880:	1f 92       	push	r1
    2882:	0f 92       	push	r0
    2884:	0f b6       	in	r0, 0x3f	; 63
    2886:	0f 92       	push	r0
    2888:	11 24       	eor	r1, r1
    288a:	2f 93       	push	r18
    288c:	3f 93       	push	r19
    288e:	4f 93       	push	r20
    2890:	5f 93       	push	r21
    2892:	6f 93       	push	r22
    2894:	7f 93       	push	r23
    2896:	8f 93       	push	r24
    2898:	9f 93       	push	r25
    289a:	af 93       	push	r26
    289c:	bf 93       	push	r27
    289e:	ef 93       	push	r30
    28a0:	ff 93       	push	r31
    28a2:	df 93       	push	r29
    28a4:	cf 93       	push	r28
    28a6:	cd b7       	in	r28, 0x3d	; 61
    28a8:	de b7       	in	r29, 0x3e	; 62
	/* Check if Pointer is not a NULL one, to avoid Segmentation fault */
	if(g_callBackPtrTimer1 != NULL_PTR)
    28aa:	80 91 38 02 	lds	r24, 0x0238
    28ae:	90 91 39 02 	lds	r25, 0x0239
    28b2:	00 97       	sbiw	r24, 0x00	; 0
    28b4:	29 f0       	breq	.+10     	; 0x28c0 <__vector_6+0x40>
	{
		/*
		 * Call the callback function in the application after the compare match has
		 * occurred in TIMER1 Channel A (COMPARE MODE)
		 */
		(*g_callBackPtrTimer1)();
    28b6:	e0 91 38 02 	lds	r30, 0x0238
    28ba:	f0 91 39 02 	lds	r31, 0x0239
    28be:	09 95       	icall
	}
}
    28c0:	cf 91       	pop	r28
    28c2:	df 91       	pop	r29
    28c4:	ff 91       	pop	r31
    28c6:	ef 91       	pop	r30
    28c8:	bf 91       	pop	r27
    28ca:	af 91       	pop	r26
    28cc:	9f 91       	pop	r25
    28ce:	8f 91       	pop	r24
    28d0:	7f 91       	pop	r23
    28d2:	6f 91       	pop	r22
    28d4:	5f 91       	pop	r21
    28d6:	4f 91       	pop	r20
    28d8:	3f 91       	pop	r19
    28da:	2f 91       	pop	r18
    28dc:	0f 90       	pop	r0
    28de:	0f be       	out	0x3f, r0	; 63
    28e0:	0f 90       	pop	r0
    28e2:	1f 90       	pop	r1
    28e4:	18 95       	reti

000028e6 <__vector_4>:
/************************************************************************************
 *                                       TIMER2                                     *
 ************************************************************************************/

ISR(TIMER2_OVF_vect)
{
    28e6:	1f 92       	push	r1
    28e8:	0f 92       	push	r0
    28ea:	0f b6       	in	r0, 0x3f	; 63
    28ec:	0f 92       	push	r0
    28ee:	11 24       	eor	r1, r1
    28f0:	2f 93       	push	r18
    28f2:	3f 93       	push	r19
    28f4:	4f 93       	push	r20
    28f6:	5f 93       	push	r21
    28f8:	6f 93       	push	r22
    28fa:	7f 93       	push	r23
    28fc:	8f 93       	push	r24
    28fe:	9f 93       	push	r25
    2900:	af 93       	push	r26
    2902:	bf 93       	push	r27
    2904:	ef 93       	push	r30
    2906:	ff 93       	push	r31
    2908:	df 93       	push	r29
    290a:	cf 93       	push	r28
    290c:	cd b7       	in	r28, 0x3d	; 61
    290e:	de b7       	in	r29, 0x3e	; 62
	/* Check if Pointer is not a NULL one, to avoid Segmentation fault */
	if(g_callBackPtrTimer2 != NULL_PTR)
    2910:	80 91 3a 02 	lds	r24, 0x023A
    2914:	90 91 3b 02 	lds	r25, 0x023B
    2918:	00 97       	sbiw	r24, 0x00	; 0
    291a:	29 f0       	breq	.+10     	; 0x2926 <__vector_4+0x40>
	{
		/*
		 * Call the callback function in the application after the overflow has
		 * occurred in TIMER2 (NORMAL MODE)
		 */
		(*g_callBackPtrTimer2)();
    291c:	e0 91 3a 02 	lds	r30, 0x023A
    2920:	f0 91 3b 02 	lds	r31, 0x023B
    2924:	09 95       	icall
	}
}
    2926:	cf 91       	pop	r28
    2928:	df 91       	pop	r29
    292a:	ff 91       	pop	r31
    292c:	ef 91       	pop	r30
    292e:	bf 91       	pop	r27
    2930:	af 91       	pop	r26
    2932:	9f 91       	pop	r25
    2934:	8f 91       	pop	r24
    2936:	7f 91       	pop	r23
    2938:	6f 91       	pop	r22
    293a:	5f 91       	pop	r21
    293c:	4f 91       	pop	r20
    293e:	3f 91       	pop	r19
    2940:	2f 91       	pop	r18
    2942:	0f 90       	pop	r0
    2944:	0f be       	out	0x3f, r0	; 63
    2946:	0f 90       	pop	r0
    2948:	1f 90       	pop	r1
    294a:	18 95       	reti

0000294c <__vector_3>:

ISR(TIMER2_COMP_vect)
{
    294c:	1f 92       	push	r1
    294e:	0f 92       	push	r0
    2950:	0f b6       	in	r0, 0x3f	; 63
    2952:	0f 92       	push	r0
    2954:	11 24       	eor	r1, r1
    2956:	2f 93       	push	r18
    2958:	3f 93       	push	r19
    295a:	4f 93       	push	r20
    295c:	5f 93       	push	r21
    295e:	6f 93       	push	r22
    2960:	7f 93       	push	r23
    2962:	8f 93       	push	r24
    2964:	9f 93       	push	r25
    2966:	af 93       	push	r26
    2968:	bf 93       	push	r27
    296a:	ef 93       	push	r30
    296c:	ff 93       	push	r31
    296e:	df 93       	push	r29
    2970:	cf 93       	push	r28
    2972:	cd b7       	in	r28, 0x3d	; 61
    2974:	de b7       	in	r29, 0x3e	; 62
	/* Check if Pointer is not a NULL one, to avoid Segmentation fault */
	if(g_callBackPtrTimer2 != NULL_PTR)
    2976:	80 91 3a 02 	lds	r24, 0x023A
    297a:	90 91 3b 02 	lds	r25, 0x023B
    297e:	00 97       	sbiw	r24, 0x00	; 0
    2980:	29 f0       	breq	.+10     	; 0x298c <__vector_3+0x40>
	{
		/*
		 * Call the callback function in the application after the compare match has
		 * occurred in TIMER2 (COMPARE MODE)
		 */
		(*g_callBackPtrTimer2)();
    2982:	e0 91 3a 02 	lds	r30, 0x023A
    2986:	f0 91 3b 02 	lds	r31, 0x023B
    298a:	09 95       	icall
	}
}
    298c:	cf 91       	pop	r28
    298e:	df 91       	pop	r29
    2990:	ff 91       	pop	r31
    2992:	ef 91       	pop	r30
    2994:	bf 91       	pop	r27
    2996:	af 91       	pop	r26
    2998:	9f 91       	pop	r25
    299a:	8f 91       	pop	r24
    299c:	7f 91       	pop	r23
    299e:	6f 91       	pop	r22
    29a0:	5f 91       	pop	r21
    29a2:	4f 91       	pop	r20
    29a4:	3f 91       	pop	r19
    29a6:	2f 91       	pop	r18
    29a8:	0f 90       	pop	r0
    29aa:	0f be       	out	0x3f, r0	; 63
    29ac:	0f 90       	pop	r0
    29ae:	1f 90       	pop	r1
    29b0:	18 95       	reti

000029b2 <TIMER_init>:
 * [in/out]		 	None
 *
 * [Returns]:       None
 *************************************************************************************/
void TIMER_init(const TIMER_ConfigType * Config_Ptr)
{
    29b2:	df 93       	push	r29
    29b4:	cf 93       	push	r28
    29b6:	cd b7       	in	r28, 0x3d	; 61
    29b8:	de b7       	in	r29, 0x3e	; 62
    29ba:	2a 97       	sbiw	r28, 0x0a	; 10
    29bc:	0f b6       	in	r0, 0x3f	; 63
    29be:	f8 94       	cli
    29c0:	de bf       	out	0x3e, r29	; 62
    29c2:	0f be       	out	0x3f, r0	; 63
    29c4:	cd bf       	out	0x3d, r28	; 61
    29c6:	9a 83       	std	Y+2, r25	; 0x02
    29c8:	89 83       	std	Y+1, r24	; 0x01
	switch(Config_Ptr -> timer_ID)
    29ca:	e9 81       	ldd	r30, Y+1	; 0x01
    29cc:	fa 81       	ldd	r31, Y+2	; 0x02
    29ce:	84 81       	ldd	r24, Z+4	; 0x04
    29d0:	28 2f       	mov	r18, r24
    29d2:	30 e0       	ldi	r19, 0x00	; 0
    29d4:	3a 87       	std	Y+10, r19	; 0x0a
    29d6:	29 87       	std	Y+9, r18	; 0x09
    29d8:	89 85       	ldd	r24, Y+9	; 0x09
    29da:	9a 85       	ldd	r25, Y+10	; 0x0a
    29dc:	81 30       	cpi	r24, 0x01	; 1
    29de:	91 05       	cpc	r25, r1
    29e0:	09 f4       	brne	.+2      	; 0x29e4 <TIMER_init+0x32>
    29e2:	63 c0       	rjmp	.+198    	; 0x2aaa <TIMER_init+0xf8>
    29e4:	29 85       	ldd	r18, Y+9	; 0x09
    29e6:	3a 85       	ldd	r19, Y+10	; 0x0a
    29e8:	22 30       	cpi	r18, 0x02	; 2
    29ea:	31 05       	cpc	r19, r1
    29ec:	09 f4       	brne	.+2      	; 0x29f0 <TIMER_init+0x3e>
    29ee:	c5 c0       	rjmp	.+394    	; 0x2b7a <TIMER_init+0x1c8>
    29f0:	89 85       	ldd	r24, Y+9	; 0x09
    29f2:	9a 85       	ldd	r25, Y+10	; 0x0a
    29f4:	00 97       	sbiw	r24, 0x00	; 0
    29f6:	09 f0       	breq	.+2      	; 0x29fa <TIMER_init+0x48>
    29f8:	17 c1       	rjmp	.+558    	; 0x2c28 <TIMER_init+0x276>

		/*
		 * Clear All timer register before doing any operation,
		 * to ensure that timer will work correctly
		 */
		TCNT0 = 0x00;
    29fa:	e2 e5       	ldi	r30, 0x52	; 82
    29fc:	f0 e0       	ldi	r31, 0x00	; 0
    29fe:	10 82       	st	Z, r1
		TCCR0 = 0x00;
    2a00:	e3 e5       	ldi	r30, 0x53	; 83
    2a02:	f0 e0       	ldi	r31, 0x00	; 0
    2a04:	10 82       	st	Z, r1
		OCR0  = 0x00;
    2a06:	ec e5       	ldi	r30, 0x5C	; 92
    2a08:	f0 e0       	ldi	r31, 0x00	; 0
    2a0a:	10 82       	st	Z, r1
		/*
		 * Insert the required initial value in the TCNT0 register
		 * TIMER0 is (8-bit), so mask the initial value with 0xFF to ensure that it
		 * does not exceed 255
		 */
		TCNT0 = ( (Config_Ptr -> intialValue) & 0xFF);
    2a0c:	a2 e5       	ldi	r26, 0x52	; 82
    2a0e:	b0 e0       	ldi	r27, 0x00	; 0
    2a10:	e9 81       	ldd	r30, Y+1	; 0x01
    2a12:	fa 81       	ldd	r31, Y+2	; 0x02
    2a14:	80 81       	ld	r24, Z
    2a16:	91 81       	ldd	r25, Z+1	; 0x01
    2a18:	8c 93       	st	X, r24

		switch(Config_Ptr -> timer_Mode)
    2a1a:	e9 81       	ldd	r30, Y+1	; 0x01
    2a1c:	fa 81       	ldd	r31, Y+2	; 0x02
    2a1e:	85 81       	ldd	r24, Z+5	; 0x05
    2a20:	28 2f       	mov	r18, r24
    2a22:	30 e0       	ldi	r19, 0x00	; 0
    2a24:	38 87       	std	Y+8, r19	; 0x08
    2a26:	2f 83       	std	Y+7, r18	; 0x07
    2a28:	8f 81       	ldd	r24, Y+7	; 0x07
    2a2a:	98 85       	ldd	r25, Y+8	; 0x08
    2a2c:	00 97       	sbiw	r24, 0x00	; 0
    2a2e:	31 f0       	breq	.+12     	; 0x2a3c <TIMER_init+0x8a>
    2a30:	2f 81       	ldd	r18, Y+7	; 0x07
    2a32:	38 85       	ldd	r19, Y+8	; 0x08
    2a34:	21 30       	cpi	r18, 0x01	; 1
    2a36:	31 05       	cpc	r19, r1
    2a38:	c9 f0       	breq	.+50     	; 0x2a6c <TIMER_init+0xba>
    2a3a:	f6 c0       	rjmp	.+492    	; 0x2c28 <TIMER_init+0x276>
		 * 	  in TCCR0 register
		 * 	- Enable TIMER0 Overflow Interrupt (TOIE0) bit in TIMSK register
		 */
		case NORMAL:

			TCCR0  = (1 << FOC0);
    2a3c:	e3 e5       	ldi	r30, 0x53	; 83
    2a3e:	f0 e0       	ldi	r31, 0x00	; 0
    2a40:	80 e8       	ldi	r24, 0x80	; 128
    2a42:	80 83       	st	Z, r24
			TCCR0  = (TCCR0 & 0xF8) | (Config_Ptr -> timer_Clock);
    2a44:	a3 e5       	ldi	r26, 0x53	; 83
    2a46:	b0 e0       	ldi	r27, 0x00	; 0
    2a48:	e3 e5       	ldi	r30, 0x53	; 83
    2a4a:	f0 e0       	ldi	r31, 0x00	; 0
    2a4c:	80 81       	ld	r24, Z
    2a4e:	98 2f       	mov	r25, r24
    2a50:	98 7f       	andi	r25, 0xF8	; 248
    2a52:	e9 81       	ldd	r30, Y+1	; 0x01
    2a54:	fa 81       	ldd	r31, Y+2	; 0x02
    2a56:	86 81       	ldd	r24, Z+6	; 0x06
    2a58:	89 2b       	or	r24, r25
    2a5a:	8c 93       	st	X, r24
			TIMSK |= (1 << TOIE0);
    2a5c:	a9 e5       	ldi	r26, 0x59	; 89
    2a5e:	b0 e0       	ldi	r27, 0x00	; 0
    2a60:	e9 e5       	ldi	r30, 0x59	; 89
    2a62:	f0 e0       	ldi	r31, 0x00	; 0
    2a64:	80 81       	ld	r24, Z
    2a66:	81 60       	ori	r24, 0x01	; 1
    2a68:	8c 93       	st	X, r24
    2a6a:	de c0       	rjmp	.+444    	; 0x2c28 <TIMER_init+0x276>
		 * 	  in TCCR0 register
		 * 	- Enable TIMER0 Compare Match Interrupt (OCIE0) bit in TIMSK register
		 */
		case COMPARE:

			OCR0   = ( (Config_Ptr -> compareValue) & 0xFF);
    2a6c:	ac e5       	ldi	r26, 0x5C	; 92
    2a6e:	b0 e0       	ldi	r27, 0x00	; 0
    2a70:	e9 81       	ldd	r30, Y+1	; 0x01
    2a72:	fa 81       	ldd	r31, Y+2	; 0x02
    2a74:	82 81       	ldd	r24, Z+2	; 0x02
    2a76:	93 81       	ldd	r25, Z+3	; 0x03
    2a78:	8c 93       	st	X, r24
			TCCR0  = (1 << FOC0) | (1 << WGM01);
    2a7a:	e3 e5       	ldi	r30, 0x53	; 83
    2a7c:	f0 e0       	ldi	r31, 0x00	; 0
    2a7e:	88 e8       	ldi	r24, 0x88	; 136
    2a80:	80 83       	st	Z, r24
			TCCR0  = (TCCR0 & 0xF8) | (Config_Ptr -> timer_Clock);
    2a82:	a3 e5       	ldi	r26, 0x53	; 83
    2a84:	b0 e0       	ldi	r27, 0x00	; 0
    2a86:	e3 e5       	ldi	r30, 0x53	; 83
    2a88:	f0 e0       	ldi	r31, 0x00	; 0
    2a8a:	80 81       	ld	r24, Z
    2a8c:	98 2f       	mov	r25, r24
    2a8e:	98 7f       	andi	r25, 0xF8	; 248
    2a90:	e9 81       	ldd	r30, Y+1	; 0x01
    2a92:	fa 81       	ldd	r31, Y+2	; 0x02
    2a94:	86 81       	ldd	r24, Z+6	; 0x06
    2a96:	89 2b       	or	r24, r25
    2a98:	8c 93       	st	X, r24
			TIMSK |= (1 << OCIE0);
    2a9a:	a9 e5       	ldi	r26, 0x59	; 89
    2a9c:	b0 e0       	ldi	r27, 0x00	; 0
    2a9e:	e9 e5       	ldi	r30, 0x59	; 89
    2aa0:	f0 e0       	ldi	r31, 0x00	; 0
    2aa2:	80 81       	ld	r24, Z
    2aa4:	82 60       	ori	r24, 0x02	; 2
    2aa6:	8c 93       	st	X, r24
    2aa8:	bf c0       	rjmp	.+382    	; 0x2c28 <TIMER_init+0x276>

		/*
		 * Clear All timer register before doing any operation,
		 * to ensure that timer will work correctly
		 */
		TCNT1  = 0x0000;
    2aaa:	ec e4       	ldi	r30, 0x4C	; 76
    2aac:	f0 e0       	ldi	r31, 0x00	; 0
    2aae:	11 82       	std	Z+1, r1	; 0x01
    2ab0:	10 82       	st	Z, r1
		OCR1A  = 0x0000;
    2ab2:	ea e4       	ldi	r30, 0x4A	; 74
    2ab4:	f0 e0       	ldi	r31, 0x00	; 0
    2ab6:	11 82       	std	Z+1, r1	; 0x01
    2ab8:	10 82       	st	Z, r1
		TCCR1A = 0x00;
    2aba:	ef e4       	ldi	r30, 0x4F	; 79
    2abc:	f0 e0       	ldi	r31, 0x00	; 0
    2abe:	10 82       	st	Z, r1
		TCCR1B = 0x00;
    2ac0:	ee e4       	ldi	r30, 0x4E	; 78
    2ac2:	f0 e0       	ldi	r31, 0x00	; 0
    2ac4:	10 82       	st	Z, r1
		/*
		 * Insert the required initial value in the TCNT1 register
		 * TIMER1 is (16-bit), so mask the initial value with 0xFFFF to ensure that it
		 * does not exceed 65535
		 */
		TCNT1 = ( (Config_Ptr -> intialValue) & 0xFFFF);
    2ac6:	ac e4       	ldi	r26, 0x4C	; 76
    2ac8:	b0 e0       	ldi	r27, 0x00	; 0
    2aca:	e9 81       	ldd	r30, Y+1	; 0x01
    2acc:	fa 81       	ldd	r31, Y+2	; 0x02
    2ace:	80 81       	ld	r24, Z
    2ad0:	91 81       	ldd	r25, Z+1	; 0x01
    2ad2:	11 96       	adiw	r26, 0x01	; 1
    2ad4:	9c 93       	st	X, r25
    2ad6:	8e 93       	st	-X, r24

		switch(Config_Ptr -> timer_Mode)
    2ad8:	e9 81       	ldd	r30, Y+1	; 0x01
    2ada:	fa 81       	ldd	r31, Y+2	; 0x02
    2adc:	85 81       	ldd	r24, Z+5	; 0x05
    2ade:	28 2f       	mov	r18, r24
    2ae0:	30 e0       	ldi	r19, 0x00	; 0
    2ae2:	3e 83       	std	Y+6, r19	; 0x06
    2ae4:	2d 83       	std	Y+5, r18	; 0x05
    2ae6:	8d 81       	ldd	r24, Y+5	; 0x05
    2ae8:	9e 81       	ldd	r25, Y+6	; 0x06
    2aea:	00 97       	sbiw	r24, 0x00	; 0
    2aec:	31 f0       	breq	.+12     	; 0x2afa <TIMER_init+0x148>
    2aee:	2d 81       	ldd	r18, Y+5	; 0x05
    2af0:	3e 81       	ldd	r19, Y+6	; 0x06
    2af2:	21 30       	cpi	r18, 0x01	; 1
    2af4:	31 05       	cpc	r19, r1
    2af6:	c9 f0       	breq	.+50     	; 0x2b2a <TIMER_init+0x178>
    2af8:	97 c0       	rjmp	.+302    	; 0x2c28 <TIMER_init+0x276>
		 * 	  in TCCR1B register
		 * 	- Enable TIMER1 Overflow Interrupt (TOIE1) bit in TIMSK register
		 */
		case NORMAL:

			TCCR1A = (1 << FOC1A)  | (1 << FOC1B);
    2afa:	ef e4       	ldi	r30, 0x4F	; 79
    2afc:	f0 e0       	ldi	r31, 0x00	; 0
    2afe:	8c e0       	ldi	r24, 0x0C	; 12
    2b00:	80 83       	st	Z, r24
			TCCR1B  = (TCCR1B & 0xF8) | (Config_Ptr -> timer_Clock);
    2b02:	ae e4       	ldi	r26, 0x4E	; 78
    2b04:	b0 e0       	ldi	r27, 0x00	; 0
    2b06:	ee e4       	ldi	r30, 0x4E	; 78
    2b08:	f0 e0       	ldi	r31, 0x00	; 0
    2b0a:	80 81       	ld	r24, Z
    2b0c:	98 2f       	mov	r25, r24
    2b0e:	98 7f       	andi	r25, 0xF8	; 248
    2b10:	e9 81       	ldd	r30, Y+1	; 0x01
    2b12:	fa 81       	ldd	r31, Y+2	; 0x02
    2b14:	86 81       	ldd	r24, Z+6	; 0x06
    2b16:	89 2b       	or	r24, r25
    2b18:	8c 93       	st	X, r24
			TIMSK |= (1 << TOIE1);
    2b1a:	a9 e5       	ldi	r26, 0x59	; 89
    2b1c:	b0 e0       	ldi	r27, 0x00	; 0
    2b1e:	e9 e5       	ldi	r30, 0x59	; 89
    2b20:	f0 e0       	ldi	r31, 0x00	; 0
    2b22:	80 81       	ld	r24, Z
    2b24:	84 60       	ori	r24, 0x04	; 4
    2b26:	8c 93       	st	X, r24
    2b28:	7f c0       	rjmp	.+254    	; 0x2c28 <TIMER_init+0x276>
		 * 	  in TCCR1B register
		 * 	- Enable TIMER2 Compare Match Interrupt (OCIE1A) bit in TIMSK register
		 */
		case COMPARE:

			OCR1A   = ( (Config_Ptr -> compareValue) & 0xFFFF);
    2b2a:	aa e4       	ldi	r26, 0x4A	; 74
    2b2c:	b0 e0       	ldi	r27, 0x00	; 0
    2b2e:	e9 81       	ldd	r30, Y+1	; 0x01
    2b30:	fa 81       	ldd	r31, Y+2	; 0x02
    2b32:	82 81       	ldd	r24, Z+2	; 0x02
    2b34:	93 81       	ldd	r25, Z+3	; 0x03
    2b36:	11 96       	adiw	r26, 0x01	; 1
    2b38:	9c 93       	st	X, r25
    2b3a:	8e 93       	st	-X, r24
			TCCR1A  = (1 << FOC1A) | (1 << FOC1B);
    2b3c:	ef e4       	ldi	r30, 0x4F	; 79
    2b3e:	f0 e0       	ldi	r31, 0x00	; 0
    2b40:	8c e0       	ldi	r24, 0x0C	; 12
    2b42:	80 83       	st	Z, r24
			TCCR1B |= (1 << WGM12);
    2b44:	ae e4       	ldi	r26, 0x4E	; 78
    2b46:	b0 e0       	ldi	r27, 0x00	; 0
    2b48:	ee e4       	ldi	r30, 0x4E	; 78
    2b4a:	f0 e0       	ldi	r31, 0x00	; 0
    2b4c:	80 81       	ld	r24, Z
    2b4e:	88 60       	ori	r24, 0x08	; 8
    2b50:	8c 93       	st	X, r24
			TCCR1B  = (TCCR1B & 0xF8) | (Config_Ptr -> timer_Clock);
    2b52:	ae e4       	ldi	r26, 0x4E	; 78
    2b54:	b0 e0       	ldi	r27, 0x00	; 0
    2b56:	ee e4       	ldi	r30, 0x4E	; 78
    2b58:	f0 e0       	ldi	r31, 0x00	; 0
    2b5a:	80 81       	ld	r24, Z
    2b5c:	98 2f       	mov	r25, r24
    2b5e:	98 7f       	andi	r25, 0xF8	; 248
    2b60:	e9 81       	ldd	r30, Y+1	; 0x01
    2b62:	fa 81       	ldd	r31, Y+2	; 0x02
    2b64:	86 81       	ldd	r24, Z+6	; 0x06
    2b66:	89 2b       	or	r24, r25
    2b68:	8c 93       	st	X, r24
			TIMSK  |= (1 << OCIE1A);
    2b6a:	a9 e5       	ldi	r26, 0x59	; 89
    2b6c:	b0 e0       	ldi	r27, 0x00	; 0
    2b6e:	e9 e5       	ldi	r30, 0x59	; 89
    2b70:	f0 e0       	ldi	r31, 0x00	; 0
    2b72:	80 81       	ld	r24, Z
    2b74:	80 61       	ori	r24, 0x10	; 16
    2b76:	8c 93       	st	X, r24
    2b78:	57 c0       	rjmp	.+174    	; 0x2c28 <TIMER_init+0x276>

		/*
		 * Clear All timer register before doing any operation,
		 * to ensure that timer will work correctly
		 */
		TCNT2 = 0x00;
    2b7a:	e4 e4       	ldi	r30, 0x44	; 68
    2b7c:	f0 e0       	ldi	r31, 0x00	; 0
    2b7e:	10 82       	st	Z, r1
		TCCR2 = 0x00;
    2b80:	e5 e4       	ldi	r30, 0x45	; 69
    2b82:	f0 e0       	ldi	r31, 0x00	; 0
    2b84:	10 82       	st	Z, r1
		OCR2  = 0x00;
    2b86:	e3 e4       	ldi	r30, 0x43	; 67
    2b88:	f0 e0       	ldi	r31, 0x00	; 0
    2b8a:	10 82       	st	Z, r1
		/*
		 * Insert the required initial value in the TCNT2 register
		 * TIMER2 is (8-bit), so mask the initial value with 0xFF to ensure that it
	     * does not exceed 255
		 */
		TCNT2 = ( (Config_Ptr -> intialValue) & 0xFF);
    2b8c:	a4 e4       	ldi	r26, 0x44	; 68
    2b8e:	b0 e0       	ldi	r27, 0x00	; 0
    2b90:	e9 81       	ldd	r30, Y+1	; 0x01
    2b92:	fa 81       	ldd	r31, Y+2	; 0x02
    2b94:	80 81       	ld	r24, Z
    2b96:	91 81       	ldd	r25, Z+1	; 0x01
    2b98:	8c 93       	st	X, r24

		switch(Config_Ptr -> timer_Mode)
    2b9a:	e9 81       	ldd	r30, Y+1	; 0x01
    2b9c:	fa 81       	ldd	r31, Y+2	; 0x02
    2b9e:	85 81       	ldd	r24, Z+5	; 0x05
    2ba0:	28 2f       	mov	r18, r24
    2ba2:	30 e0       	ldi	r19, 0x00	; 0
    2ba4:	3c 83       	std	Y+4, r19	; 0x04
    2ba6:	2b 83       	std	Y+3, r18	; 0x03
    2ba8:	8b 81       	ldd	r24, Y+3	; 0x03
    2baa:	9c 81       	ldd	r25, Y+4	; 0x04
    2bac:	00 97       	sbiw	r24, 0x00	; 0
    2bae:	31 f0       	breq	.+12     	; 0x2bbc <TIMER_init+0x20a>
    2bb0:	2b 81       	ldd	r18, Y+3	; 0x03
    2bb2:	3c 81       	ldd	r19, Y+4	; 0x04
    2bb4:	21 30       	cpi	r18, 0x01	; 1
    2bb6:	31 05       	cpc	r19, r1
    2bb8:	c9 f0       	breq	.+50     	; 0x2bec <TIMER_init+0x23a>
    2bba:	36 c0       	rjmp	.+108    	; 0x2c28 <TIMER_init+0x276>
		 * 	  in TCCR2 register
		 * 	- Enable TIMER2 Overflow Interrupt (TOIE2) bit in TIMSK register
		 */
		case NORMAL:

			TCCR2  = (1 << FOC2);
    2bbc:	e5 e4       	ldi	r30, 0x45	; 69
    2bbe:	f0 e0       	ldi	r31, 0x00	; 0
    2bc0:	80 e8       	ldi	r24, 0x80	; 128
    2bc2:	80 83       	st	Z, r24
			TCCR2  = (TCCR2 & 0xF8) | (Config_Ptr -> timer_Clock);
    2bc4:	a5 e4       	ldi	r26, 0x45	; 69
    2bc6:	b0 e0       	ldi	r27, 0x00	; 0
    2bc8:	e5 e4       	ldi	r30, 0x45	; 69
    2bca:	f0 e0       	ldi	r31, 0x00	; 0
    2bcc:	80 81       	ld	r24, Z
    2bce:	98 2f       	mov	r25, r24
    2bd0:	98 7f       	andi	r25, 0xF8	; 248
    2bd2:	e9 81       	ldd	r30, Y+1	; 0x01
    2bd4:	fa 81       	ldd	r31, Y+2	; 0x02
    2bd6:	86 81       	ldd	r24, Z+6	; 0x06
    2bd8:	89 2b       	or	r24, r25
    2bda:	8c 93       	st	X, r24
			TIMSK |= (1 << TOIE2);
    2bdc:	a9 e5       	ldi	r26, 0x59	; 89
    2bde:	b0 e0       	ldi	r27, 0x00	; 0
    2be0:	e9 e5       	ldi	r30, 0x59	; 89
    2be2:	f0 e0       	ldi	r31, 0x00	; 0
    2be4:	80 81       	ld	r24, Z
    2be6:	80 64       	ori	r24, 0x40	; 64
    2be8:	8c 93       	st	X, r24
    2bea:	1e c0       	rjmp	.+60     	; 0x2c28 <TIMER_init+0x276>
		 * 	  in TCCR2 register
		 * 	- Enable TIMER2 Compare Match Interrupt (OCIE2) bit in TIMSK register
		 */
		case COMPARE:

			OCR2   = ( (Config_Ptr -> compareValue) & 0xFF);
    2bec:	a3 e4       	ldi	r26, 0x43	; 67
    2bee:	b0 e0       	ldi	r27, 0x00	; 0
    2bf0:	e9 81       	ldd	r30, Y+1	; 0x01
    2bf2:	fa 81       	ldd	r31, Y+2	; 0x02
    2bf4:	82 81       	ldd	r24, Z+2	; 0x02
    2bf6:	93 81       	ldd	r25, Z+3	; 0x03
    2bf8:	8c 93       	st	X, r24
			TCCR2  = (1 << FOC2) | (1 << WGM21);
    2bfa:	e5 e4       	ldi	r30, 0x45	; 69
    2bfc:	f0 e0       	ldi	r31, 0x00	; 0
    2bfe:	88 e8       	ldi	r24, 0x88	; 136
    2c00:	80 83       	st	Z, r24
			TCCR2  = (TCCR2 & 0xF8) | (Config_Ptr -> timer_Clock);
    2c02:	a5 e4       	ldi	r26, 0x45	; 69
    2c04:	b0 e0       	ldi	r27, 0x00	; 0
    2c06:	e5 e4       	ldi	r30, 0x45	; 69
    2c08:	f0 e0       	ldi	r31, 0x00	; 0
    2c0a:	80 81       	ld	r24, Z
    2c0c:	98 2f       	mov	r25, r24
    2c0e:	98 7f       	andi	r25, 0xF8	; 248
    2c10:	e9 81       	ldd	r30, Y+1	; 0x01
    2c12:	fa 81       	ldd	r31, Y+2	; 0x02
    2c14:	86 81       	ldd	r24, Z+6	; 0x06
    2c16:	89 2b       	or	r24, r25
    2c18:	8c 93       	st	X, r24
			TIMSK |= (1 << OCIE2);
    2c1a:	a9 e5       	ldi	r26, 0x59	; 89
    2c1c:	b0 e0       	ldi	r27, 0x00	; 0
    2c1e:	e9 e5       	ldi	r30, 0x59	; 89
    2c20:	f0 e0       	ldi	r31, 0x00	; 0
    2c22:	80 81       	ld	r24, Z
    2c24:	80 68       	ori	r24, 0x80	; 128
    2c26:	8c 93       	st	X, r24
			break;

		}	/* END CASE OF TIMER2 */
		break;
	}
}
    2c28:	2a 96       	adiw	r28, 0x0a	; 10
    2c2a:	0f b6       	in	r0, 0x3f	; 63
    2c2c:	f8 94       	cli
    2c2e:	de bf       	out	0x3e, r29	; 62
    2c30:	0f be       	out	0x3f, r0	; 63
    2c32:	cd bf       	out	0x3d, r28	; 61
    2c34:	cf 91       	pop	r28
    2c36:	df 91       	pop	r29
    2c38:	08 95       	ret

00002c3a <TIMER_setCallBack>:
 * [in/out]		 	None
 *
 * [Returns]:       None
 *************************************************************************************/
void TIMER_setCallBack(void(*a_ptr)(void), const TIMER_ID a_timerID)
{
    2c3a:	df 93       	push	r29
    2c3c:	cf 93       	push	r28
    2c3e:	00 d0       	rcall	.+0      	; 0x2c40 <TIMER_setCallBack+0x6>
    2c40:	00 d0       	rcall	.+0      	; 0x2c42 <TIMER_setCallBack+0x8>
    2c42:	0f 92       	push	r0
    2c44:	cd b7       	in	r28, 0x3d	; 61
    2c46:	de b7       	in	r29, 0x3e	; 62
    2c48:	9a 83       	std	Y+2, r25	; 0x02
    2c4a:	89 83       	std	Y+1, r24	; 0x01
    2c4c:	6b 83       	std	Y+3, r22	; 0x03
	switch(a_timerID)
    2c4e:	8b 81       	ldd	r24, Y+3	; 0x03
    2c50:	28 2f       	mov	r18, r24
    2c52:	30 e0       	ldi	r19, 0x00	; 0
    2c54:	3d 83       	std	Y+5, r19	; 0x05
    2c56:	2c 83       	std	Y+4, r18	; 0x04
    2c58:	8c 81       	ldd	r24, Y+4	; 0x04
    2c5a:	9d 81       	ldd	r25, Y+5	; 0x05
    2c5c:	81 30       	cpi	r24, 0x01	; 1
    2c5e:	91 05       	cpc	r25, r1
    2c60:	81 f0       	breq	.+32     	; 0x2c82 <TIMER_setCallBack+0x48>
    2c62:	2c 81       	ldd	r18, Y+4	; 0x04
    2c64:	3d 81       	ldd	r19, Y+5	; 0x05
    2c66:	22 30       	cpi	r18, 0x02	; 2
    2c68:	31 05       	cpc	r19, r1
    2c6a:	91 f0       	breq	.+36     	; 0x2c90 <TIMER_setCallBack+0x56>
    2c6c:	8c 81       	ldd	r24, Y+4	; 0x04
    2c6e:	9d 81       	ldd	r25, Y+5	; 0x05
    2c70:	00 97       	sbiw	r24, 0x00	; 0
    2c72:	a1 f4       	brne	.+40     	; 0x2c9c <TIMER_setCallBack+0x62>
	{

	case TIMER_0:

		/* Save the address of the Call back function of TIMER0 in a global variable */
		g_callBackPtrTimer0 = a_ptr;
    2c74:	89 81       	ldd	r24, Y+1	; 0x01
    2c76:	9a 81       	ldd	r25, Y+2	; 0x02
    2c78:	90 93 37 02 	sts	0x0237, r25
    2c7c:	80 93 36 02 	sts	0x0236, r24
    2c80:	0d c0       	rjmp	.+26     	; 0x2c9c <TIMER_setCallBack+0x62>
		break;

	case TIMER_1:

		/* Save the address of the Call back function of TIMER1 in a global variable */
		g_callBackPtrTimer1 = a_ptr;
    2c82:	89 81       	ldd	r24, Y+1	; 0x01
    2c84:	9a 81       	ldd	r25, Y+2	; 0x02
    2c86:	90 93 39 02 	sts	0x0239, r25
    2c8a:	80 93 38 02 	sts	0x0238, r24
    2c8e:	06 c0       	rjmp	.+12     	; 0x2c9c <TIMER_setCallBack+0x62>
		break;

	case TIMER_2:

		/* Save the address of the Call back function of TIMER2 in a global variable */
		g_callBackPtrTimer2 = a_ptr;
    2c90:	89 81       	ldd	r24, Y+1	; 0x01
    2c92:	9a 81       	ldd	r25, Y+2	; 0x02
    2c94:	90 93 3b 02 	sts	0x023B, r25
    2c98:	80 93 3a 02 	sts	0x023A, r24
		break;
	}
}
    2c9c:	0f 90       	pop	r0
    2c9e:	0f 90       	pop	r0
    2ca0:	0f 90       	pop	r0
    2ca2:	0f 90       	pop	r0
    2ca4:	0f 90       	pop	r0
    2ca6:	cf 91       	pop	r28
    2ca8:	df 91       	pop	r29
    2caa:	08 95       	ret

00002cac <TIMER_stop>:
 * [in/out]		 	None
 *
 * [Returns]:       None
 *******************************************************************************/
void TIMER_stop(const TIMER_ID a_timerID)
{
    2cac:	df 93       	push	r29
    2cae:	cf 93       	push	r28
    2cb0:	00 d0       	rcall	.+0      	; 0x2cb2 <TIMER_stop+0x6>
    2cb2:	0f 92       	push	r0
    2cb4:	cd b7       	in	r28, 0x3d	; 61
    2cb6:	de b7       	in	r29, 0x3e	; 62
    2cb8:	89 83       	std	Y+1, r24	; 0x01
	switch(a_timerID)
    2cba:	89 81       	ldd	r24, Y+1	; 0x01
    2cbc:	28 2f       	mov	r18, r24
    2cbe:	30 e0       	ldi	r19, 0x00	; 0
    2cc0:	3b 83       	std	Y+3, r19	; 0x03
    2cc2:	2a 83       	std	Y+2, r18	; 0x02
    2cc4:	8a 81       	ldd	r24, Y+2	; 0x02
    2cc6:	9b 81       	ldd	r25, Y+3	; 0x03
    2cc8:	81 30       	cpi	r24, 0x01	; 1
    2cca:	91 05       	cpc	r25, r1
    2ccc:	89 f0       	breq	.+34     	; 0x2cf0 <TIMER_stop+0x44>
    2cce:	2a 81       	ldd	r18, Y+2	; 0x02
    2cd0:	3b 81       	ldd	r19, Y+3	; 0x03
    2cd2:	22 30       	cpi	r18, 0x02	; 2
    2cd4:	31 05       	cpc	r19, r1
    2cd6:	a1 f0       	breq	.+40     	; 0x2d00 <TIMER_stop+0x54>
    2cd8:	8a 81       	ldd	r24, Y+2	; 0x02
    2cda:	9b 81       	ldd	r25, Y+3	; 0x03
    2cdc:	00 97       	sbiw	r24, 0x00	; 0
    2cde:	b9 f4       	brne	.+46     	; 0x2d0e <TIMER_stop+0x62>
	{

	case TIMER_0:

		TCCR0  = ( TCCR0 & 0xF8 );	/* Clear Clock bits in TIMER0 */
    2ce0:	a3 e5       	ldi	r26, 0x53	; 83
    2ce2:	b0 e0       	ldi	r27, 0x00	; 0
    2ce4:	e3 e5       	ldi	r30, 0x53	; 83
    2ce6:	f0 e0       	ldi	r31, 0x00	; 0
    2ce8:	80 81       	ld	r24, Z
    2cea:	88 7f       	andi	r24, 0xF8	; 248
    2cec:	8c 93       	st	X, r24
    2cee:	0f c0       	rjmp	.+30     	; 0x2d0e <TIMER_stop+0x62>
		break;

	case TIMER_1:

		TCCR1B = (TCCR1B & 0xF8);	/* Clear Clock bits in TIMER1 */
    2cf0:	ae e4       	ldi	r26, 0x4E	; 78
    2cf2:	b0 e0       	ldi	r27, 0x00	; 0
    2cf4:	ee e4       	ldi	r30, 0x4E	; 78
    2cf6:	f0 e0       	ldi	r31, 0x00	; 0
    2cf8:	80 81       	ld	r24, Z
    2cfa:	88 7f       	andi	r24, 0xF8	; 248
    2cfc:	8c 93       	st	X, r24
    2cfe:	07 c0       	rjmp	.+14     	; 0x2d0e <TIMER_stop+0x62>
		break;

	case TIMER_2:

		TCCR2  = ( TCCR2 & 0xF8 );	/* Clear Clock bits in TIMER2 */
    2d00:	a5 e4       	ldi	r26, 0x45	; 69
    2d02:	b0 e0       	ldi	r27, 0x00	; 0
    2d04:	e5 e4       	ldi	r30, 0x45	; 69
    2d06:	f0 e0       	ldi	r31, 0x00	; 0
    2d08:	80 81       	ld	r24, Z
    2d0a:	88 7f       	andi	r24, 0xF8	; 248
    2d0c:	8c 93       	st	X, r24
		break;
	}
}
    2d0e:	0f 90       	pop	r0
    2d10:	0f 90       	pop	r0
    2d12:	0f 90       	pop	r0
    2d14:	cf 91       	pop	r28
    2d16:	df 91       	pop	r29
    2d18:	08 95       	ret

00002d1a <TIMER_DeInit>:
 * [in/out]		 	None
 *
 * [Returns]:       None
 ****************************************************************************************/
void TIMER_DeInit(const TIMER_ID a_timerID)
{
    2d1a:	df 93       	push	r29
    2d1c:	cf 93       	push	r28
    2d1e:	00 d0       	rcall	.+0      	; 0x2d20 <TIMER_DeInit+0x6>
    2d20:	0f 92       	push	r0
    2d22:	cd b7       	in	r28, 0x3d	; 61
    2d24:	de b7       	in	r29, 0x3e	; 62
    2d26:	89 83       	std	Y+1, r24	; 0x01
	switch(a_timerID)
    2d28:	89 81       	ldd	r24, Y+1	; 0x01
    2d2a:	28 2f       	mov	r18, r24
    2d2c:	30 e0       	ldi	r19, 0x00	; 0
    2d2e:	3b 83       	std	Y+3, r19	; 0x03
    2d30:	2a 83       	std	Y+2, r18	; 0x02
    2d32:	8a 81       	ldd	r24, Y+2	; 0x02
    2d34:	9b 81       	ldd	r25, Y+3	; 0x03
    2d36:	81 30       	cpi	r24, 0x01	; 1
    2d38:	91 05       	cpc	r25, r1
    2d3a:	11 f1       	breq	.+68     	; 0x2d80 <TIMER_DeInit+0x66>
    2d3c:	2a 81       	ldd	r18, Y+2	; 0x02
    2d3e:	3b 81       	ldd	r19, Y+3	; 0x03
    2d40:	22 30       	cpi	r18, 0x02	; 2
    2d42:	31 05       	cpc	r19, r1
    2d44:	d1 f1       	breq	.+116    	; 0x2dba <TIMER_DeInit+0xa0>
    2d46:	8a 81       	ldd	r24, Y+2	; 0x02
    2d48:	9b 81       	ldd	r25, Y+3	; 0x03
    2d4a:	00 97       	sbiw	r24, 0x00	; 0
    2d4c:	09 f0       	breq	.+2      	; 0x2d50 <TIMER_DeInit+0x36>
    2d4e:	4c c0       	rjmp	.+152    	; 0x2de8 <TIMER_DeInit+0xce>
	{

	case TIMER_0:

		/* Clear All TIMER0 Register */
		TCNT0 = 0x00;
    2d50:	e2 e5       	ldi	r30, 0x52	; 82
    2d52:	f0 e0       	ldi	r31, 0x00	; 0
    2d54:	10 82       	st	Z, r1
		TCCR0 = 0x00;
    2d56:	e3 e5       	ldi	r30, 0x53	; 83
    2d58:	f0 e0       	ldi	r31, 0x00	; 0
    2d5a:	10 82       	st	Z, r1
		OCR0  = 0x00;
    2d5c:	ec e5       	ldi	r30, 0x5C	; 92
    2d5e:	f0 e0       	ldi	r31, 0x00	; 0
    2d60:	10 82       	st	Z, r1

		/* Disable TIMER0 Interrupt Enable */
		TIMSK &= ~(1 << TOIE0) & ~(1 << OCIE0);
    2d62:	a9 e5       	ldi	r26, 0x59	; 89
    2d64:	b0 e0       	ldi	r27, 0x00	; 0
    2d66:	e9 e5       	ldi	r30, 0x59	; 89
    2d68:	f0 e0       	ldi	r31, 0x00	; 0
    2d6a:	80 81       	ld	r24, Z
    2d6c:	8c 7f       	andi	r24, 0xFC	; 252
    2d6e:	8c 93       	st	X, r24

		/* Disable TIMER0 Interrupt Flag, by writing a logic one */
		TIFR |= (1 << OCF0) | (1 << TOV0);
    2d70:	a8 e5       	ldi	r26, 0x58	; 88
    2d72:	b0 e0       	ldi	r27, 0x00	; 0
    2d74:	e8 e5       	ldi	r30, 0x58	; 88
    2d76:	f0 e0       	ldi	r31, 0x00	; 0
    2d78:	80 81       	ld	r24, Z
    2d7a:	83 60       	ori	r24, 0x03	; 3
    2d7c:	8c 93       	st	X, r24
    2d7e:	34 c0       	rjmp	.+104    	; 0x2de8 <TIMER_DeInit+0xce>
		break;

	case TIMER_1:

		/* Clear All TIMER1 Register */
		TCNT1  = 0x0000;
    2d80:	ec e4       	ldi	r30, 0x4C	; 76
    2d82:	f0 e0       	ldi	r31, 0x00	; 0
    2d84:	11 82       	std	Z+1, r1	; 0x01
    2d86:	10 82       	st	Z, r1
		OCR1A  = 0x0000;
    2d88:	ea e4       	ldi	r30, 0x4A	; 74
    2d8a:	f0 e0       	ldi	r31, 0x00	; 0
    2d8c:	11 82       	std	Z+1, r1	; 0x01
    2d8e:	10 82       	st	Z, r1
		TCCR1A = 0x00;
    2d90:	ef e4       	ldi	r30, 0x4F	; 79
    2d92:	f0 e0       	ldi	r31, 0x00	; 0
    2d94:	10 82       	st	Z, r1
		TCCR1B = 0x00;
    2d96:	ee e4       	ldi	r30, 0x4E	; 78
    2d98:	f0 e0       	ldi	r31, 0x00	; 0
    2d9a:	10 82       	st	Z, r1

		/* Disable TIMER1 Interrupt Enable */
		TIMSK &= ~(1 << TOIE1) & ~(1 << OCIE1A);
    2d9c:	a9 e5       	ldi	r26, 0x59	; 89
    2d9e:	b0 e0       	ldi	r27, 0x00	; 0
    2da0:	e9 e5       	ldi	r30, 0x59	; 89
    2da2:	f0 e0       	ldi	r31, 0x00	; 0
    2da4:	80 81       	ld	r24, Z
    2da6:	8b 7e       	andi	r24, 0xEB	; 235
    2da8:	8c 93       	st	X, r24

		/* Disable TIMER1 Interrupt Flag, by writing a logic one */
		TIFR |= (1 << OCF1A) | (1 << OCF1B) | (1 << TOV1);
    2daa:	a8 e5       	ldi	r26, 0x58	; 88
    2dac:	b0 e0       	ldi	r27, 0x00	; 0
    2dae:	e8 e5       	ldi	r30, 0x58	; 88
    2db0:	f0 e0       	ldi	r31, 0x00	; 0
    2db2:	80 81       	ld	r24, Z
    2db4:	8c 61       	ori	r24, 0x1C	; 28
    2db6:	8c 93       	st	X, r24
    2db8:	17 c0       	rjmp	.+46     	; 0x2de8 <TIMER_DeInit+0xce>
		break;

	case TIMER_2:

		/* Clear All TIMER2 Register */
		TCNT2 = 0x00;
    2dba:	e4 e4       	ldi	r30, 0x44	; 68
    2dbc:	f0 e0       	ldi	r31, 0x00	; 0
    2dbe:	10 82       	st	Z, r1
		TCCR2 = 0x00;
    2dc0:	e5 e4       	ldi	r30, 0x45	; 69
    2dc2:	f0 e0       	ldi	r31, 0x00	; 0
    2dc4:	10 82       	st	Z, r1
		OCR2  = 0x00;
    2dc6:	e3 e4       	ldi	r30, 0x43	; 67
    2dc8:	f0 e0       	ldi	r31, 0x00	; 0
    2dca:	10 82       	st	Z, r1

		/* Disable TIMER2 Interrupt Flags */
		TIMSK &= ~(1 << TOIE2) & ~(1 << OCIE2);
    2dcc:	a9 e5       	ldi	r26, 0x59	; 89
    2dce:	b0 e0       	ldi	r27, 0x00	; 0
    2dd0:	e9 e5       	ldi	r30, 0x59	; 89
    2dd2:	f0 e0       	ldi	r31, 0x00	; 0
    2dd4:	80 81       	ld	r24, Z
    2dd6:	8f 73       	andi	r24, 0x3F	; 63
    2dd8:	8c 93       	st	X, r24

		/* Disable TIMER2 Interrupt Flag, by writing a logic one */
		TIFR |= (1 << OCF2) | (1 << TOV2);
    2dda:	a8 e5       	ldi	r26, 0x58	; 88
    2ddc:	b0 e0       	ldi	r27, 0x00	; 0
    2dde:	e8 e5       	ldi	r30, 0x58	; 88
    2de0:	f0 e0       	ldi	r31, 0x00	; 0
    2de2:	80 81       	ld	r24, Z
    2de4:	80 6c       	ori	r24, 0xC0	; 192
    2de6:	8c 93       	st	X, r24
		break;
	}
}
    2de8:	0f 90       	pop	r0
    2dea:	0f 90       	pop	r0
    2dec:	0f 90       	pop	r0
    2dee:	cf 91       	pop	r28
    2df0:	df 91       	pop	r29
    2df2:	08 95       	ret

00002df4 <UART_init>:
 * [in/out]		 	None
 *
 * [Returns]:       None
 ******************************************************************************************/
void UART_init(const UART_ConfigType * Config_Ptr)
{
    2df4:	0f 93       	push	r16
    2df6:	1f 93       	push	r17
    2df8:	df 93       	push	r29
    2dfa:	cf 93       	push	r28
    2dfc:	00 d0       	rcall	.+0      	; 0x2dfe <UART_init+0xa>
    2dfe:	00 d0       	rcall	.+0      	; 0x2e00 <UART_init+0xc>
    2e00:	cd b7       	in	r28, 0x3d	; 61
    2e02:	de b7       	in	r29, 0x3e	; 62
    2e04:	9a 83       	std	Y+2, r25	; 0x02
    2e06:	89 83       	std	Y+1, r24	; 0x01
	/* Insert the required Mode in U2X bit in UCSRA Register */
	UCSRA = (UCSRA & 0xFD) | ( (Config_Ptr -> uart_Mode) << 1);
    2e08:	ab e2       	ldi	r26, 0x2B	; 43
    2e0a:	b0 e0       	ldi	r27, 0x00	; 0
    2e0c:	eb e2       	ldi	r30, 0x2B	; 43
    2e0e:	f0 e0       	ldi	r31, 0x00	; 0
    2e10:	80 81       	ld	r24, Z
    2e12:	28 2f       	mov	r18, r24
    2e14:	2d 7f       	andi	r18, 0xFD	; 253
    2e16:	e9 81       	ldd	r30, Y+1	; 0x01
    2e18:	fa 81       	ldd	r31, Y+2	; 0x02
    2e1a:	84 81       	ldd	r24, Z+4	; 0x04
    2e1c:	88 2f       	mov	r24, r24
    2e1e:	90 e0       	ldi	r25, 0x00	; 0
    2e20:	88 0f       	add	r24, r24
    2e22:	99 1f       	adc	r25, r25
    2e24:	82 2b       	or	r24, r18
    2e26:	8c 93       	st	X, r24

	/* In Case of Nine Bit Data */
	if(Config_Ptr -> uart_DataBits == NINE_BITS)
    2e28:	e9 81       	ldd	r30, Y+1	; 0x01
    2e2a:	fa 81       	ldd	r31, Y+2	; 0x02
    2e2c:	85 81       	ldd	r24, Z+5	; 0x05
    2e2e:	87 30       	cpi	r24, 0x07	; 7
    2e30:	a1 f4       	brne	.+40     	; 0x2e5a <UART_init+0x66>
	{
		/* Insert the last bit of required data bits in bit UCSZ2 in UCSRB Register */
		UCSRB = (UCSRB & 0xFB) | ( (Config_Ptr -> uart_DataBits) & 0x04);
    2e32:	aa e2       	ldi	r26, 0x2A	; 42
    2e34:	b0 e0       	ldi	r27, 0x00	; 0
    2e36:	ea e2       	ldi	r30, 0x2A	; 42
    2e38:	f0 e0       	ldi	r31, 0x00	; 0
    2e3a:	80 81       	ld	r24, Z
    2e3c:	98 2f       	mov	r25, r24
    2e3e:	9b 7f       	andi	r25, 0xFB	; 251
    2e40:	e9 81       	ldd	r30, Y+1	; 0x01
    2e42:	fa 81       	ldd	r31, Y+2	; 0x02
    2e44:	85 81       	ldd	r24, Z+5	; 0x05
    2e46:	84 70       	andi	r24, 0x04	; 4
    2e48:	89 2b       	or	r24, r25
    2e4a:	8c 93       	st	X, r24

		/* Two bits RXB8 & TXB8 must be Enabled in UCSRB Register */
		UCSRB |= (1 << RXB8) | (1 << TXB8);
    2e4c:	aa e2       	ldi	r26, 0x2A	; 42
    2e4e:	b0 e0       	ldi	r27, 0x00	; 0
    2e50:	ea e2       	ldi	r30, 0x2A	; 42
    2e52:	f0 e0       	ldi	r31, 0x00	; 0
    2e54:	80 81       	ld	r24, Z
    2e56:	83 60       	ori	r24, 0x03	; 3
    2e58:	8c 93       	st	X, r24

	/*
	 * Enable Transmitter & Receiver to be able to transmit and receive thought
	 * the UART driver
	 */
	UCSRB |= (1 << RXEN) | (1 << TXEN);
    2e5a:	aa e2       	ldi	r26, 0x2A	; 42
    2e5c:	b0 e0       	ldi	r27, 0x00	; 0
    2e5e:	ea e2       	ldi	r30, 0x2A	; 42
    2e60:	f0 e0       	ldi	r31, 0x00	; 0
    2e62:	80 81       	ld	r24, Z
    2e64:	88 61       	ori	r24, 0x18	; 24
    2e66:	8c 93       	st	X, r24

	/* URSEL must be one when writing the UCSRC */
	UCSRC |= (1 << URSEL);
    2e68:	a0 e4       	ldi	r26, 0x40	; 64
    2e6a:	b0 e0       	ldi	r27, 0x00	; 0
    2e6c:	e0 e4       	ldi	r30, 0x40	; 64
    2e6e:	f0 e0       	ldi	r31, 0x00	; 0
    2e70:	80 81       	ld	r24, Z
    2e72:	80 68       	ori	r24, 0x80	; 128
    2e74:	8c 93       	st	X, r24

	/*
	 * Insert the First two bits of required data bits in bits (UCSZ0, UCSZ1)
	 * in UCSRC Register in case of (5,6,7 or 8) Data bits
	 */
	UCSRC = (UCSRC & 0xF9) | ( (Config_Ptr -> uart_DataBits & 0x03) << 1);
    2e76:	a0 e4       	ldi	r26, 0x40	; 64
    2e78:	b0 e0       	ldi	r27, 0x00	; 0
    2e7a:	e0 e4       	ldi	r30, 0x40	; 64
    2e7c:	f0 e0       	ldi	r31, 0x00	; 0
    2e7e:	80 81       	ld	r24, Z
    2e80:	28 2f       	mov	r18, r24
    2e82:	29 7f       	andi	r18, 0xF9	; 249
    2e84:	e9 81       	ldd	r30, Y+1	; 0x01
    2e86:	fa 81       	ldd	r31, Y+2	; 0x02
    2e88:	85 81       	ldd	r24, Z+5	; 0x05
    2e8a:	88 2f       	mov	r24, r24
    2e8c:	90 e0       	ldi	r25, 0x00	; 0
    2e8e:	83 70       	andi	r24, 0x03	; 3
    2e90:	90 70       	andi	r25, 0x00	; 0
    2e92:	88 0f       	add	r24, r24
    2e94:	99 1f       	adc	r25, r25
    2e96:	82 2b       	or	r24, r18
    2e98:	8c 93       	st	X, r24

	/* Insert the required parity type in bits (UPM0, UPM1) in UCSRC Register */
	UCSRC = (UCSRC & 0xCF) | ( (Config_Ptr -> uart_Parity) << 4);
    2e9a:	a0 e4       	ldi	r26, 0x40	; 64
    2e9c:	b0 e0       	ldi	r27, 0x00	; 0
    2e9e:	e0 e4       	ldi	r30, 0x40	; 64
    2ea0:	f0 e0       	ldi	r31, 0x00	; 0
    2ea2:	80 81       	ld	r24, Z
    2ea4:	28 2f       	mov	r18, r24
    2ea6:	2f 7c       	andi	r18, 0xCF	; 207
    2ea8:	e9 81       	ldd	r30, Y+1	; 0x01
    2eaa:	fa 81       	ldd	r31, Y+2	; 0x02
    2eac:	86 81       	ldd	r24, Z+6	; 0x06
    2eae:	88 2f       	mov	r24, r24
    2eb0:	90 e0       	ldi	r25, 0x00	; 0
    2eb2:	82 95       	swap	r24
    2eb4:	92 95       	swap	r25
    2eb6:	90 7f       	andi	r25, 0xF0	; 240
    2eb8:	98 27       	eor	r25, r24
    2eba:	80 7f       	andi	r24, 0xF0	; 240
    2ebc:	98 27       	eor	r25, r24
    2ebe:	82 2b       	or	r24, r18
    2ec0:	8c 93       	st	X, r24

	/* Insert the required number of stop bit(s) in bit USBS in UCSRC Register */
	UCSRC = (UCSRC & 0xF7) | ( (Config_Ptr -> uart_StopBit) << 3);
    2ec2:	a0 e4       	ldi	r26, 0x40	; 64
    2ec4:	b0 e0       	ldi	r27, 0x00	; 0
    2ec6:	e0 e4       	ldi	r30, 0x40	; 64
    2ec8:	f0 e0       	ldi	r31, 0x00	; 0
    2eca:	80 81       	ld	r24, Z
    2ecc:	28 2f       	mov	r18, r24
    2ece:	27 7f       	andi	r18, 0xF7	; 247
    2ed0:	e9 81       	ldd	r30, Y+1	; 0x01
    2ed2:	fa 81       	ldd	r31, Y+2	; 0x02
    2ed4:	87 81       	ldd	r24, Z+7	; 0x07
    2ed6:	88 2f       	mov	r24, r24
    2ed8:	90 e0       	ldi	r25, 0x00	; 0
    2eda:	88 0f       	add	r24, r24
    2edc:	99 1f       	adc	r25, r25
    2ede:	88 0f       	add	r24, r24
    2ee0:	99 1f       	adc	r25, r25
    2ee2:	88 0f       	add	r24, r24
    2ee4:	99 1f       	adc	r25, r25
    2ee6:	82 2b       	or	r24, r18
    2ee8:	8c 93       	st	X, r24
	/*
	 * This switch case is to choose between two Modes (Normal, Double Speed),
	 * then calculate and insert the required Baud rate in First 8 bits from the
	 * BAUD_PRESCALE inside UBRRL and last 4 bits in UBRRH
	 */
	switch(Config_Ptr -> uart_Mode)
    2eea:	e9 81       	ldd	r30, Y+1	; 0x01
    2eec:	fa 81       	ldd	r31, Y+2	; 0x02
    2eee:	84 81       	ldd	r24, Z+4	; 0x04
    2ef0:	28 2f       	mov	r18, r24
    2ef2:	30 e0       	ldi	r19, 0x00	; 0
    2ef4:	3c 83       	std	Y+4, r19	; 0x04
    2ef6:	2b 83       	std	Y+3, r18	; 0x03
    2ef8:	8b 81       	ldd	r24, Y+3	; 0x03
    2efa:	9c 81       	ldd	r25, Y+4	; 0x04
    2efc:	00 97       	sbiw	r24, 0x00	; 0
    2efe:	39 f0       	breq	.+14     	; 0x2f0e <UART_init+0x11a>
    2f00:	eb 81       	ldd	r30, Y+3	; 0x03
    2f02:	fc 81       	ldd	r31, Y+4	; 0x04
    2f04:	e1 30       	cpi	r30, 0x01	; 1
    2f06:	f1 05       	cpc	r31, r1
    2f08:	09 f4       	brne	.+2      	; 0x2f0c <UART_init+0x118>
    2f0a:	56 c0       	rjmp	.+172    	; 0x2fb8 <UART_init+0x1c4>
    2f0c:	a1 c0       	rjmp	.+322    	; 0x3050 <UART_init+0x25c>
	{
	case NORMAL_SPEED:	UBRRH = ( (((F_CPU / (Config_Ptr -> uart_BaudRate * 16UL))) - 1) >> 8 );
    2f0e:	00 e4       	ldi	r16, 0x40	; 64
    2f10:	10 e0       	ldi	r17, 0x00	; 0
    2f12:	e9 81       	ldd	r30, Y+1	; 0x01
    2f14:	fa 81       	ldd	r31, Y+2	; 0x02
    2f16:	80 81       	ld	r24, Z
    2f18:	91 81       	ldd	r25, Z+1	; 0x01
    2f1a:	a2 81       	ldd	r26, Z+2	; 0x02
    2f1c:	b3 81       	ldd	r27, Z+3	; 0x03
    2f1e:	88 0f       	add	r24, r24
    2f20:	99 1f       	adc	r25, r25
    2f22:	aa 1f       	adc	r26, r26
    2f24:	bb 1f       	adc	r27, r27
    2f26:	88 0f       	add	r24, r24
    2f28:	99 1f       	adc	r25, r25
    2f2a:	aa 1f       	adc	r26, r26
    2f2c:	bb 1f       	adc	r27, r27
    2f2e:	88 0f       	add	r24, r24
    2f30:	99 1f       	adc	r25, r25
    2f32:	aa 1f       	adc	r26, r26
    2f34:	bb 1f       	adc	r27, r27
    2f36:	88 0f       	add	r24, r24
    2f38:	99 1f       	adc	r25, r25
    2f3a:	aa 1f       	adc	r26, r26
    2f3c:	bb 1f       	adc	r27, r27
    2f3e:	9c 01       	movw	r18, r24
    2f40:	ad 01       	movw	r20, r26
    2f42:	80 e0       	ldi	r24, 0x00	; 0
    2f44:	92 e1       	ldi	r25, 0x12	; 18
    2f46:	aa e7       	ldi	r26, 0x7A	; 122
    2f48:	b0 e0       	ldi	r27, 0x00	; 0
    2f4a:	bc 01       	movw	r22, r24
    2f4c:	cd 01       	movw	r24, r26
    2f4e:	0e 94 13 19 	call	0x3226	; 0x3226 <__udivmodsi4>
    2f52:	da 01       	movw	r26, r20
    2f54:	c9 01       	movw	r24, r18
    2f56:	01 97       	sbiw	r24, 0x01	; 1
    2f58:	a1 09       	sbc	r26, r1
    2f5a:	b1 09       	sbc	r27, r1
    2f5c:	89 2f       	mov	r24, r25
    2f5e:	9a 2f       	mov	r25, r26
    2f60:	ab 2f       	mov	r26, r27
    2f62:	bb 27       	eor	r27, r27
    2f64:	f8 01       	movw	r30, r16
    2f66:	80 83       	st	Z, r24
						UBRRL = ( ((F_CPU / (Config_Ptr -> uart_BaudRate * 16UL))) - 1 );
    2f68:	09 e2       	ldi	r16, 0x29	; 41
    2f6a:	10 e0       	ldi	r17, 0x00	; 0
    2f6c:	e9 81       	ldd	r30, Y+1	; 0x01
    2f6e:	fa 81       	ldd	r31, Y+2	; 0x02
    2f70:	80 81       	ld	r24, Z
    2f72:	91 81       	ldd	r25, Z+1	; 0x01
    2f74:	a2 81       	ldd	r26, Z+2	; 0x02
    2f76:	b3 81       	ldd	r27, Z+3	; 0x03
    2f78:	88 0f       	add	r24, r24
    2f7a:	99 1f       	adc	r25, r25
    2f7c:	aa 1f       	adc	r26, r26
    2f7e:	bb 1f       	adc	r27, r27
    2f80:	88 0f       	add	r24, r24
    2f82:	99 1f       	adc	r25, r25
    2f84:	aa 1f       	adc	r26, r26
    2f86:	bb 1f       	adc	r27, r27
    2f88:	88 0f       	add	r24, r24
    2f8a:	99 1f       	adc	r25, r25
    2f8c:	aa 1f       	adc	r26, r26
    2f8e:	bb 1f       	adc	r27, r27
    2f90:	88 0f       	add	r24, r24
    2f92:	99 1f       	adc	r25, r25
    2f94:	aa 1f       	adc	r26, r26
    2f96:	bb 1f       	adc	r27, r27
    2f98:	9c 01       	movw	r18, r24
    2f9a:	ad 01       	movw	r20, r26
    2f9c:	80 e0       	ldi	r24, 0x00	; 0
    2f9e:	92 e1       	ldi	r25, 0x12	; 18
    2fa0:	aa e7       	ldi	r26, 0x7A	; 122
    2fa2:	b0 e0       	ldi	r27, 0x00	; 0
    2fa4:	bc 01       	movw	r22, r24
    2fa6:	cd 01       	movw	r24, r26
    2fa8:	0e 94 13 19 	call	0x3226	; 0x3226 <__udivmodsi4>
    2fac:	da 01       	movw	r26, r20
    2fae:	c9 01       	movw	r24, r18
    2fb0:	81 50       	subi	r24, 0x01	; 1
    2fb2:	f8 01       	movw	r30, r16
    2fb4:	80 83       	st	Z, r24
    2fb6:	4c c0       	rjmp	.+152    	; 0x3050 <UART_init+0x25c>
						break;

	case DOUBLE_SPEED:	UBRRH = ( (((F_CPU / (Config_Ptr -> uart_BaudRate * 8UL))) - 1) >> 8 );
    2fb8:	00 e4       	ldi	r16, 0x40	; 64
    2fba:	10 e0       	ldi	r17, 0x00	; 0
    2fbc:	e9 81       	ldd	r30, Y+1	; 0x01
    2fbe:	fa 81       	ldd	r31, Y+2	; 0x02
    2fc0:	80 81       	ld	r24, Z
    2fc2:	91 81       	ldd	r25, Z+1	; 0x01
    2fc4:	a2 81       	ldd	r26, Z+2	; 0x02
    2fc6:	b3 81       	ldd	r27, Z+3	; 0x03
    2fc8:	88 0f       	add	r24, r24
    2fca:	99 1f       	adc	r25, r25
    2fcc:	aa 1f       	adc	r26, r26
    2fce:	bb 1f       	adc	r27, r27
    2fd0:	88 0f       	add	r24, r24
    2fd2:	99 1f       	adc	r25, r25
    2fd4:	aa 1f       	adc	r26, r26
    2fd6:	bb 1f       	adc	r27, r27
    2fd8:	88 0f       	add	r24, r24
    2fda:	99 1f       	adc	r25, r25
    2fdc:	aa 1f       	adc	r26, r26
    2fde:	bb 1f       	adc	r27, r27
    2fe0:	9c 01       	movw	r18, r24
    2fe2:	ad 01       	movw	r20, r26
    2fe4:	80 e0       	ldi	r24, 0x00	; 0
    2fe6:	92 e1       	ldi	r25, 0x12	; 18
    2fe8:	aa e7       	ldi	r26, 0x7A	; 122
    2fea:	b0 e0       	ldi	r27, 0x00	; 0
    2fec:	bc 01       	movw	r22, r24
    2fee:	cd 01       	movw	r24, r26
    2ff0:	0e 94 13 19 	call	0x3226	; 0x3226 <__udivmodsi4>
    2ff4:	da 01       	movw	r26, r20
    2ff6:	c9 01       	movw	r24, r18
    2ff8:	01 97       	sbiw	r24, 0x01	; 1
    2ffa:	a1 09       	sbc	r26, r1
    2ffc:	b1 09       	sbc	r27, r1
    2ffe:	89 2f       	mov	r24, r25
    3000:	9a 2f       	mov	r25, r26
    3002:	ab 2f       	mov	r26, r27
    3004:	bb 27       	eor	r27, r27
    3006:	f8 01       	movw	r30, r16
    3008:	80 83       	st	Z, r24
						UBRRL = ( ((F_CPU / (Config_Ptr -> uart_BaudRate * 8UL))) - 1 );
    300a:	09 e2       	ldi	r16, 0x29	; 41
    300c:	10 e0       	ldi	r17, 0x00	; 0
    300e:	e9 81       	ldd	r30, Y+1	; 0x01
    3010:	fa 81       	ldd	r31, Y+2	; 0x02
    3012:	80 81       	ld	r24, Z
    3014:	91 81       	ldd	r25, Z+1	; 0x01
    3016:	a2 81       	ldd	r26, Z+2	; 0x02
    3018:	b3 81       	ldd	r27, Z+3	; 0x03
    301a:	88 0f       	add	r24, r24
    301c:	99 1f       	adc	r25, r25
    301e:	aa 1f       	adc	r26, r26
    3020:	bb 1f       	adc	r27, r27
    3022:	88 0f       	add	r24, r24
    3024:	99 1f       	adc	r25, r25
    3026:	aa 1f       	adc	r26, r26
    3028:	bb 1f       	adc	r27, r27
    302a:	88 0f       	add	r24, r24
    302c:	99 1f       	adc	r25, r25
    302e:	aa 1f       	adc	r26, r26
    3030:	bb 1f       	adc	r27, r27
    3032:	9c 01       	movw	r18, r24
    3034:	ad 01       	movw	r20, r26
    3036:	80 e0       	ldi	r24, 0x00	; 0
    3038:	92 e1       	ldi	r25, 0x12	; 18
    303a:	aa e7       	ldi	r26, 0x7A	; 122
    303c:	b0 e0       	ldi	r27, 0x00	; 0
    303e:	bc 01       	movw	r22, r24
    3040:	cd 01       	movw	r24, r26
    3042:	0e 94 13 19 	call	0x3226	; 0x3226 <__udivmodsi4>
    3046:	da 01       	movw	r26, r20
    3048:	c9 01       	movw	r24, r18
    304a:	81 50       	subi	r24, 0x01	; 1
    304c:	f8 01       	movw	r30, r16
    304e:	80 83       	st	Z, r24
						break;
	}
}
    3050:	0f 90       	pop	r0
    3052:	0f 90       	pop	r0
    3054:	0f 90       	pop	r0
    3056:	0f 90       	pop	r0
    3058:	cf 91       	pop	r28
    305a:	df 91       	pop	r29
    305c:	1f 91       	pop	r17
    305e:	0f 91       	pop	r16
    3060:	08 95       	ret

00003062 <UART_sendByte>:
 * [in/out]		 	None
 *
 * [Returns]:       None
 ****************************************************************************************/
void UART_sendByte(const uint8 data)
{
    3062:	df 93       	push	r29
    3064:	cf 93       	push	r28
    3066:	0f 92       	push	r0
    3068:	cd b7       	in	r28, 0x3d	; 61
    306a:	de b7       	in	r29, 0x3e	; 62
    306c:	89 83       	std	Y+1, r24	; 0x01
	/*
	 * UDRE flag is set when the TX buffer (UDR) is empty and ready for
	 * transmitting a new byte so wait until this flag is set to one
	 */
	while(BIT_IS_CLEAR(UCSRA,UDRE)){}
    306e:	eb e2       	ldi	r30, 0x2B	; 43
    3070:	f0 e0       	ldi	r31, 0x00	; 0
    3072:	80 81       	ld	r24, Z
    3074:	88 2f       	mov	r24, r24
    3076:	90 e0       	ldi	r25, 0x00	; 0
    3078:	80 72       	andi	r24, 0x20	; 32
    307a:	90 70       	andi	r25, 0x00	; 0
    307c:	00 97       	sbiw	r24, 0x00	; 0
    307e:	b9 f3       	breq	.-18     	; 0x306e <UART_sendByte+0xc>

	/*
	 * Put the required data in the UDR register and it also clear the UDRE
	 * flag as the UDR register is not empty now
	 */
	UDR = data;
    3080:	ec e2       	ldi	r30, 0x2C	; 44
    3082:	f0 e0       	ldi	r31, 0x00	; 0
    3084:	89 81       	ldd	r24, Y+1	; 0x01
    3086:	80 83       	st	Z, r24
}
    3088:	0f 90       	pop	r0
    308a:	cf 91       	pop	r28
    308c:	df 91       	pop	r29
    308e:	08 95       	ret

00003090 <UART_recieveByte>:
 * [in/out]		 	None
 *
 * [Returns]:       The Byte that received through the UART
 ****************************************************************************************/
uint8 UART_recieveByte(void)
{
    3090:	df 93       	push	r29
    3092:	cf 93       	push	r28
    3094:	cd b7       	in	r28, 0x3d	; 61
    3096:	de b7       	in	r29, 0x3e	; 62
	/*
	 * RXC flag is set when the UART receive data so wait until this
	 * flag is set to one
	 */
	while(BIT_IS_CLEAR(UCSRA,RXC)){}
    3098:	eb e2       	ldi	r30, 0x2B	; 43
    309a:	f0 e0       	ldi	r31, 0x00	; 0
    309c:	80 81       	ld	r24, Z
    309e:	88 23       	and	r24, r24
    30a0:	dc f7       	brge	.-10     	; 0x3098 <UART_recieveByte+0x8>

	/*
	 * Read the received data from the RX buffer (UDR) and the RXC flag
	 * will be cleared after read this data
	 */
	return UDR;
    30a2:	ec e2       	ldi	r30, 0x2C	; 44
    30a4:	f0 e0       	ldi	r31, 0x00	; 0
    30a6:	80 81       	ld	r24, Z
}
    30a8:	cf 91       	pop	r28
    30aa:	df 91       	pop	r29
    30ac:	08 95       	ret

000030ae <UART_sendString>:
 * [in/out]		 	None
 *
 * [Returns]:       None
 ****************************************************************************************/
void UART_sendString(const uint8 * Str)
{
    30ae:	df 93       	push	r29
    30b0:	cf 93       	push	r28
    30b2:	00 d0       	rcall	.+0      	; 0x30b4 <UART_sendString+0x6>
    30b4:	0f 92       	push	r0
    30b6:	cd b7       	in	r28, 0x3d	; 61
    30b8:	de b7       	in	r29, 0x3e	; 62
    30ba:	9b 83       	std	Y+3, r25	; 0x03
    30bc:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    30be:	19 82       	std	Y+1, r1	; 0x01
    30c0:	0e c0       	rjmp	.+28     	; 0x30de <UART_sendString+0x30>

	while(Str[i] != '\0')
	{
		UART_sendByte(Str[i]);
    30c2:	89 81       	ldd	r24, Y+1	; 0x01
    30c4:	28 2f       	mov	r18, r24
    30c6:	30 e0       	ldi	r19, 0x00	; 0
    30c8:	8a 81       	ldd	r24, Y+2	; 0x02
    30ca:	9b 81       	ldd	r25, Y+3	; 0x03
    30cc:	fc 01       	movw	r30, r24
    30ce:	e2 0f       	add	r30, r18
    30d0:	f3 1f       	adc	r31, r19
    30d2:	80 81       	ld	r24, Z
    30d4:	0e 94 31 18 	call	0x3062	; 0x3062 <UART_sendByte>
		i++;
    30d8:	89 81       	ldd	r24, Y+1	; 0x01
    30da:	8f 5f       	subi	r24, 0xFF	; 255
    30dc:	89 83       	std	Y+1, r24	; 0x01
 ****************************************************************************************/
void UART_sendString(const uint8 * Str)
{
	uint8 i = 0;

	while(Str[i] != '\0')
    30de:	89 81       	ldd	r24, Y+1	; 0x01
    30e0:	28 2f       	mov	r18, r24
    30e2:	30 e0       	ldi	r19, 0x00	; 0
    30e4:	8a 81       	ldd	r24, Y+2	; 0x02
    30e6:	9b 81       	ldd	r25, Y+3	; 0x03
    30e8:	fc 01       	movw	r30, r24
    30ea:	e2 0f       	add	r30, r18
    30ec:	f3 1f       	adc	r31, r19
    30ee:	80 81       	ld	r24, Z
    30f0:	88 23       	and	r24, r24
    30f2:	39 f7       	brne	.-50     	; 0x30c2 <UART_sendString+0x14>
	{
		UART_sendByte(Str[i]);
		i++;
	}
}
    30f4:	0f 90       	pop	r0
    30f6:	0f 90       	pop	r0
    30f8:	0f 90       	pop	r0
    30fa:	cf 91       	pop	r28
    30fc:	df 91       	pop	r29
    30fe:	08 95       	ret

00003100 <UART_receiveString>:
 * [in/out]		 	None
 *
 * [Returns]:       None
 ****************************************************************************************/
void UART_receiveString(uint8 * Str)
{
    3100:	0f 93       	push	r16
    3102:	1f 93       	push	r17
    3104:	df 93       	push	r29
    3106:	cf 93       	push	r28
    3108:	00 d0       	rcall	.+0      	; 0x310a <UART_receiveString+0xa>
    310a:	0f 92       	push	r0
    310c:	cd b7       	in	r28, 0x3d	; 61
    310e:	de b7       	in	r29, 0x3e	; 62
    3110:	9b 83       	std	Y+3, r25	; 0x03
    3112:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    3114:	19 82       	std	Y+1, r1	; 0x01

	Str[i] = UART_recieveByte();
    3116:	89 81       	ldd	r24, Y+1	; 0x01
    3118:	28 2f       	mov	r18, r24
    311a:	30 e0       	ldi	r19, 0x00	; 0
    311c:	8a 81       	ldd	r24, Y+2	; 0x02
    311e:	9b 81       	ldd	r25, Y+3	; 0x03
    3120:	8c 01       	movw	r16, r24
    3122:	02 0f       	add	r16, r18
    3124:	13 1f       	adc	r17, r19
    3126:	0e 94 48 18 	call	0x3090	; 0x3090 <UART_recieveByte>
    312a:	f8 01       	movw	r30, r16
    312c:	80 83       	st	Z, r24
    312e:	0f c0       	rjmp	.+30     	; 0x314e <UART_receiveString+0x4e>
	while(Str[i] != '#')
	{
		i++;
    3130:	89 81       	ldd	r24, Y+1	; 0x01
    3132:	8f 5f       	subi	r24, 0xFF	; 255
    3134:	89 83       	std	Y+1, r24	; 0x01
		Str[i] = UART_recieveByte();
    3136:	89 81       	ldd	r24, Y+1	; 0x01
    3138:	28 2f       	mov	r18, r24
    313a:	30 e0       	ldi	r19, 0x00	; 0
    313c:	8a 81       	ldd	r24, Y+2	; 0x02
    313e:	9b 81       	ldd	r25, Y+3	; 0x03
    3140:	8c 01       	movw	r16, r24
    3142:	02 0f       	add	r16, r18
    3144:	13 1f       	adc	r17, r19
    3146:	0e 94 48 18 	call	0x3090	; 0x3090 <UART_recieveByte>
    314a:	f8 01       	movw	r30, r16
    314c:	80 83       	st	Z, r24
void UART_receiveString(uint8 * Str)
{
	uint8 i = 0;

	Str[i] = UART_recieveByte();
	while(Str[i] != '#')
    314e:	89 81       	ldd	r24, Y+1	; 0x01
    3150:	28 2f       	mov	r18, r24
    3152:	30 e0       	ldi	r19, 0x00	; 0
    3154:	8a 81       	ldd	r24, Y+2	; 0x02
    3156:	9b 81       	ldd	r25, Y+3	; 0x03
    3158:	fc 01       	movw	r30, r24
    315a:	e2 0f       	add	r30, r18
    315c:	f3 1f       	adc	r31, r19
    315e:	80 81       	ld	r24, Z
    3160:	83 32       	cpi	r24, 0x23	; 35
    3162:	31 f7       	brne	.-52     	; 0x3130 <UART_receiveString+0x30>
	{
		i++;
		Str[i] = UART_recieveByte();
	}
	Str[i] = '\0';
    3164:	89 81       	ldd	r24, Y+1	; 0x01
    3166:	28 2f       	mov	r18, r24
    3168:	30 e0       	ldi	r19, 0x00	; 0
    316a:	8a 81       	ldd	r24, Y+2	; 0x02
    316c:	9b 81       	ldd	r25, Y+3	; 0x03
    316e:	fc 01       	movw	r30, r24
    3170:	e2 0f       	add	r30, r18
    3172:	f3 1f       	adc	r31, r19
    3174:	10 82       	st	Z, r1
}
    3176:	0f 90       	pop	r0
    3178:	0f 90       	pop	r0
    317a:	0f 90       	pop	r0
    317c:	cf 91       	pop	r28
    317e:	df 91       	pop	r29
    3180:	1f 91       	pop	r17
    3182:	0f 91       	pop	r16
    3184:	08 95       	ret

00003186 <UART_setParityType>:
 * [in/out]		 	None
 *
 * [Returns]:       None
 ****************************************************************************************/
void UART_setParityType(const UART_ParityType a_parityType)
{
    3186:	df 93       	push	r29
    3188:	cf 93       	push	r28
    318a:	0f 92       	push	r0
    318c:	cd b7       	in	r28, 0x3d	; 61
    318e:	de b7       	in	r29, 0x3e	; 62
    3190:	89 83       	std	Y+1, r24	; 0x01
	/* Insert the required parity type in bits (UPM0, UPM1) in UCSRC Register */
	UCSRC = (UCSRC & 0xCF) | (a_parityType << 4);
    3192:	a0 e4       	ldi	r26, 0x40	; 64
    3194:	b0 e0       	ldi	r27, 0x00	; 0
    3196:	e0 e4       	ldi	r30, 0x40	; 64
    3198:	f0 e0       	ldi	r31, 0x00	; 0
    319a:	80 81       	ld	r24, Z
    319c:	28 2f       	mov	r18, r24
    319e:	2f 7c       	andi	r18, 0xCF	; 207
    31a0:	89 81       	ldd	r24, Y+1	; 0x01
    31a2:	88 2f       	mov	r24, r24
    31a4:	90 e0       	ldi	r25, 0x00	; 0
    31a6:	82 95       	swap	r24
    31a8:	92 95       	swap	r25
    31aa:	90 7f       	andi	r25, 0xF0	; 240
    31ac:	98 27       	eor	r25, r24
    31ae:	80 7f       	andi	r24, 0xF0	; 240
    31b0:	98 27       	eor	r25, r24
    31b2:	82 2b       	or	r24, r18
    31b4:	8c 93       	st	X, r24
}
    31b6:	0f 90       	pop	r0
    31b8:	cf 91       	pop	r28
    31ba:	df 91       	pop	r29
    31bc:	08 95       	ret

000031be <UART_setStopBit>:
 * [in/out]		 	None
 *
 * [Returns]:       None
 ****************************************************************************************/
void UART_setStopBit(const UART_StopBit a_stopBit)
{
    31be:	df 93       	push	r29
    31c0:	cf 93       	push	r28
    31c2:	0f 92       	push	r0
    31c4:	cd b7       	in	r28, 0x3d	; 61
    31c6:	de b7       	in	r29, 0x3e	; 62
    31c8:	89 83       	std	Y+1, r24	; 0x01
	/* Insert the required number of stop bit(s) in bit USBS in UCSRC Register */
	UCSRC = (UCSRC & 0xF7) | ( a_stopBit << 3);
    31ca:	a0 e4       	ldi	r26, 0x40	; 64
    31cc:	b0 e0       	ldi	r27, 0x00	; 0
    31ce:	e0 e4       	ldi	r30, 0x40	; 64
    31d0:	f0 e0       	ldi	r31, 0x00	; 0
    31d2:	80 81       	ld	r24, Z
    31d4:	28 2f       	mov	r18, r24
    31d6:	27 7f       	andi	r18, 0xF7	; 247
    31d8:	89 81       	ldd	r24, Y+1	; 0x01
    31da:	88 2f       	mov	r24, r24
    31dc:	90 e0       	ldi	r25, 0x00	; 0
    31de:	88 0f       	add	r24, r24
    31e0:	99 1f       	adc	r25, r25
    31e2:	88 0f       	add	r24, r24
    31e4:	99 1f       	adc	r25, r25
    31e6:	88 0f       	add	r24, r24
    31e8:	99 1f       	adc	r25, r25
    31ea:	82 2b       	or	r24, r18
    31ec:	8c 93       	st	X, r24
}
    31ee:	0f 90       	pop	r0
    31f0:	cf 91       	pop	r28
    31f2:	df 91       	pop	r29
    31f4:	08 95       	ret

000031f6 <UART_DeInit>:
 * [in/out]		 	None
 *
 * [Returns]:       None
 ****************************************************************************************/
void UART_DeInit(void)
{
    31f6:	df 93       	push	r29
    31f8:	cf 93       	push	r28
    31fa:	cd b7       	in	r28, 0x3d	; 61
    31fc:	de b7       	in	r29, 0x3e	; 62
	/* Reset All UART Registers to its initial value */
	UCSRA = 0x20;
    31fe:	eb e2       	ldi	r30, 0x2B	; 43
    3200:	f0 e0       	ldi	r31, 0x00	; 0
    3202:	80 e2       	ldi	r24, 0x20	; 32
    3204:	80 83       	st	Z, r24
	UCSRB = 0;
    3206:	ea e2       	ldi	r30, 0x2A	; 42
    3208:	f0 e0       	ldi	r31, 0x00	; 0
    320a:	10 82       	st	Z, r1
	UCSRC = 0x86;
    320c:	e0 e4       	ldi	r30, 0x40	; 64
    320e:	f0 e0       	ldi	r31, 0x00	; 0
    3210:	86 e8       	ldi	r24, 0x86	; 134
    3212:	80 83       	st	Z, r24

	/* Clear UART Baud Rate Registers */
	UBRRH = 0;
    3214:	e0 e4       	ldi	r30, 0x40	; 64
    3216:	f0 e0       	ldi	r31, 0x00	; 0
    3218:	10 82       	st	Z, r1
	UBRRL = 0;
    321a:	e9 e2       	ldi	r30, 0x29	; 41
    321c:	f0 e0       	ldi	r31, 0x00	; 0
    321e:	10 82       	st	Z, r1
}
    3220:	cf 91       	pop	r28
    3222:	df 91       	pop	r29
    3224:	08 95       	ret

00003226 <__udivmodsi4>:
    3226:	a1 e2       	ldi	r26, 0x21	; 33
    3228:	1a 2e       	mov	r1, r26
    322a:	aa 1b       	sub	r26, r26
    322c:	bb 1b       	sub	r27, r27
    322e:	fd 01       	movw	r30, r26
    3230:	0d c0       	rjmp	.+26     	; 0x324c <__udivmodsi4_ep>

00003232 <__udivmodsi4_loop>:
    3232:	aa 1f       	adc	r26, r26
    3234:	bb 1f       	adc	r27, r27
    3236:	ee 1f       	adc	r30, r30
    3238:	ff 1f       	adc	r31, r31
    323a:	a2 17       	cp	r26, r18
    323c:	b3 07       	cpc	r27, r19
    323e:	e4 07       	cpc	r30, r20
    3240:	f5 07       	cpc	r31, r21
    3242:	20 f0       	brcs	.+8      	; 0x324c <__udivmodsi4_ep>
    3244:	a2 1b       	sub	r26, r18
    3246:	b3 0b       	sbc	r27, r19
    3248:	e4 0b       	sbc	r30, r20
    324a:	f5 0b       	sbc	r31, r21

0000324c <__udivmodsi4_ep>:
    324c:	66 1f       	adc	r22, r22
    324e:	77 1f       	adc	r23, r23
    3250:	88 1f       	adc	r24, r24
    3252:	99 1f       	adc	r25, r25
    3254:	1a 94       	dec	r1
    3256:	69 f7       	brne	.-38     	; 0x3232 <__udivmodsi4_loop>
    3258:	60 95       	com	r22
    325a:	70 95       	com	r23
    325c:	80 95       	com	r24
    325e:	90 95       	com	r25
    3260:	9b 01       	movw	r18, r22
    3262:	ac 01       	movw	r20, r24
    3264:	bd 01       	movw	r22, r26
    3266:	cf 01       	movw	r24, r30
    3268:	08 95       	ret

0000326a <__prologue_saves__>:
    326a:	2f 92       	push	r2
    326c:	3f 92       	push	r3
    326e:	4f 92       	push	r4
    3270:	5f 92       	push	r5
    3272:	6f 92       	push	r6
    3274:	7f 92       	push	r7
    3276:	8f 92       	push	r8
    3278:	9f 92       	push	r9
    327a:	af 92       	push	r10
    327c:	bf 92       	push	r11
    327e:	cf 92       	push	r12
    3280:	df 92       	push	r13
    3282:	ef 92       	push	r14
    3284:	ff 92       	push	r15
    3286:	0f 93       	push	r16
    3288:	1f 93       	push	r17
    328a:	cf 93       	push	r28
    328c:	df 93       	push	r29
    328e:	cd b7       	in	r28, 0x3d	; 61
    3290:	de b7       	in	r29, 0x3e	; 62
    3292:	ca 1b       	sub	r28, r26
    3294:	db 0b       	sbc	r29, r27
    3296:	0f b6       	in	r0, 0x3f	; 63
    3298:	f8 94       	cli
    329a:	de bf       	out	0x3e, r29	; 62
    329c:	0f be       	out	0x3f, r0	; 63
    329e:	cd bf       	out	0x3d, r28	; 61
    32a0:	09 94       	ijmp

000032a2 <__epilogue_restores__>:
    32a2:	2a 88       	ldd	r2, Y+18	; 0x12
    32a4:	39 88       	ldd	r3, Y+17	; 0x11
    32a6:	48 88       	ldd	r4, Y+16	; 0x10
    32a8:	5f 84       	ldd	r5, Y+15	; 0x0f
    32aa:	6e 84       	ldd	r6, Y+14	; 0x0e
    32ac:	7d 84       	ldd	r7, Y+13	; 0x0d
    32ae:	8c 84       	ldd	r8, Y+12	; 0x0c
    32b0:	9b 84       	ldd	r9, Y+11	; 0x0b
    32b2:	aa 84       	ldd	r10, Y+10	; 0x0a
    32b4:	b9 84       	ldd	r11, Y+9	; 0x09
    32b6:	c8 84       	ldd	r12, Y+8	; 0x08
    32b8:	df 80       	ldd	r13, Y+7	; 0x07
    32ba:	ee 80       	ldd	r14, Y+6	; 0x06
    32bc:	fd 80       	ldd	r15, Y+5	; 0x05
    32be:	0c 81       	ldd	r16, Y+4	; 0x04
    32c0:	1b 81       	ldd	r17, Y+3	; 0x03
    32c2:	aa 81       	ldd	r26, Y+2	; 0x02
    32c4:	b9 81       	ldd	r27, Y+1	; 0x01
    32c6:	ce 0f       	add	r28, r30
    32c8:	d1 1d       	adc	r29, r1
    32ca:	0f b6       	in	r0, 0x3f	; 63
    32cc:	f8 94       	cli
    32ce:	de bf       	out	0x3e, r29	; 62
    32d0:	0f be       	out	0x3f, r0	; 63
    32d2:	cd bf       	out	0x3d, r28	; 61
    32d4:	ed 01       	movw	r28, r26
    32d6:	08 95       	ret

000032d8 <itoa>:
    32d8:	fb 01       	movw	r30, r22
    32da:	9f 01       	movw	r18, r30
    32dc:	e8 94       	clt
    32de:	42 30       	cpi	r20, 0x02	; 2
    32e0:	c4 f0       	brlt	.+48     	; 0x3312 <itoa+0x3a>
    32e2:	45 32       	cpi	r20, 0x25	; 37
    32e4:	b4 f4       	brge	.+44     	; 0x3312 <itoa+0x3a>
    32e6:	4a 30       	cpi	r20, 0x0A	; 10
    32e8:	29 f4       	brne	.+10     	; 0x32f4 <itoa+0x1c>
    32ea:	97 fb       	bst	r25, 7
    32ec:	1e f4       	brtc	.+6      	; 0x32f4 <itoa+0x1c>
    32ee:	90 95       	com	r25
    32f0:	81 95       	neg	r24
    32f2:	9f 4f       	sbci	r25, 0xFF	; 255
    32f4:	64 2f       	mov	r22, r20
    32f6:	77 27       	eor	r23, r23
    32f8:	0e 94 9d 19 	call	0x333a	; 0x333a <__udivmodhi4>
    32fc:	80 5d       	subi	r24, 0xD0	; 208
    32fe:	8a 33       	cpi	r24, 0x3A	; 58
    3300:	0c f0       	brlt	.+2      	; 0x3304 <itoa+0x2c>
    3302:	89 5d       	subi	r24, 0xD9	; 217
    3304:	81 93       	st	Z+, r24
    3306:	cb 01       	movw	r24, r22
    3308:	00 97       	sbiw	r24, 0x00	; 0
    330a:	a1 f7       	brne	.-24     	; 0x32f4 <itoa+0x1c>
    330c:	16 f4       	brtc	.+4      	; 0x3312 <itoa+0x3a>
    330e:	5d e2       	ldi	r21, 0x2D	; 45
    3310:	51 93       	st	Z+, r21
    3312:	10 82       	st	Z, r1
    3314:	c9 01       	movw	r24, r18
    3316:	0c 94 8d 19 	jmp	0x331a	; 0x331a <strrev>

0000331a <strrev>:
    331a:	dc 01       	movw	r26, r24
    331c:	fc 01       	movw	r30, r24
    331e:	67 2f       	mov	r22, r23
    3320:	71 91       	ld	r23, Z+
    3322:	77 23       	and	r23, r23
    3324:	e1 f7       	brne	.-8      	; 0x331e <strrev+0x4>
    3326:	32 97       	sbiw	r30, 0x02	; 2
    3328:	04 c0       	rjmp	.+8      	; 0x3332 <strrev+0x18>
    332a:	7c 91       	ld	r23, X
    332c:	6d 93       	st	X+, r22
    332e:	70 83       	st	Z, r23
    3330:	62 91       	ld	r22, -Z
    3332:	ae 17       	cp	r26, r30
    3334:	bf 07       	cpc	r27, r31
    3336:	c8 f3       	brcs	.-14     	; 0x332a <strrev+0x10>
    3338:	08 95       	ret

0000333a <__udivmodhi4>:
    333a:	aa 1b       	sub	r26, r26
    333c:	bb 1b       	sub	r27, r27
    333e:	51 e1       	ldi	r21, 0x11	; 17
    3340:	07 c0       	rjmp	.+14     	; 0x3350 <__udivmodhi4_ep>

00003342 <__udivmodhi4_loop>:
    3342:	aa 1f       	adc	r26, r26
    3344:	bb 1f       	adc	r27, r27
    3346:	a6 17       	cp	r26, r22
    3348:	b7 07       	cpc	r27, r23
    334a:	10 f0       	brcs	.+4      	; 0x3350 <__udivmodhi4_ep>
    334c:	a6 1b       	sub	r26, r22
    334e:	b7 0b       	sbc	r27, r23

00003350 <__udivmodhi4_ep>:
    3350:	88 1f       	adc	r24, r24
    3352:	99 1f       	adc	r25, r25
    3354:	5a 95       	dec	r21
    3356:	a9 f7       	brne	.-22     	; 0x3342 <__udivmodhi4_loop>
    3358:	80 95       	com	r24
    335a:	90 95       	com	r25
    335c:	bc 01       	movw	r22, r24
    335e:	cd 01       	movw	r24, r26
    3360:	08 95       	ret

00003362 <_exit>:
    3362:	f8 94       	cli

00003364 <__stop_program>:
    3364:	ff cf       	rjmp	.-2      	; 0x3364 <__stop_program>
