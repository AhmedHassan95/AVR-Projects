
Control_ECU.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000023e2  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000024  00800060  000023e2  00002476  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000001e  00800084  00800084  0000249a  2**0
                  ALLOC
  3 .stab         000028e0  00000000  00000000  0000249c  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00001671  00000000  00000000  00004d7c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  000063ed  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  0000652d  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  0000669d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  000082e6  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  000091d1  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  00009f80  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  0000a0e0  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  0000a36d  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000ab3b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 29 0d 	jmp	0x1a52	; 0x1a52 <__vector_3>
      10:	0c 94 f6 0c 	jmp	0x19ec	; 0x19ec <__vector_4>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 c3 0c 	jmp	0x1986	; 0x1986 <__vector_6>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 90 0c 	jmp	0x1920	; 0x1920 <__vector_8>
      24:	0c 94 2a 0c 	jmp	0x1854	; 0x1854 <__vector_9>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 5d 0c 	jmp	0x18ba	; 0x18ba <__vector_19>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d4 e0       	ldi	r29, 0x04	; 4
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e2 ee       	ldi	r30, 0xE2	; 226
      68:	f3 e2       	ldi	r31, 0x23	; 35
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a4 38       	cpi	r26, 0x84	; 132
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	10 e0       	ldi	r17, 0x00	; 0
      78:	a4 e8       	ldi	r26, 0x84	; 132
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a2 3a       	cpi	r26, 0xA2	; 162
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 ca 08 	call	0x1194	; 0x1194 <main>
      8a:	0c 94 ef 11 	jmp	0x23de	; 0x23de <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 b8 11 	jmp	0x2370	; 0x2370 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a0 e6       	ldi	r26, 0x60	; 96
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 d4 11 	jmp	0x23a8	; 0x23a8 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 c4 11 	jmp	0x2388	; 0x2388 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 e0 11 	jmp	0x23c0	; 0x23c0 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 c4 11 	jmp	0x2388	; 0x2388 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 e0 11 	jmp	0x23c0	; 0x23c0 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 b8 11 	jmp	0x2370	; 0x2370 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__stack+0x3f>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__stack+0x55>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__stack+0x2d>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__stack+0x3f>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__stack+0x35>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__stack+0x3b>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__stack+0x55>
     494:	80 e6       	ldi	r24, 0x60	; 96
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__stack+0x1c7>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__stack+0x51>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__stack+0x1c7>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__stack+0x67>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__stack+0x1c7>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__stack+0xd3>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__stack+0xc7>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__stack+0xef>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__stack+0x109>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__stack+0x8f>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__stack+0x14d>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__stack+0x141>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__stack+0x11f>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__stack+0x16b>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__stack+0x153>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__stack+0x1ad>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__stack+0x1ad>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__stack+0x1ad>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__stack+0x1b7>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 d4 11 	jmp	0x23a8	; 0x23a8 <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 c4 11 	jmp	0x2388	; 0x2388 <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 e0 11 	jmp	0x23c0	; 0x23c0 <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 c4 11 	jmp	0x2388	; 0x2388 <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 e0 11 	jmp	0x23c0	; 0x23c0 <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 c4 11 	jmp	0x2388	; 0x2388 <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 e0 11 	jmp	0x23c0	; 0x23c0 <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 c8 11 	jmp	0x2390	; 0x2390 <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 e4 11 	jmp	0x23c8	; 0x23c8 <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__pack_f+0x178>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__pack_f+0x172>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__pack_f+0x17c>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__pack_f+0x114>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__pack_f+0x76>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__pack_f+0xca>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__pack_f+0x86>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__pack_f+0x7e>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__pack_f+0x9c>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__pack_f+0x94>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__pack_f+0xbe>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__pack_f+0xee>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__pack_f+0xf6>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__pack_f+0xf6>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__pack_f+0x10e>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__pack_f+0x162>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__pack_f+0x172>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__pack_f+0x144>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__pack_f+0x154>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__pack_f+0x14c>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__pack_f+0x162>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__pack_f+0x164>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__pack_f+0x17c>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <APP_checkPasswordMismatch>:
 * [in/out]		 	None
 *
 * [Returns]:       Result of the comparison between two passwords
 **********************************************************************************/
uint8 APP_checkPasswordMismatch(uint8 * Password1_Ptr , uint8 * Password2_Ptr)
{
     b46:	df 93       	push	r29
     b48:	cf 93       	push	r28
     b4a:	00 d0       	rcall	.+0      	; 0xb4c <APP_checkPasswordMismatch+0x6>
     b4c:	00 d0       	rcall	.+0      	; 0xb4e <APP_checkPasswordMismatch+0x8>
     b4e:	00 d0       	rcall	.+0      	; 0xb50 <APP_checkPasswordMismatch+0xa>
     b50:	cd b7       	in	r28, 0x3d	; 61
     b52:	de b7       	in	r29, 0x3e	; 62
     b54:	9c 83       	std	Y+4, r25	; 0x04
     b56:	8b 83       	std	Y+3, r24	; 0x03
     b58:	7e 83       	std	Y+6, r23	; 0x06
     b5a:	6d 83       	std	Y+5, r22	; 0x05
	uint8 counter;	/* Local variable used as a counter for the for Loop */
	uint8 password_match = 0;	/* Local variable used to store password status */
     b5c:	19 82       	std	Y+1, r1	; 0x01

	for(counter = 0; counter < PASSWORD_WIDTH  ;counter++)
     b5e:	1a 82       	std	Y+2, r1	; 0x02
     b60:	1a c0       	rjmp	.+52     	; 0xb96 <APP_checkPasswordMismatch+0x50>
	{
		/* Check if the two passwords are identical or not */
		if(Password1_Ptr[counter] != Password2_Ptr[counter])
     b62:	8a 81       	ldd	r24, Y+2	; 0x02
     b64:	28 2f       	mov	r18, r24
     b66:	30 e0       	ldi	r19, 0x00	; 0
     b68:	8b 81       	ldd	r24, Y+3	; 0x03
     b6a:	9c 81       	ldd	r25, Y+4	; 0x04
     b6c:	fc 01       	movw	r30, r24
     b6e:	e2 0f       	add	r30, r18
     b70:	f3 1f       	adc	r31, r19
     b72:	40 81       	ld	r20, Z
     b74:	8a 81       	ldd	r24, Y+2	; 0x02
     b76:	28 2f       	mov	r18, r24
     b78:	30 e0       	ldi	r19, 0x00	; 0
     b7a:	8d 81       	ldd	r24, Y+5	; 0x05
     b7c:	9e 81       	ldd	r25, Y+6	; 0x06
     b7e:	fc 01       	movw	r30, r24
     b80:	e2 0f       	add	r30, r18
     b82:	f3 1f       	adc	r31, r19
     b84:	80 81       	ld	r24, Z
     b86:	48 17       	cp	r20, r24
     b88:	19 f0       	breq	.+6      	; 0xb90 <APP_checkPasswordMismatch+0x4a>
		{
			/*
			 * If two passwords are not identical, change password_match value,
			 * then break the loop as there is no need to continue looping
			 */
			password_match = MISMATCHED;
     b8a:	81 e0       	ldi	r24, 0x01	; 1
     b8c:	89 83       	std	Y+1, r24	; 0x01
     b8e:	06 c0       	rjmp	.+12     	; 0xb9c <APP_checkPasswordMismatch+0x56>
uint8 APP_checkPasswordMismatch(uint8 * Password1_Ptr , uint8 * Password2_Ptr)
{
	uint8 counter;	/* Local variable used as a counter for the for Loop */
	uint8 password_match = 0;	/* Local variable used to store password status */

	for(counter = 0; counter < PASSWORD_WIDTH  ;counter++)
     b90:	8a 81       	ldd	r24, Y+2	; 0x02
     b92:	8f 5f       	subi	r24, 0xFF	; 255
     b94:	8a 83       	std	Y+2, r24	; 0x02
     b96:	8a 81       	ldd	r24, Y+2	; 0x02
     b98:	85 30       	cpi	r24, 0x05	; 5
     b9a:	18 f3       	brcs	.-58     	; 0xb62 <APP_checkPasswordMismatch+0x1c>
			 */
			password_match = MISMATCHED;
			break;
		}
	}
	return password_match ;
     b9c:	89 81       	ldd	r24, Y+1	; 0x01
}
     b9e:	26 96       	adiw	r28, 0x06	; 6
     ba0:	0f b6       	in	r0, 0x3f	; 63
     ba2:	f8 94       	cli
     ba4:	de bf       	out	0x3e, r29	; 62
     ba6:	0f be       	out	0x3f, r0	; 63
     ba8:	cd bf       	out	0x3d, r28	; 61
     baa:	cf 91       	pop	r28
     bac:	df 91       	pop	r29
     bae:	08 95       	ret

00000bb0 <APP_receiveNewPassword>:
 * [in/out]		 	None
 *
 * [Returns]:       None
 **********************************************************************************/
void APP_receiveNewPassword(uint8 * Password_Ptr)
{
     bb0:	0f 93       	push	r16
     bb2:	1f 93       	push	r17
     bb4:	df 93       	push	r29
     bb6:	cf 93       	push	r28
     bb8:	cd b7       	in	r28, 0x3d	; 61
     bba:	de b7       	in	r29, 0x3e	; 62
     bbc:	60 97       	sbiw	r28, 0x10	; 16
     bbe:	0f b6       	in	r0, 0x3f	; 63
     bc0:	f8 94       	cli
     bc2:	de bf       	out	0x3e, r29	; 62
     bc4:	0f be       	out	0x3f, r0	; 63
     bc6:	cd bf       	out	0x3d, r28	; 61
     bc8:	98 8b       	std	Y+16, r25	; 0x10
     bca:	8f 87       	std	Y+15, r24	; 0x0f
	static uint8 counter;

	/* For loop to receive the new password send by HMI ECU to be stored in the EEPROM */
	for(counter = 0; counter < PASSWORD_WIDTH ;counter++)
     bcc:	10 92 87 00 	sts	0x0087, r1
     bd0:	99 c0       	rjmp	.+306    	; 0xd04 <APP_receiveNewPassword+0x154>
	{
		/* Check if the HMI ECU is ready */
		UART_sendByte(ECU_READY);
     bd2:	80 e1       	ldi	r24, 0x10	; 16
     bd4:	0e 94 b4 10 	call	0x2168	; 0x2168 <UART_sendByte>

		/* Receive 1 Byte of the new password from the HMI ECU */
		Password_Ptr[counter] = UART_recieveByte();
     bd8:	80 91 87 00 	lds	r24, 0x0087
     bdc:	28 2f       	mov	r18, r24
     bde:	30 e0       	ldi	r19, 0x00	; 0
     be0:	8f 85       	ldd	r24, Y+15	; 0x0f
     be2:	98 89       	ldd	r25, Y+16	; 0x10
     be4:	8c 01       	movw	r16, r24
     be6:	02 0f       	add	r16, r18
     be8:	13 1f       	adc	r17, r19
     bea:	0e 94 cb 10 	call	0x2196	; 0x2196 <UART_recieveByte>
     bee:	f8 01       	movw	r30, r16
     bf0:	80 83       	st	Z, r24
		 * Store 1 Byte of the new password in the EEPROM
		 * To store password consists of 5 digits (5 characters), we need each time to
		 * increment the address location by 1 character, or by making OR with the
		 * address location ( ADDRESS_PASSWORD_STORED | counter )
		 */
		EEPROM_writeByte(( ADDRESS_PASSWORD_STORED | counter ), Password_Ptr[counter]);
     bf2:	80 91 87 00 	lds	r24, 0x0087
     bf6:	48 2f       	mov	r20, r24
     bf8:	50 e0       	ldi	r21, 0x00	; 0
     bfa:	80 91 87 00 	lds	r24, 0x0087
     bfe:	28 2f       	mov	r18, r24
     c00:	30 e0       	ldi	r19, 0x00	; 0
     c02:	8f 85       	ldd	r24, Y+15	; 0x0f
     c04:	98 89       	ldd	r25, Y+16	; 0x10
     c06:	fc 01       	movw	r30, r24
     c08:	e2 0f       	add	r30, r18
     c0a:	f3 1f       	adc	r31, r19
     c0c:	20 81       	ld	r18, Z
     c0e:	ca 01       	movw	r24, r20
     c10:	62 2f       	mov	r22, r18
     c12:	0e 94 73 0a 	call	0x14e6	; 0x14e6 <EEPROM_writeByte>
     c16:	80 e0       	ldi	r24, 0x00	; 0
     c18:	90 e0       	ldi	r25, 0x00	; 0
     c1a:	a8 ec       	ldi	r26, 0xC8	; 200
     c1c:	b2 e4       	ldi	r27, 0x42	; 66
     c1e:	8b 87       	std	Y+11, r24	; 0x0b
     c20:	9c 87       	std	Y+12, r25	; 0x0c
     c22:	ad 87       	std	Y+13, r26	; 0x0d
     c24:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     c26:	6b 85       	ldd	r22, Y+11	; 0x0b
     c28:	7c 85       	ldd	r23, Y+12	; 0x0c
     c2a:	8d 85       	ldd	r24, Y+13	; 0x0d
     c2c:	9e 85       	ldd	r25, Y+14	; 0x0e
     c2e:	20 e0       	ldi	r18, 0x00	; 0
     c30:	30 e0       	ldi	r19, 0x00	; 0
     c32:	4a ef       	ldi	r20, 0xFA	; 250
     c34:	54 e4       	ldi	r21, 0x44	; 68
     c36:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     c3a:	dc 01       	movw	r26, r24
     c3c:	cb 01       	movw	r24, r22
     c3e:	8f 83       	std	Y+7, r24	; 0x07
     c40:	98 87       	std	Y+8, r25	; 0x08
     c42:	a9 87       	std	Y+9, r26	; 0x09
     c44:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     c46:	6f 81       	ldd	r22, Y+7	; 0x07
     c48:	78 85       	ldd	r23, Y+8	; 0x08
     c4a:	89 85       	ldd	r24, Y+9	; 0x09
     c4c:	9a 85       	ldd	r25, Y+10	; 0x0a
     c4e:	20 e0       	ldi	r18, 0x00	; 0
     c50:	30 e0       	ldi	r19, 0x00	; 0
     c52:	40 e8       	ldi	r20, 0x80	; 128
     c54:	5f e3       	ldi	r21, 0x3F	; 63
     c56:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     c5a:	88 23       	and	r24, r24
     c5c:	2c f4       	brge	.+10     	; 0xc68 <APP_receiveNewPassword+0xb8>
		__ticks = 1;
     c5e:	81 e0       	ldi	r24, 0x01	; 1
     c60:	90 e0       	ldi	r25, 0x00	; 0
     c62:	9e 83       	std	Y+6, r25	; 0x06
     c64:	8d 83       	std	Y+5, r24	; 0x05
     c66:	3f c0       	rjmp	.+126    	; 0xce6 <APP_receiveNewPassword+0x136>
	else if (__tmp > 65535)
     c68:	6f 81       	ldd	r22, Y+7	; 0x07
     c6a:	78 85       	ldd	r23, Y+8	; 0x08
     c6c:	89 85       	ldd	r24, Y+9	; 0x09
     c6e:	9a 85       	ldd	r25, Y+10	; 0x0a
     c70:	20 e0       	ldi	r18, 0x00	; 0
     c72:	3f ef       	ldi	r19, 0xFF	; 255
     c74:	4f e7       	ldi	r20, 0x7F	; 127
     c76:	57 e4       	ldi	r21, 0x47	; 71
     c78:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     c7c:	18 16       	cp	r1, r24
     c7e:	4c f5       	brge	.+82     	; 0xcd2 <APP_receiveNewPassword+0x122>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     c80:	6b 85       	ldd	r22, Y+11	; 0x0b
     c82:	7c 85       	ldd	r23, Y+12	; 0x0c
     c84:	8d 85       	ldd	r24, Y+13	; 0x0d
     c86:	9e 85       	ldd	r25, Y+14	; 0x0e
     c88:	20 e0       	ldi	r18, 0x00	; 0
     c8a:	30 e0       	ldi	r19, 0x00	; 0
     c8c:	40 e2       	ldi	r20, 0x20	; 32
     c8e:	51 e4       	ldi	r21, 0x41	; 65
     c90:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     c94:	dc 01       	movw	r26, r24
     c96:	cb 01       	movw	r24, r22
     c98:	bc 01       	movw	r22, r24
     c9a:	cd 01       	movw	r24, r26
     c9c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     ca0:	dc 01       	movw	r26, r24
     ca2:	cb 01       	movw	r24, r22
     ca4:	9e 83       	std	Y+6, r25	; 0x06
     ca6:	8d 83       	std	Y+5, r24	; 0x05
     ca8:	0f c0       	rjmp	.+30     	; 0xcc8 <APP_receiveNewPassword+0x118>
     caa:	88 ec       	ldi	r24, 0xC8	; 200
     cac:	90 e0       	ldi	r25, 0x00	; 0
     cae:	9c 83       	std	Y+4, r25	; 0x04
     cb0:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     cb2:	8b 81       	ldd	r24, Y+3	; 0x03
     cb4:	9c 81       	ldd	r25, Y+4	; 0x04
     cb6:	01 97       	sbiw	r24, 0x01	; 1
     cb8:	f1 f7       	brne	.-4      	; 0xcb6 <APP_receiveNewPassword+0x106>
     cba:	9c 83       	std	Y+4, r25	; 0x04
     cbc:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     cbe:	8d 81       	ldd	r24, Y+5	; 0x05
     cc0:	9e 81       	ldd	r25, Y+6	; 0x06
     cc2:	01 97       	sbiw	r24, 0x01	; 1
     cc4:	9e 83       	std	Y+6, r25	; 0x06
     cc6:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     cc8:	8d 81       	ldd	r24, Y+5	; 0x05
     cca:	9e 81       	ldd	r25, Y+6	; 0x06
     ccc:	00 97       	sbiw	r24, 0x00	; 0
     cce:	69 f7       	brne	.-38     	; 0xcaa <APP_receiveNewPassword+0xfa>
     cd0:	14 c0       	rjmp	.+40     	; 0xcfa <APP_receiveNewPassword+0x14a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     cd2:	6f 81       	ldd	r22, Y+7	; 0x07
     cd4:	78 85       	ldd	r23, Y+8	; 0x08
     cd6:	89 85       	ldd	r24, Y+9	; 0x09
     cd8:	9a 85       	ldd	r25, Y+10	; 0x0a
     cda:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     cde:	dc 01       	movw	r26, r24
     ce0:	cb 01       	movw	r24, r22
     ce2:	9e 83       	std	Y+6, r25	; 0x06
     ce4:	8d 83       	std	Y+5, r24	; 0x05
     ce6:	8d 81       	ldd	r24, Y+5	; 0x05
     ce8:	9e 81       	ldd	r25, Y+6	; 0x06
     cea:	9a 83       	std	Y+2, r25	; 0x02
     cec:	89 83       	std	Y+1, r24	; 0x01
     cee:	89 81       	ldd	r24, Y+1	; 0x01
     cf0:	9a 81       	ldd	r25, Y+2	; 0x02
     cf2:	01 97       	sbiw	r24, 0x01	; 1
     cf4:	f1 f7       	brne	.-4      	; 0xcf2 <APP_receiveNewPassword+0x142>
     cf6:	9a 83       	std	Y+2, r25	; 0x02
     cf8:	89 83       	std	Y+1, r24	; 0x01
void APP_receiveNewPassword(uint8 * Password_Ptr)
{
	static uint8 counter;

	/* For loop to receive the new password send by HMI ECU to be stored in the EEPROM */
	for(counter = 0; counter < PASSWORD_WIDTH ;counter++)
     cfa:	80 91 87 00 	lds	r24, 0x0087
     cfe:	8f 5f       	subi	r24, 0xFF	; 255
     d00:	80 93 87 00 	sts	0x0087, r24
     d04:	80 91 87 00 	lds	r24, 0x0087
     d08:	85 30       	cpi	r24, 0x05	; 5
     d0a:	08 f4       	brcc	.+2      	; 0xd0e <APP_receiveNewPassword+0x15e>
     d0c:	62 cf       	rjmp	.-316    	; 0xbd2 <APP_receiveNewPassword+0x22>
		 */
		EEPROM_writeByte(( ADDRESS_PASSWORD_STORED | counter ), Password_Ptr[counter]);

		_delay_ms(STORE_TIME); /* Give the EEPROM some time to store 1 Byte */
	}
}
     d0e:	60 96       	adiw	r28, 0x10	; 16
     d10:	0f b6       	in	r0, 0x3f	; 63
     d12:	f8 94       	cli
     d14:	de bf       	out	0x3e, r29	; 62
     d16:	0f be       	out	0x3f, r0	; 63
     d18:	cd bf       	out	0x3d, r28	; 61
     d1a:	cf 91       	pop	r28
     d1c:	df 91       	pop	r29
     d1e:	1f 91       	pop	r17
     d20:	0f 91       	pop	r16
     d22:	08 95       	ret

00000d24 <APP_receiveCurrentPassword>:
 * [in/out]		 	None
 *
 * [Returns]:       None
 **********************************************************************************/
void APP_receiveCurrentPassword(uint8 * Password_Ptr)
{
     d24:	0f 93       	push	r16
     d26:	1f 93       	push	r17
     d28:	df 93       	push	r29
     d2a:	cf 93       	push	r28
     d2c:	00 d0       	rcall	.+0      	; 0xd2e <APP_receiveCurrentPassword+0xa>
     d2e:	cd b7       	in	r28, 0x3d	; 61
     d30:	de b7       	in	r29, 0x3e	; 62
     d32:	9a 83       	std	Y+2, r25	; 0x02
     d34:	89 83       	std	Y+1, r24	; 0x01
	static uint8 counter;

	/* For loop to receive the current password send by HMI ECU */
	for(counter = 0; counter < PASSWORD_WIDTH ;counter++)
     d36:	10 92 88 00 	sts	0x0088, r1
     d3a:	15 c0       	rjmp	.+42     	; 0xd66 <APP_receiveCurrentPassword+0x42>
	{
		/* Check if the HMI ECU is ready */
		UART_sendByte(ECU_READY);
     d3c:	80 e1       	ldi	r24, 0x10	; 16
     d3e:	0e 94 b4 10 	call	0x2168	; 0x2168 <UART_sendByte>

		/* Receive 1 Byte of the current password from the HMI ECU */
		Password_Ptr[counter] = UART_recieveByte();
     d42:	80 91 88 00 	lds	r24, 0x0088
     d46:	28 2f       	mov	r18, r24
     d48:	30 e0       	ldi	r19, 0x00	; 0
     d4a:	89 81       	ldd	r24, Y+1	; 0x01
     d4c:	9a 81       	ldd	r25, Y+2	; 0x02
     d4e:	8c 01       	movw	r16, r24
     d50:	02 0f       	add	r16, r18
     d52:	13 1f       	adc	r17, r19
     d54:	0e 94 cb 10 	call	0x2196	; 0x2196 <UART_recieveByte>
     d58:	f8 01       	movw	r30, r16
     d5a:	80 83       	st	Z, r24
void APP_receiveCurrentPassword(uint8 * Password_Ptr)
{
	static uint8 counter;

	/* For loop to receive the current password send by HMI ECU */
	for(counter = 0; counter < PASSWORD_WIDTH ;counter++)
     d5c:	80 91 88 00 	lds	r24, 0x0088
     d60:	8f 5f       	subi	r24, 0xFF	; 255
     d62:	80 93 88 00 	sts	0x0088, r24
     d66:	80 91 88 00 	lds	r24, 0x0088
     d6a:	85 30       	cpi	r24, 0x05	; 5
     d6c:	38 f3       	brcs	.-50     	; 0xd3c <APP_receiveCurrentPassword+0x18>
		UART_sendByte(ECU_READY);

		/* Receive 1 Byte of the current password from the HMI ECU */
		Password_Ptr[counter] = UART_recieveByte();
	}
}
     d6e:	0f 90       	pop	r0
     d70:	0f 90       	pop	r0
     d72:	cf 91       	pop	r28
     d74:	df 91       	pop	r29
     d76:	1f 91       	pop	r17
     d78:	0f 91       	pop	r16
     d7a:	08 95       	ret

00000d7c <APP_readOldPassword>:
 * [in/out]		 	None
 *
 * [Returns]:       None
 **********************************************************************************/
void APP_readOldPassword(void)
{
     d7c:	df 93       	push	r29
     d7e:	cf 93       	push	r28
     d80:	cd b7       	in	r28, 0x3d	; 61
     d82:	de b7       	in	r29, 0x3e	; 62
     d84:	2e 97       	sbiw	r28, 0x0e	; 14
     d86:	0f b6       	in	r0, 0x3f	; 63
     d88:	f8 94       	cli
     d8a:	de bf       	out	0x3e, r29	; 62
     d8c:	0f be       	out	0x3f, r0	; 63
     d8e:	cd bf       	out	0x3d, r28	; 61
	static uint8 counter;

	/* For loop to read the old password stored in the EEPROM */
	for(counter = 0; counter < PASSWORD_WIDTH ;counter++)
     d90:	10 92 89 00 	sts	0x0089, r1
     d94:	86 c0       	rjmp	.+268    	; 0xea2 <APP_readOldPassword+0x126>
		 * Read 1 Byte of the old password from the EEPROM
		 * To read password consists of 5 digits (5 characters), we need each time to
		 * increment the address location by 1 character, or by making OR with the
		 * address location ( ADDRESS_PASSWORD_STORED | counter )
		 */
		EEPROM_readByte( (ADDRESS_PASSWORD_STORED | counter), &g_oldPassword[counter]);
     d96:	80 91 89 00 	lds	r24, 0x0089
     d9a:	48 2f       	mov	r20, r24
     d9c:	50 e0       	ldi	r21, 0x00	; 0
     d9e:	80 91 89 00 	lds	r24, 0x0089
     da2:	88 2f       	mov	r24, r24
     da4:	90 e0       	ldi	r25, 0x00	; 0
     da6:	9c 01       	movw	r18, r24
     da8:	23 56       	subi	r18, 0x63	; 99
     daa:	3f 4f       	sbci	r19, 0xFF	; 255
     dac:	ca 01       	movw	r24, r20
     dae:	b9 01       	movw	r22, r18
     db0:	0e 94 b4 0a 	call	0x1568	; 0x1568 <EEPROM_readByte>
     db4:	80 e0       	ldi	r24, 0x00	; 0
     db6:	90 e0       	ldi	r25, 0x00	; 0
     db8:	a8 ec       	ldi	r26, 0xC8	; 200
     dba:	b2 e4       	ldi	r27, 0x42	; 66
     dbc:	8b 87       	std	Y+11, r24	; 0x0b
     dbe:	9c 87       	std	Y+12, r25	; 0x0c
     dc0:	ad 87       	std	Y+13, r26	; 0x0d
     dc2:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     dc4:	6b 85       	ldd	r22, Y+11	; 0x0b
     dc6:	7c 85       	ldd	r23, Y+12	; 0x0c
     dc8:	8d 85       	ldd	r24, Y+13	; 0x0d
     dca:	9e 85       	ldd	r25, Y+14	; 0x0e
     dcc:	20 e0       	ldi	r18, 0x00	; 0
     dce:	30 e0       	ldi	r19, 0x00	; 0
     dd0:	4a ef       	ldi	r20, 0xFA	; 250
     dd2:	54 e4       	ldi	r21, 0x44	; 68
     dd4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     dd8:	dc 01       	movw	r26, r24
     dda:	cb 01       	movw	r24, r22
     ddc:	8f 83       	std	Y+7, r24	; 0x07
     dde:	98 87       	std	Y+8, r25	; 0x08
     de0:	a9 87       	std	Y+9, r26	; 0x09
     de2:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     de4:	6f 81       	ldd	r22, Y+7	; 0x07
     de6:	78 85       	ldd	r23, Y+8	; 0x08
     de8:	89 85       	ldd	r24, Y+9	; 0x09
     dea:	9a 85       	ldd	r25, Y+10	; 0x0a
     dec:	20 e0       	ldi	r18, 0x00	; 0
     dee:	30 e0       	ldi	r19, 0x00	; 0
     df0:	40 e8       	ldi	r20, 0x80	; 128
     df2:	5f e3       	ldi	r21, 0x3F	; 63
     df4:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     df8:	88 23       	and	r24, r24
     dfa:	2c f4       	brge	.+10     	; 0xe06 <APP_readOldPassword+0x8a>
		__ticks = 1;
     dfc:	81 e0       	ldi	r24, 0x01	; 1
     dfe:	90 e0       	ldi	r25, 0x00	; 0
     e00:	9e 83       	std	Y+6, r25	; 0x06
     e02:	8d 83       	std	Y+5, r24	; 0x05
     e04:	3f c0       	rjmp	.+126    	; 0xe84 <APP_readOldPassword+0x108>
	else if (__tmp > 65535)
     e06:	6f 81       	ldd	r22, Y+7	; 0x07
     e08:	78 85       	ldd	r23, Y+8	; 0x08
     e0a:	89 85       	ldd	r24, Y+9	; 0x09
     e0c:	9a 85       	ldd	r25, Y+10	; 0x0a
     e0e:	20 e0       	ldi	r18, 0x00	; 0
     e10:	3f ef       	ldi	r19, 0xFF	; 255
     e12:	4f e7       	ldi	r20, 0x7F	; 127
     e14:	57 e4       	ldi	r21, 0x47	; 71
     e16:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     e1a:	18 16       	cp	r1, r24
     e1c:	4c f5       	brge	.+82     	; 0xe70 <APP_readOldPassword+0xf4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     e1e:	6b 85       	ldd	r22, Y+11	; 0x0b
     e20:	7c 85       	ldd	r23, Y+12	; 0x0c
     e22:	8d 85       	ldd	r24, Y+13	; 0x0d
     e24:	9e 85       	ldd	r25, Y+14	; 0x0e
     e26:	20 e0       	ldi	r18, 0x00	; 0
     e28:	30 e0       	ldi	r19, 0x00	; 0
     e2a:	40 e2       	ldi	r20, 0x20	; 32
     e2c:	51 e4       	ldi	r21, 0x41	; 65
     e2e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     e32:	dc 01       	movw	r26, r24
     e34:	cb 01       	movw	r24, r22
     e36:	bc 01       	movw	r22, r24
     e38:	cd 01       	movw	r24, r26
     e3a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     e3e:	dc 01       	movw	r26, r24
     e40:	cb 01       	movw	r24, r22
     e42:	9e 83       	std	Y+6, r25	; 0x06
     e44:	8d 83       	std	Y+5, r24	; 0x05
     e46:	0f c0       	rjmp	.+30     	; 0xe66 <APP_readOldPassword+0xea>
     e48:	88 ec       	ldi	r24, 0xC8	; 200
     e4a:	90 e0       	ldi	r25, 0x00	; 0
     e4c:	9c 83       	std	Y+4, r25	; 0x04
     e4e:	8b 83       	std	Y+3, r24	; 0x03
     e50:	8b 81       	ldd	r24, Y+3	; 0x03
     e52:	9c 81       	ldd	r25, Y+4	; 0x04
     e54:	01 97       	sbiw	r24, 0x01	; 1
     e56:	f1 f7       	brne	.-4      	; 0xe54 <APP_readOldPassword+0xd8>
     e58:	9c 83       	std	Y+4, r25	; 0x04
     e5a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     e5c:	8d 81       	ldd	r24, Y+5	; 0x05
     e5e:	9e 81       	ldd	r25, Y+6	; 0x06
     e60:	01 97       	sbiw	r24, 0x01	; 1
     e62:	9e 83       	std	Y+6, r25	; 0x06
     e64:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     e66:	8d 81       	ldd	r24, Y+5	; 0x05
     e68:	9e 81       	ldd	r25, Y+6	; 0x06
     e6a:	00 97       	sbiw	r24, 0x00	; 0
     e6c:	69 f7       	brne	.-38     	; 0xe48 <APP_readOldPassword+0xcc>
     e6e:	14 c0       	rjmp	.+40     	; 0xe98 <APP_readOldPassword+0x11c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     e70:	6f 81       	ldd	r22, Y+7	; 0x07
     e72:	78 85       	ldd	r23, Y+8	; 0x08
     e74:	89 85       	ldd	r24, Y+9	; 0x09
     e76:	9a 85       	ldd	r25, Y+10	; 0x0a
     e78:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     e7c:	dc 01       	movw	r26, r24
     e7e:	cb 01       	movw	r24, r22
     e80:	9e 83       	std	Y+6, r25	; 0x06
     e82:	8d 83       	std	Y+5, r24	; 0x05
     e84:	8d 81       	ldd	r24, Y+5	; 0x05
     e86:	9e 81       	ldd	r25, Y+6	; 0x06
     e88:	9a 83       	std	Y+2, r25	; 0x02
     e8a:	89 83       	std	Y+1, r24	; 0x01
     e8c:	89 81       	ldd	r24, Y+1	; 0x01
     e8e:	9a 81       	ldd	r25, Y+2	; 0x02
     e90:	01 97       	sbiw	r24, 0x01	; 1
     e92:	f1 f7       	brne	.-4      	; 0xe90 <APP_readOldPassword+0x114>
     e94:	9a 83       	std	Y+2, r25	; 0x02
     e96:	89 83       	std	Y+1, r24	; 0x01
void APP_readOldPassword(void)
{
	static uint8 counter;

	/* For loop to read the old password stored in the EEPROM */
	for(counter = 0; counter < PASSWORD_WIDTH ;counter++)
     e98:	80 91 89 00 	lds	r24, 0x0089
     e9c:	8f 5f       	subi	r24, 0xFF	; 255
     e9e:	80 93 89 00 	sts	0x0089, r24
     ea2:	80 91 89 00 	lds	r24, 0x0089
     ea6:	85 30       	cpi	r24, 0x05	; 5
     ea8:	08 f4       	brcc	.+2      	; 0xeac <APP_readOldPassword+0x130>
     eaa:	75 cf       	rjmp	.-278    	; 0xd96 <APP_readOldPassword+0x1a>
		 * address location ( ADDRESS_PASSWORD_STORED | counter )
		 */
		EEPROM_readByte( (ADDRESS_PASSWORD_STORED | counter), &g_oldPassword[counter]);
		_delay_ms(READ_TIME);	/* Give the EEPROM some time to read 1 Byte */
	}
}
     eac:	2e 96       	adiw	r28, 0x0e	; 14
     eae:	0f b6       	in	r0, 0x3f	; 63
     eb0:	f8 94       	cli
     eb2:	de bf       	out	0x3e, r29	; 62
     eb4:	0f be       	out	0x3f, r0	; 63
     eb6:	cd bf       	out	0x3d, r28	; 61
     eb8:	cf 91       	pop	r28
     eba:	df 91       	pop	r29
     ebc:	08 95       	ret

00000ebe <APP_incorrectPassword>:
 * [in/out]		 	None
 *
 * [Returns]:       None
 **********************************************************************************/
void APP_incorrectPassword(void)
{
     ebe:	df 93       	push	r29
     ec0:	cf 93       	push	r28
     ec2:	cd b7       	in	r28, 0x3d	; 61
     ec4:	de b7       	in	r29, 0x3e	; 62
     ec6:	6a 97       	sbiw	r28, 0x1a	; 26
     ec8:	0f b6       	in	r0, 0x3f	; 63
     eca:	f8 94       	cli
     ecc:	de bf       	out	0x3e, r29	; 62
     ece:	0f be       	out	0x3f, r0	; 63
     ed0:	cd bf       	out	0x3d, r28	; 61
	++g_wrongAttempts;	/* Increment the number of wrong choice */
     ed2:	80 91 86 00 	lds	r24, 0x0086
     ed6:	8f 5f       	subi	r24, 0xFF	; 255
     ed8:	80 93 86 00 	sts	0x0086, r24

	if(g_wrongAttempts == MAXIMUM_ATTEMPTS)
     edc:	80 91 86 00 	lds	r24, 0x0086
     ee0:	83 30       	cpi	r24, 0x03	; 3
     ee2:	09 f0       	breq	.+2      	; 0xee6 <APP_incorrectPassword+0x28>
     ee4:	a1 c0       	rjmp	.+322    	; 0x1028 <APP_incorrectPassword+0x16a>
     ee6:	80 e0       	ldi	r24, 0x00	; 0
     ee8:	90 e0       	ldi	r25, 0x00	; 0
     eea:	af e2       	ldi	r26, 0x2F	; 47
     eec:	b4 e4       	ldi	r27, 0x44	; 68
     eee:	8b 87       	std	Y+11, r24	; 0x0b
     ef0:	9c 87       	std	Y+12, r25	; 0x0c
     ef2:	ad 87       	std	Y+13, r26	; 0x0d
     ef4:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     ef6:	6b 85       	ldd	r22, Y+11	; 0x0b
     ef8:	7c 85       	ldd	r23, Y+12	; 0x0c
     efa:	8d 85       	ldd	r24, Y+13	; 0x0d
     efc:	9e 85       	ldd	r25, Y+14	; 0x0e
     efe:	20 e0       	ldi	r18, 0x00	; 0
     f00:	30 e0       	ldi	r19, 0x00	; 0
     f02:	4a ef       	ldi	r20, 0xFA	; 250
     f04:	54 e4       	ldi	r21, 0x44	; 68
     f06:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     f0a:	dc 01       	movw	r26, r24
     f0c:	cb 01       	movw	r24, r22
     f0e:	8f 83       	std	Y+7, r24	; 0x07
     f10:	98 87       	std	Y+8, r25	; 0x08
     f12:	a9 87       	std	Y+9, r26	; 0x09
     f14:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     f16:	6f 81       	ldd	r22, Y+7	; 0x07
     f18:	78 85       	ldd	r23, Y+8	; 0x08
     f1a:	89 85       	ldd	r24, Y+9	; 0x09
     f1c:	9a 85       	ldd	r25, Y+10	; 0x0a
     f1e:	20 e0       	ldi	r18, 0x00	; 0
     f20:	30 e0       	ldi	r19, 0x00	; 0
     f22:	40 e8       	ldi	r20, 0x80	; 128
     f24:	5f e3       	ldi	r21, 0x3F	; 63
     f26:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     f2a:	88 23       	and	r24, r24
     f2c:	2c f4       	brge	.+10     	; 0xf38 <APP_incorrectPassword+0x7a>
		__ticks = 1;
     f2e:	81 e0       	ldi	r24, 0x01	; 1
     f30:	90 e0       	ldi	r25, 0x00	; 0
     f32:	9e 83       	std	Y+6, r25	; 0x06
     f34:	8d 83       	std	Y+5, r24	; 0x05
     f36:	3f c0       	rjmp	.+126    	; 0xfb6 <APP_incorrectPassword+0xf8>
	else if (__tmp > 65535)
     f38:	6f 81       	ldd	r22, Y+7	; 0x07
     f3a:	78 85       	ldd	r23, Y+8	; 0x08
     f3c:	89 85       	ldd	r24, Y+9	; 0x09
     f3e:	9a 85       	ldd	r25, Y+10	; 0x0a
     f40:	20 e0       	ldi	r18, 0x00	; 0
     f42:	3f ef       	ldi	r19, 0xFF	; 255
     f44:	4f e7       	ldi	r20, 0x7F	; 127
     f46:	57 e4       	ldi	r21, 0x47	; 71
     f48:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     f4c:	18 16       	cp	r1, r24
     f4e:	4c f5       	brge	.+82     	; 0xfa2 <APP_incorrectPassword+0xe4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     f50:	6b 85       	ldd	r22, Y+11	; 0x0b
     f52:	7c 85       	ldd	r23, Y+12	; 0x0c
     f54:	8d 85       	ldd	r24, Y+13	; 0x0d
     f56:	9e 85       	ldd	r25, Y+14	; 0x0e
     f58:	20 e0       	ldi	r18, 0x00	; 0
     f5a:	30 e0       	ldi	r19, 0x00	; 0
     f5c:	40 e2       	ldi	r20, 0x20	; 32
     f5e:	51 e4       	ldi	r21, 0x41	; 65
     f60:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     f64:	dc 01       	movw	r26, r24
     f66:	cb 01       	movw	r24, r22
     f68:	bc 01       	movw	r22, r24
     f6a:	cd 01       	movw	r24, r26
     f6c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     f70:	dc 01       	movw	r26, r24
     f72:	cb 01       	movw	r24, r22
     f74:	9e 83       	std	Y+6, r25	; 0x06
     f76:	8d 83       	std	Y+5, r24	; 0x05
     f78:	0f c0       	rjmp	.+30     	; 0xf98 <APP_incorrectPassword+0xda>
     f7a:	88 ec       	ldi	r24, 0xC8	; 200
     f7c:	90 e0       	ldi	r25, 0x00	; 0
     f7e:	9c 83       	std	Y+4, r25	; 0x04
     f80:	8b 83       	std	Y+3, r24	; 0x03
     f82:	8b 81       	ldd	r24, Y+3	; 0x03
     f84:	9c 81       	ldd	r25, Y+4	; 0x04
     f86:	01 97       	sbiw	r24, 0x01	; 1
     f88:	f1 f7       	brne	.-4      	; 0xf86 <APP_incorrectPassword+0xc8>
     f8a:	9c 83       	std	Y+4, r25	; 0x04
     f8c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     f8e:	8d 81       	ldd	r24, Y+5	; 0x05
     f90:	9e 81       	ldd	r25, Y+6	; 0x06
     f92:	01 97       	sbiw	r24, 0x01	; 1
     f94:	9e 83       	std	Y+6, r25	; 0x06
     f96:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     f98:	8d 81       	ldd	r24, Y+5	; 0x05
     f9a:	9e 81       	ldd	r25, Y+6	; 0x06
     f9c:	00 97       	sbiw	r24, 0x00	; 0
     f9e:	69 f7       	brne	.-38     	; 0xf7a <APP_incorrectPassword+0xbc>
     fa0:	14 c0       	rjmp	.+40     	; 0xfca <APP_incorrectPassword+0x10c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     fa2:	6f 81       	ldd	r22, Y+7	; 0x07
     fa4:	78 85       	ldd	r23, Y+8	; 0x08
     fa6:	89 85       	ldd	r24, Y+9	; 0x09
     fa8:	9a 85       	ldd	r25, Y+10	; 0x0a
     faa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     fae:	dc 01       	movw	r26, r24
     fb0:	cb 01       	movw	r24, r22
     fb2:	9e 83       	std	Y+6, r25	; 0x06
     fb4:	8d 83       	std	Y+5, r24	; 0x05
     fb6:	8d 81       	ldd	r24, Y+5	; 0x05
     fb8:	9e 81       	ldd	r25, Y+6	; 0x06
     fba:	9a 83       	std	Y+2, r25	; 0x02
     fbc:	89 83       	std	Y+1, r24	; 0x01
     fbe:	89 81       	ldd	r24, Y+1	; 0x01
     fc0:	9a 81       	ldd	r25, Y+2	; 0x02
     fc2:	01 97       	sbiw	r24, 0x01	; 1
     fc4:	f1 f7       	brne	.-4      	; 0xfc2 <APP_incorrectPassword+0x104>
     fc6:	9a 83       	std	Y+2, r25	; 0x02
     fc8:	89 83       	std	Y+1, r24	; 0x01
	{
		_delay_ms(700);

		/* TIMER Driver Configurations */
			TIMER_ConfigType TIMER_Config = {INITIAL_VALUE,COUNT_ONE_SECOND,TIMER_1,
											 COMPARE,T1_F_CPU_1024};
     fca:	ce 01       	movw	r24, r28
     fcc:	0f 96       	adiw	r24, 0x0f	; 15
     fce:	9f 8b       	std	Y+23, r25	; 0x17
     fd0:	8e 8b       	std	Y+22, r24	; 0x16
     fd2:	e8 e6       	ldi	r30, 0x68	; 104
     fd4:	f0 e0       	ldi	r31, 0x00	; 0
     fd6:	f9 8f       	std	Y+25, r31	; 0x19
     fd8:	e8 8f       	std	Y+24, r30	; 0x18
     fda:	f7 e0       	ldi	r31, 0x07	; 7
     fdc:	fa 8f       	std	Y+26, r31	; 0x1a
     fde:	e8 8d       	ldd	r30, Y+24	; 0x18
     fe0:	f9 8d       	ldd	r31, Y+25	; 0x19
     fe2:	00 80       	ld	r0, Z
     fe4:	88 8d       	ldd	r24, Y+24	; 0x18
     fe6:	99 8d       	ldd	r25, Y+25	; 0x19
     fe8:	01 96       	adiw	r24, 0x01	; 1
     fea:	99 8f       	std	Y+25, r25	; 0x19
     fec:	88 8f       	std	Y+24, r24	; 0x18
     fee:	ee 89       	ldd	r30, Y+22	; 0x16
     ff0:	ff 89       	ldd	r31, Y+23	; 0x17
     ff2:	00 82       	st	Z, r0
     ff4:	8e 89       	ldd	r24, Y+22	; 0x16
     ff6:	9f 89       	ldd	r25, Y+23	; 0x17
     ff8:	01 96       	adiw	r24, 0x01	; 1
     ffa:	9f 8b       	std	Y+23, r25	; 0x17
     ffc:	8e 8b       	std	Y+22, r24	; 0x16
     ffe:	9a 8d       	ldd	r25, Y+26	; 0x1a
    1000:	91 50       	subi	r25, 0x01	; 1
    1002:	9a 8f       	std	Y+26, r25	; 0x1a
    1004:	ea 8d       	ldd	r30, Y+26	; 0x1a
    1006:	ee 23       	and	r30, r30
    1008:	51 f7       	brne	.-44     	; 0xfde <APP_incorrectPassword+0x120>
		/*
		 * Call function that call back the alarm function if the TIMER1
		 * interrupt is fired
		 */
		TIMER_setCallBack(APP_turnOnAlarm, TIMER_1);
    100a:	8d e1       	ldi	r24, 0x1D	; 29
    100c:	98 e0       	ldi	r25, 0x08	; 8
    100e:	61 e0       	ldi	r22, 0x01	; 1
    1010:	0e 94 a0 0e 	call	0x1d40	; 0x1d40 <TIMER_setCallBack>

		/* TIMER Driver Initialization */
		TIMER_init(&TIMER_Config);
    1014:	ce 01       	movw	r24, r28
    1016:	0f 96       	adiw	r24, 0x0f	; 15
    1018:	0e 94 5c 0d 	call	0x1ab8	; 0x1ab8 <TIMER_init>

		/* Wait until the alarm turned off */
		while(g_lockSystem != OPENED){}
    101c:	80 91 85 00 	lds	r24, 0x0085
    1020:	81 30       	cpi	r24, 0x01	; 1
    1022:	e1 f7       	brne	.-8      	; 0x101c <APP_incorrectPassword+0x15e>
		/* Reset the lock system status to its initial value (SYSTEM UNLOCKED) */
		g_lockSystem = UNLOCKED;
    1024:	10 92 85 00 	sts	0x0085, r1

	}	/* END OF MAXIMUM_ATTEMPTS */
}
    1028:	6a 96       	adiw	r28, 0x1a	; 26
    102a:	0f b6       	in	r0, 0x3f	; 63
    102c:	f8 94       	cli
    102e:	de bf       	out	0x3e, r29	; 62
    1030:	0f be       	out	0x3f, r0	; 63
    1032:	cd bf       	out	0x3d, r28	; 61
    1034:	cf 91       	pop	r28
    1036:	df 91       	pop	r29
    1038:	08 95       	ret

0000103a <APP_turnOnAlarm>:
 * [in/out]		 	None
 *
 * [Returns]:       None
 **********************************************************************************/
static void APP_turnOnAlarm(void)
{
    103a:	df 93       	push	r29
    103c:	cf 93       	push	r28
    103e:	cd b7       	in	r28, 0x3d	; 61
    1040:	de b7       	in	r29, 0x3e	; 62
	++g_tick;	/* Increment global tick flag each time the interrupt fired */
    1042:	80 91 84 00 	lds	r24, 0x0084
    1046:	8f 5f       	subi	r24, 0xFF	; 255
    1048:	80 93 84 00 	sts	0x0084, r24

	if(g_tick == FIRST_TICK)
    104c:	80 91 84 00 	lds	r24, 0x0084
    1050:	81 30       	cpi	r24, 0x01	; 1
    1052:	21 f4       	brne	.+8      	; 0x105c <APP_turnOnAlarm+0x22>
	{
		LED_turnOn();
    1054:	0e 94 0e 0c 	call	0x181c	; 0x181c <LED_turnOn>
		BUZZER_turnOn();
    1058:	0e 94 ae 08 	call	0x115c	; 0x115c <BUZZER_turnOn>
	}

	if(g_tick == MAXIMUM_ALARM_TIME)
    105c:	80 91 84 00 	lds	r24, 0x0084
    1060:	8f 30       	cpi	r24, 0x0F	; 15
    1062:	61 f4       	brne	.+24     	; 0x107c <APP_turnOnAlarm+0x42>
	{
		BUZZER_turnOff();
    1064:	0e 94 bc 08 	call	0x1178	; 0x1178 <BUZZER_turnOff>
		LED_turnOff();
    1068:	0e 94 1c 0c 	call	0x1838	; 0x1838 <LED_turnOff>
		/*
		 * De-initialization for the timer to be able to use it again correctly
		 */
		TIMER_DeInit(TIMER_1);
    106c:	81 e0       	ldi	r24, 0x01	; 1
    106e:	0e 94 10 0f 	call	0x1e20	; 0x1e20 <TIMER_DeInit>
		g_tick = INITIAL_VALUE; /* Clear global tick flag for the next time */
    1072:	10 92 84 00 	sts	0x0084, r1
		g_lockSystem = OPENED;	/* Open the system again */
    1076:	81 e0       	ldi	r24, 0x01	; 1
    1078:	80 93 85 00 	sts	0x0085, r24
	}
}
    107c:	cf 91       	pop	r28
    107e:	df 91       	pop	r29
    1080:	08 95       	ret

00001082 <APP_rotateMotorCW>:
 * [in/out]		 	None
 *
 * [Returns]:       None
 *********************************************************************************/
void APP_rotateMotorCW(void)
{
    1082:	df 93       	push	r29
    1084:	cf 93       	push	r28
    1086:	cd b7       	in	r28, 0x3d	; 61
    1088:	de b7       	in	r29, 0x3e	; 62
	++g_tick;	/* Increment global tick flag each time the interrupt fired */
    108a:	80 91 84 00 	lds	r24, 0x0084
    108e:	8f 5f       	subi	r24, 0xFF	; 255
    1090:	80 93 84 00 	sts	0x0084, r24

	if(g_tick == FIRST_TICK)
    1094:	80 91 84 00 	lds	r24, 0x0084
    1098:	81 30       	cpi	r24, 0x01	; 1
    109a:	11 f4       	brne	.+4      	; 0x10a0 <APP_rotateMotorCW+0x1e>
	{
		DCMOTOR_rotateClockwise();
    109c:	0e 94 fd 09 	call	0x13fa	; 0x13fa <DCMOTOR_rotateClockwise>
	}

	if(g_tick == MAXIMUM_RUNNING_TIME)
    10a0:	80 91 84 00 	lds	r24, 0x0084
    10a4:	8f 30       	cpi	r24, 0x0F	; 15
    10a6:	51 f4       	brne	.+20     	; 0x10bc <APP_rotateMotorCW+0x3a>
	{
		DCMOTOR_stop();
    10a8:	0e 94 27 0a 	call	0x144e	; 0x144e <DCMOTOR_stop>
		/*
		 * De-initialization for the timer to be able to use it again correctly
		 */
		TIMER_DeInit(TIMER_1);
    10ac:	81 e0       	ldi	r24, 0x01	; 1
    10ae:	0e 94 10 0f 	call	0x1e20	; 0x1e20 <TIMER_DeInit>
		g_tick = INITIAL_VALUE;	/* Clear global tick flag for the next time */
    10b2:	10 92 84 00 	sts	0x0084, r1
		g_lockSystem = OPENED;	/* Open the system again */
    10b6:	81 e0       	ldi	r24, 0x01	; 1
    10b8:	80 93 85 00 	sts	0x0085, r24
	}
}
    10bc:	cf 91       	pop	r28
    10be:	df 91       	pop	r29
    10c0:	08 95       	ret

000010c2 <APP_stopMotor>:
 * [in/out]		 	None
 *
 * [Returns]:       None
 *********************************************************************************/
void APP_stopMotor(void)
{
    10c2:	df 93       	push	r29
    10c4:	cf 93       	push	r28
    10c6:	cd b7       	in	r28, 0x3d	; 61
    10c8:	de b7       	in	r29, 0x3e	; 62
	++g_tick;	/* Increment global tick flag each time the interrupt fired */
    10ca:	80 91 84 00 	lds	r24, 0x0084
    10ce:	8f 5f       	subi	r24, 0xFF	; 255
    10d0:	80 93 84 00 	sts	0x0084, r24

	if(g_tick == MAXIMUM_STOPING_TIME)
    10d4:	80 91 84 00 	lds	r24, 0x0084
    10d8:	83 30       	cpi	r24, 0x03	; 3
    10da:	41 f4       	brne	.+16     	; 0x10ec <APP_stopMotor+0x2a>
	{
		/*
		 * De-initialization for the timer to be able to use it again correctly
		 */
		TIMER_DeInit(TIMER_1);
    10dc:	81 e0       	ldi	r24, 0x01	; 1
    10de:	0e 94 10 0f 	call	0x1e20	; 0x1e20 <TIMER_DeInit>
		g_tick = INITIAL_VALUE;	/* Clear global tick flag for the next time */
    10e2:	10 92 84 00 	sts	0x0084, r1
		g_lockSystem = OPENED;	/* Open the system again */
    10e6:	81 e0       	ldi	r24, 0x01	; 1
    10e8:	80 93 85 00 	sts	0x0085, r24
	}
}
    10ec:	cf 91       	pop	r28
    10ee:	df 91       	pop	r29
    10f0:	08 95       	ret

000010f2 <APP_rotateMotorAntiCW>:
 * [in/out]		 	None
 *
 * [Returns]:       None
 *********************************************************************************/
void APP_rotateMotorAntiCW(void)
{
    10f2:	df 93       	push	r29
    10f4:	cf 93       	push	r28
    10f6:	cd b7       	in	r28, 0x3d	; 61
    10f8:	de b7       	in	r29, 0x3e	; 62
	++g_tick;	/* Increment global tick flag each time the interrupt fired */
    10fa:	80 91 84 00 	lds	r24, 0x0084
    10fe:	8f 5f       	subi	r24, 0xFF	; 255
    1100:	80 93 84 00 	sts	0x0084, r24

	if(g_tick == FIRST_TICK)
    1104:	80 91 84 00 	lds	r24, 0x0084
    1108:	81 30       	cpi	r24, 0x01	; 1
    110a:	11 f4       	brne	.+4      	; 0x1110 <APP_rotateMotorAntiCW+0x1e>
	{
		DCMOTOR_rotateAntiClockwise();
    110c:	0e 94 12 0a 	call	0x1424	; 0x1424 <DCMOTOR_rotateAntiClockwise>
	}

	if(g_tick == MAXIMUM_RUNNING_TIME)
    1110:	80 91 84 00 	lds	r24, 0x0084
    1114:	8f 30       	cpi	r24, 0x0F	; 15
    1116:	51 f4       	brne	.+20     	; 0x112c <APP_rotateMotorAntiCW+0x3a>
	{
		DCMOTOR_stop();
    1118:	0e 94 27 0a 	call	0x144e	; 0x144e <DCMOTOR_stop>
		/*
		 * De-initialization for the timer to be able to use it again correctly
		 */
		TIMER_DeInit(TIMER_1);
    111c:	81 e0       	ldi	r24, 0x01	; 1
    111e:	0e 94 10 0f 	call	0x1e20	; 0x1e20 <TIMER_DeInit>
		g_tick = INITIAL_VALUE;	/* Clear global tick flag for the next time */
    1122:	10 92 84 00 	sts	0x0084, r1
		g_lockSystem = OPENED;	/* Open the system again */
    1126:	81 e0       	ldi	r24, 0x01	; 1
    1128:	80 93 85 00 	sts	0x0085, r24
	}
}
    112c:	cf 91       	pop	r28
    112e:	df 91       	pop	r29
    1130:	08 95       	ret

00001132 <BUZZER_init>:
 * [in/out]		 	None
 *
 * [Returns]:       None
 *******************************************************************************/
void BUZZER_init(void)
{
    1132:	df 93       	push	r29
    1134:	cf 93       	push	r28
    1136:	cd b7       	in	r28, 0x3d	; 61
    1138:	de b7       	in	r29, 0x3e	; 62
	/* Configure BUZZER pin as an output pin */
	SET_BIT(BUZZER_PORT_DIR, BUZZER_PIN);
    113a:	aa e3       	ldi	r26, 0x3A	; 58
    113c:	b0 e0       	ldi	r27, 0x00	; 0
    113e:	ea e3       	ldi	r30, 0x3A	; 58
    1140:	f0 e0       	ldi	r31, 0x00	; 0
    1142:	80 81       	ld	r24, Z
    1144:	81 60       	ori	r24, 0x01	; 1
    1146:	8c 93       	st	X, r24
	/* Turn off BUZZER at the beginning as the initial state */
	CLEAR_BIT(BUZZER_PORT_OUT, BUZZER_PIN);
    1148:	ab e3       	ldi	r26, 0x3B	; 59
    114a:	b0 e0       	ldi	r27, 0x00	; 0
    114c:	eb e3       	ldi	r30, 0x3B	; 59
    114e:	f0 e0       	ldi	r31, 0x00	; 0
    1150:	80 81       	ld	r24, Z
    1152:	8e 7f       	andi	r24, 0xFE	; 254
    1154:	8c 93       	st	X, r24
}
    1156:	cf 91       	pop	r28
    1158:	df 91       	pop	r29
    115a:	08 95       	ret

0000115c <BUZZER_turnOn>:
 * [in/out]		 	None
 *
 * [Returns]:       None
 *******************************************************************************/
void BUZZER_turnOn(void)
{
    115c:	df 93       	push	r29
    115e:	cf 93       	push	r28
    1160:	cd b7       	in	r28, 0x3d	; 61
    1162:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(BUZZER_PORT_OUT, BUZZER_PIN);	/* Turn On BUZZER */
    1164:	ab e3       	ldi	r26, 0x3B	; 59
    1166:	b0 e0       	ldi	r27, 0x00	; 0
    1168:	eb e3       	ldi	r30, 0x3B	; 59
    116a:	f0 e0       	ldi	r31, 0x00	; 0
    116c:	80 81       	ld	r24, Z
    116e:	81 60       	ori	r24, 0x01	; 1
    1170:	8c 93       	st	X, r24
}
    1172:	cf 91       	pop	r28
    1174:	df 91       	pop	r29
    1176:	08 95       	ret

00001178 <BUZZER_turnOff>:
 * [in/out]		 	None
 *
 * [Returns]:       None
 *******************************************************************************/
void BUZZER_turnOff(void)
{
    1178:	df 93       	push	r29
    117a:	cf 93       	push	r28
    117c:	cd b7       	in	r28, 0x3d	; 61
    117e:	de b7       	in	r29, 0x3e	; 62
	CLEAR_BIT(BUZZER_PORT_OUT, BUZZER_PIN);	/* Turn Off BUZZER */
    1180:	ab e3       	ldi	r26, 0x3B	; 59
    1182:	b0 e0       	ldi	r27, 0x00	; 0
    1184:	eb e3       	ldi	r30, 0x3B	; 59
    1186:	f0 e0       	ldi	r31, 0x00	; 0
    1188:	80 81       	ld	r24, Z
    118a:	8e 7f       	andi	r24, 0xFE	; 254
    118c:	8c 93       	st	X, r24
}
    118e:	cf 91       	pop	r28
    1190:	df 91       	pop	r29
    1192:	08 95       	ret

00001194 <main>:
/*****************************************************************************************
 *                                MAIN FUNCTION                                          *
 *****************************************************************************************/

int main(void)
{
    1194:	df 93       	push	r29
    1196:	cf 93       	push	r28
    1198:	cd b7       	in	r28, 0x3d	; 61
    119a:	de b7       	in	r29, 0x3e	; 62
    119c:	69 97       	sbiw	r28, 0x19	; 25
    119e:	0f b6       	in	r0, 0x3f	; 63
    11a0:	f8 94       	cli
    11a2:	de bf       	out	0x3e, r29	; 62
    11a4:	0f be       	out	0x3f, r0	; 63
    11a6:	cd bf       	out	0x3d, r28	; 61
	/********************************************************************************
	 *                           SYSTEM INITIALIZATION                              *
	 ********************************************************************************/

	/* UART Driver Configurations */
	UART_ConfigType UART_Config = {BPS_9600,DOUBLE_SPEED,EIGHT_BITS,DISABLED,ONE_BIT};
    11a8:	ce 01       	movw	r24, r28
    11aa:	01 96       	adiw	r24, 0x01	; 1
    11ac:	99 8b       	std	Y+17, r25	; 0x11
    11ae:	88 8b       	std	Y+16, r24	; 0x10
    11b0:	e6 e7       	ldi	r30, 0x76	; 118
    11b2:	f0 e0       	ldi	r31, 0x00	; 0
    11b4:	fb 8b       	std	Y+19, r31	; 0x13
    11b6:	ea 8b       	std	Y+18, r30	; 0x12
    11b8:	f8 e0       	ldi	r31, 0x08	; 8
    11ba:	fc 8b       	std	Y+20, r31	; 0x14
    11bc:	ea 89       	ldd	r30, Y+18	; 0x12
    11be:	fb 89       	ldd	r31, Y+19	; 0x13
    11c0:	00 80       	ld	r0, Z
    11c2:	8a 89       	ldd	r24, Y+18	; 0x12
    11c4:	9b 89       	ldd	r25, Y+19	; 0x13
    11c6:	01 96       	adiw	r24, 0x01	; 1
    11c8:	9b 8b       	std	Y+19, r25	; 0x13
    11ca:	8a 8b       	std	Y+18, r24	; 0x12
    11cc:	e8 89       	ldd	r30, Y+16	; 0x10
    11ce:	f9 89       	ldd	r31, Y+17	; 0x11
    11d0:	00 82       	st	Z, r0
    11d2:	88 89       	ldd	r24, Y+16	; 0x10
    11d4:	99 89       	ldd	r25, Y+17	; 0x11
    11d6:	01 96       	adiw	r24, 0x01	; 1
    11d8:	99 8b       	std	Y+17, r25	; 0x11
    11da:	88 8b       	std	Y+16, r24	; 0x10
    11dc:	9c 89       	ldd	r25, Y+20	; 0x14
    11de:	91 50       	subi	r25, 0x01	; 1
    11e0:	9c 8b       	std	Y+20, r25	; 0x14
    11e2:	ec 89       	ldd	r30, Y+20	; 0x14
    11e4:	ee 23       	and	r30, r30
    11e6:	51 f7       	brne	.-44     	; 0x11bc <main+0x28>

	/* TIMER Driver Configurations */
	TIMER_ConfigType TIMER_Config = {INITIAL_VALUE,COUNT_ONE_SECOND,TIMER_1,COMPARE,T1_F_CPU_1024};
    11e8:	ce 01       	movw	r24, r28
    11ea:	09 96       	adiw	r24, 0x09	; 9
    11ec:	9e 8b       	std	Y+22, r25	; 0x16
    11ee:	8d 8b       	std	Y+21, r24	; 0x15
    11f0:	ef e6       	ldi	r30, 0x6F	; 111
    11f2:	f0 e0       	ldi	r31, 0x00	; 0
    11f4:	f8 8f       	std	Y+24, r31	; 0x18
    11f6:	ef 8b       	std	Y+23, r30	; 0x17
    11f8:	f7 e0       	ldi	r31, 0x07	; 7
    11fa:	f9 8f       	std	Y+25, r31	; 0x19
    11fc:	ef 89       	ldd	r30, Y+23	; 0x17
    11fe:	f8 8d       	ldd	r31, Y+24	; 0x18
    1200:	00 80       	ld	r0, Z
    1202:	8f 89       	ldd	r24, Y+23	; 0x17
    1204:	98 8d       	ldd	r25, Y+24	; 0x18
    1206:	01 96       	adiw	r24, 0x01	; 1
    1208:	98 8f       	std	Y+24, r25	; 0x18
    120a:	8f 8b       	std	Y+23, r24	; 0x17
    120c:	ed 89       	ldd	r30, Y+21	; 0x15
    120e:	fe 89       	ldd	r31, Y+22	; 0x16
    1210:	00 82       	st	Z, r0
    1212:	8d 89       	ldd	r24, Y+21	; 0x15
    1214:	9e 89       	ldd	r25, Y+22	; 0x16
    1216:	01 96       	adiw	r24, 0x01	; 1
    1218:	9e 8b       	std	Y+22, r25	; 0x16
    121a:	8d 8b       	std	Y+21, r24	; 0x15
    121c:	99 8d       	ldd	r25, Y+25	; 0x19
    121e:	91 50       	subi	r25, 0x01	; 1
    1220:	99 8f       	std	Y+25, r25	; 0x19
    1222:	e9 8d       	ldd	r30, Y+25	; 0x19
    1224:	ee 23       	and	r30, r30
    1226:	51 f7       	brne	.-44     	; 0x11fc <main+0x68>

	UART_init(&UART_Config); /* UART Driver Initialization */
    1228:	ce 01       	movw	r24, r28
    122a:	01 96       	adiw	r24, 0x01	; 1
    122c:	0e 94 7d 0f 	call	0x1efa	; 0x1efa <UART_init>

	EEPROM_init();		/* EEPROM Driver Initialization */
    1230:	0e 94 3c 0a 	call	0x1478	; 0x1478 <EEPROM_init>

	DCMOTOR_init();		/* DC MOTOR Driver Initialization */
    1234:	0e 94 da 09 	call	0x13b4	; 0x13b4 <DCMOTOR_init>

	BUZZER_init();		/* BUZZER Driver Initialization */
    1238:	0e 94 99 08 	call	0x1132	; 0x1132 <BUZZER_init>

	LED_init();			/* LED Driver Initialization */
    123c:	0e 94 f9 0b 	call	0x17f2	; 0x17f2 <LED_init>

	SREG |= (1 << 7);	/* Enable Global Interrupt, I-bit in SREG register */
    1240:	af e5       	ldi	r26, 0x5F	; 95
    1242:	b0 e0       	ldi	r27, 0x00	; 0
    1244:	ef e5       	ldi	r30, 0x5F	; 95
    1246:	f0 e0       	ldi	r31, 0x00	; 0
    1248:	80 81       	ld	r24, Z
    124a:	80 68       	ori	r24, 0x80	; 128
    124c:	8c 93       	st	X, r24

	/*
	 * To get the system status, read the EEPROM address where the password stored,
	 * then put the result in g_systemStatus
	 */
	EEPROM_readByte(ADDRESS_PASSWORD_STORED, &g_systemStatus);
    124e:	2a e8       	ldi	r18, 0x8A	; 138
    1250:	30 e0       	ldi	r19, 0x00	; 0
    1252:	80 e0       	ldi	r24, 0x00	; 0
    1254:	90 e0       	ldi	r25, 0x00	; 0
    1256:	b9 01       	movw	r22, r18
    1258:	0e 94 b4 0a 	call	0x1568	; 0x1568 <EEPROM_readByte>
	 * 		 	3- Store the password send by HMI ECU in the EEPROM
	 *
	 * 		- If they not equal this is not the first time to run the system,
	 * 		  send system status to the HMI ECU (ANY TIME TO LOGIN)
	 */
	if(g_systemStatus == DEFAULT_VALUE)
    125c:	80 91 8a 00 	lds	r24, 0x008A
    1260:	8f 3f       	cpi	r24, 0xFF	; 255
    1262:	61 f4       	brne	.+24     	; 0x127c <main+0xe8>
	{
		while(UART_recieveByte() != ECU_READY){}	/* Wait until HMI ECU be ready */
    1264:	0e 94 cb 10 	call	0x2196	; 0x2196 <UART_recieveByte>
    1268:	80 31       	cpi	r24, 0x10	; 16
    126a:	e1 f7       	brne	.-8      	; 0x1264 <main+0xd0>
		UART_sendByte(FIRST_TIME_TO_LOGIN);			/* Send system status to the HMI ECU */
    126c:	81 e0       	ldi	r24, 0x01	; 1
    126e:	0e 94 b4 10 	call	0x2168	; 0x2168 <UART_sendByte>

		/* Call function that responsible for receiving, and storing the new password */
		APP_receiveNewPassword(g_newPassword);
    1272:	88 e9       	ldi	r24, 0x98	; 152
    1274:	90 e0       	ldi	r25, 0x00	; 0
    1276:	0e 94 d8 05 	call	0xbb0	; 0xbb0 <APP_receiveNewPassword>
    127a:	0b c0       	rjmp	.+22     	; 0x1292 <main+0xfe>
	}
	else if(g_systemStatus != DEFAULT_VALUE)
    127c:	80 91 8a 00 	lds	r24, 0x008A
    1280:	8f 3f       	cpi	r24, 0xFF	; 255
    1282:	39 f0       	breq	.+14     	; 0x1292 <main+0xfe>
	{
		while(UART_recieveByte() != ECU_READY){}	/* Wait until HMI ECU be ready */
    1284:	0e 94 cb 10 	call	0x2196	; 0x2196 <UART_recieveByte>
    1288:	80 31       	cpi	r24, 0x10	; 16
    128a:	e1 f7       	brne	.-8      	; 0x1284 <main+0xf0>
		UART_sendByte(ANY_TIME_TO_LOGIN);			/* Send system status to the HMI ECU */
    128c:	80 e0       	ldi	r24, 0x00	; 0
    128e:	0e 94 b4 10 	call	0x2168	; 0x2168 <UART_sendByte>
		/*
		 * Receive the user decision from the HMI ECU :
		 * 	 "+" : TO CHANGE PASSWORD
		 * 	 "-" : TO DOOR OPEN
		 */
		UART_sendByte(ECU_READY);		/* Check if the HMI ECU is ready */
    1292:	80 e1       	ldi	r24, 0x10	; 16
    1294:	0e 94 b4 10 	call	0x2168	; 0x2168 <UART_sendByte>
		g_choice = UART_recieveByte();	/* Receive the user decision from the HMI ECU*/
    1298:	0e 94 cb 10 	call	0x2196	; 0x2196 <UART_recieveByte>
    129c:	80 93 8b 00 	sts	0x008B, r24
		 *	 - Receive the current password from the HMI ECU to (check is this user is owner or not)
		 *	 - Read he old password from the EEPROM
		 *	 - Compare between the received password by the HMI ECU, and the stored password in the
		 *	   EEPROM, then end the result to the HMI ECU
		 */
		if(g_choice == CHANGE_PASSWORD)
    12a0:	80 91 8b 00 	lds	r24, 0x008B
    12a4:	8b 32       	cpi	r24, 0x2B	; 43
    12a6:	51 f5       	brne	.+84     	; 0x12fc <main+0x168>
		{
			do
			{
				/* Call function that responsible for receiving the current password */
				APP_receiveCurrentPassword(g_currentPassword);
    12a8:	83 e9       	ldi	r24, 0x93	; 147
    12aa:	90 e0       	ldi	r25, 0x00	; 0
    12ac:	0e 94 92 06 	call	0xd24	; 0xd24 <APP_receiveCurrentPassword>

				/* Call function that responsible for reading the old password from the EEPROM */
				APP_readOldPassword();
    12b0:	0e 94 be 06 	call	0xd7c	; 0xd7c <APP_readOldPassword>

				/*
				 * Call function that responsible for comparing two passwords (current password,
				 * old password) and store the result in the g_passwordStatus
				 */
				g_passwordStatus = APP_checkPasswordMismatch(g_currentPassword, g_oldPassword);
    12b4:	83 e9       	ldi	r24, 0x93	; 147
    12b6:	90 e0       	ldi	r25, 0x00	; 0
    12b8:	2d e9       	ldi	r18, 0x9D	; 157
    12ba:	30 e0       	ldi	r19, 0x00	; 0
    12bc:	b9 01       	movw	r22, r18
    12be:	0e 94 a3 05 	call	0xb46	; 0xb46 <APP_checkPasswordMismatch>
    12c2:	80 93 8c 00 	sts	0x008C, r24

				/* Wait until HMI ECU be ready */
				while(UART_recieveByte() != ECU_READY){}
    12c6:	0e 94 cb 10 	call	0x2196	; 0x2196 <UART_recieveByte>
    12ca:	80 31       	cpi	r24, 0x10	; 16
    12cc:	e1 f7       	brne	.-8      	; 0x12c6 <main+0x132>

				/* Send the current password status to the HMI ECU */
				UART_sendByte(g_passwordStatus);
    12ce:	80 91 8c 00 	lds	r24, 0x008C
    12d2:	0e 94 b4 10 	call	0x2168	; 0x2168 <UART_sendByte>

				/*
				 * If the current and the old password are identical, receive and save the
				 * new password in the EEPROM
				 */
				if(g_passwordStatus == MATCHED)
    12d6:	80 91 8c 00 	lds	r24, 0x008C
    12da:	88 23       	and	r24, r24
    12dc:	29 f4       	brne	.+10     	; 0x12e8 <main+0x154>
				{
					/* Call function that responsible for receiving, and storing the new password */
					APP_receiveNewPassword(g_newPassword);
    12de:	88 e9       	ldi	r24, 0x98	; 152
    12e0:	90 e0       	ldi	r25, 0x00	; 0
    12e2:	0e 94 d8 05 	call	0xbb0	; 0xbb0 <APP_receiveNewPassword>
    12e6:	0a c0       	rjmp	.+20     	; 0x12fc <main+0x168>
				 *				   condition to repeat the above sequence again
				 *				2- If it is equal to MAXIMUM NUMBER OF ATTEMPTS, run the alarm
				 *				   "BUZZER + LED" and hold the system for (10 Seconds), then
				 *				    return back to the MAIN LOOP after that
				 */
				else if(g_passwordStatus == MISMATCHED)
    12e8:	80 91 8c 00 	lds	r24, 0x008C
    12ec:	81 30       	cpi	r24, 0x01	; 1
    12ee:	11 f4       	brne	.+4      	; 0x12f4 <main+0x160>
				{
					APP_incorrectPassword();
    12f0:	0e 94 5f 07 	call	0xebe	; 0xebe <APP_incorrectPassword>
				}	/* END OF INCORRECT PASSWORD */

			}while(MAXIMUM_ATTEMPTS > g_wrongAttempts);
    12f4:	80 91 86 00 	lds	r24, 0x0086
    12f8:	83 30       	cpi	r24, 0x03	; 3
    12fa:	b0 f2       	brcs	.-84     	; 0x12a8 <main+0x114>
		 *	 - Receive the current password from the HMI ECU to (check is this user is owner or not)
		 *	 - Read he old password from the EEPROM
		 *	 - Compare between the received password by the HMI ECU, and the stored password in the
		 *	   EEPROM, then end the result to the HMI ECU
		 */
		if(g_choice == DOOR_OPEN)
    12fc:	80 91 8b 00 	lds	r24, 0x008B
    1300:	8d 32       	cpi	r24, 0x2D	; 45
    1302:	09 f0       	breq	.+2      	; 0x1306 <main+0x172>
    1304:	54 c0       	rjmp	.+168    	; 0x13ae <main+0x21a>
		{
			do
			{
				/* Call function that responsible for receiving the current password */
				APP_receiveCurrentPassword(g_currentPassword);
    1306:	83 e9       	ldi	r24, 0x93	; 147
    1308:	90 e0       	ldi	r25, 0x00	; 0
    130a:	0e 94 92 06 	call	0xd24	; 0xd24 <APP_receiveCurrentPassword>

				/* Call function that responsible for reading the old password from the EEPROM */
				APP_readOldPassword();
    130e:	0e 94 be 06 	call	0xd7c	; 0xd7c <APP_readOldPassword>

				/* Call function that responsible for comparing two passwords (current password,
				 * old password) and store the result in the g_passwordStatus */
				g_passwordStatus = APP_checkPasswordMismatch(g_currentPassword, g_oldPassword);
    1312:	83 e9       	ldi	r24, 0x93	; 147
    1314:	90 e0       	ldi	r25, 0x00	; 0
    1316:	2d e9       	ldi	r18, 0x9D	; 157
    1318:	30 e0       	ldi	r19, 0x00	; 0
    131a:	b9 01       	movw	r22, r18
    131c:	0e 94 a3 05 	call	0xb46	; 0xb46 <APP_checkPasswordMismatch>
    1320:	80 93 8c 00 	sts	0x008C, r24

				while(UART_recieveByte() != ECU_READY){}	/* Wait until HMI ECU be ready */
    1324:	0e 94 cb 10 	call	0x2196	; 0x2196 <UART_recieveByte>
    1328:	80 31       	cpi	r24, 0x10	; 16
    132a:	e1 f7       	brne	.-8      	; 0x1324 <main+0x190>
				UART_sendByte(g_passwordStatus);	/* Send the current password status to the HMI ECU */
    132c:	80 91 8c 00 	lds	r24, 0x008C
    1330:	0e 94 b4 10 	call	0x2168	; 0x2168 <UART_sendByte>
				 *
				 *		- Open the door, rotate the motor Clock wise for (15 seconds)
				 *		- Hold the door, stop the for (3 seconds)
				 *	 	- Close the door, rotate the motor Anti Clock wise for (15 seconds)
				 */
				if(g_passwordStatus == MATCHED)
    1334:	80 91 8c 00 	lds	r24, 0x008C
    1338:	88 23       	and	r24, r24
    133a:	71 f5       	brne	.+92     	; 0x1398 <main+0x204>

					/*
					 * Call function that call back the function that is responsible
					 * for rotating the motor Clockwise if the TIMER1 interrupt is fired
					 */
					TIMER_setCallBack(APP_rotateMotorCW, TIMER_1);
    133c:	81 e4       	ldi	r24, 0x41	; 65
    133e:	98 e0       	ldi	r25, 0x08	; 8
    1340:	61 e0       	ldi	r22, 0x01	; 1
    1342:	0e 94 a0 0e 	call	0x1d40	; 0x1d40 <TIMER_setCallBack>

					/* TIMER Driver Initialization */
					TIMER_init(&TIMER_Config);
    1346:	ce 01       	movw	r24, r28
    1348:	09 96       	adiw	r24, 0x09	; 9
    134a:	0e 94 5c 0d 	call	0x1ab8	; 0x1ab8 <TIMER_init>

					/* Wait until the system open again */
					while(g_lockSystem != OPENED){}
    134e:	80 91 85 00 	lds	r24, 0x0085
    1352:	81 30       	cpi	r24, 0x01	; 1
    1354:	e1 f7       	brne	.-8      	; 0x134e <main+0x1ba>

					/* Reset the lock system status to its initial value (SYSTEM UNLOCKED) */
					g_lockSystem = UNLOCKED;
    1356:	10 92 85 00 	sts	0x0085, r1

					/*
					 * Call function that call back the function that is responsible
					 * for stopping the motor if the TIMER1 interrupt is fired
					 */
					TIMER_setCallBack(APP_stopMotor, TIMER_1);
    135a:	81 e6       	ldi	r24, 0x61	; 97
    135c:	98 e0       	ldi	r25, 0x08	; 8
    135e:	61 e0       	ldi	r22, 0x01	; 1
    1360:	0e 94 a0 0e 	call	0x1d40	; 0x1d40 <TIMER_setCallBack>

					/* TIMER Driver Initialization */
					TIMER_init(&TIMER_Config);
    1364:	ce 01       	movw	r24, r28
    1366:	09 96       	adiw	r24, 0x09	; 9
    1368:	0e 94 5c 0d 	call	0x1ab8	; 0x1ab8 <TIMER_init>

					/* Wait until the system open again */
					while(g_lockSystem != OPENED){}
    136c:	80 91 85 00 	lds	r24, 0x0085
    1370:	81 30       	cpi	r24, 0x01	; 1
    1372:	e1 f7       	brne	.-8      	; 0x136c <main+0x1d8>

					/* Reset the lock system status to its initial value (SYSTEM UNLOCKED) */
					g_lockSystem = UNLOCKED;
    1374:	10 92 85 00 	sts	0x0085, r1

					/*
					 * Call function that call back the function that is responsible
					 * for rotating the motor Anti Clockwise if the TIMER1 interrupt is fired
					 */
					TIMER_setCallBack(APP_rotateMotorAntiCW, TIMER_1);
    1378:	89 e7       	ldi	r24, 0x79	; 121
    137a:	98 e0       	ldi	r25, 0x08	; 8
    137c:	61 e0       	ldi	r22, 0x01	; 1
    137e:	0e 94 a0 0e 	call	0x1d40	; 0x1d40 <TIMER_setCallBack>

					/* TIMER Driver Initialization */
					TIMER_init(&TIMER_Config);
    1382:	ce 01       	movw	r24, r28
    1384:	09 96       	adiw	r24, 0x09	; 9
    1386:	0e 94 5c 0d 	call	0x1ab8	; 0x1ab8 <TIMER_init>

					/* Wait until the system open again */
					while(g_lockSystem != OPENED){}
    138a:	80 91 85 00 	lds	r24, 0x0085
    138e:	81 30       	cpi	r24, 0x01	; 1
    1390:	e1 f7       	brne	.-8      	; 0x138a <main+0x1f6>

					/* Reset the lock system status to its initial value (SYSTEM UNLOCKED) */
					g_lockSystem = UNLOCKED;
    1392:	10 92 85 00 	sts	0x0085, r1
    1396:	0b c0       	rjmp	.+22     	; 0x13ae <main+0x21a>
				 *				   condition to repeat the above sequence again
				 *				2- If it is equal to MAXIMUM NUMBER OF ATTEMPTS, run the alarm
				 *				   "BUZZER + LED" and hold the system for (10 Seconds), then
				 *				    return back to the MAIN LOOP after that
				 */
				else if(g_passwordStatus == MISMATCHED)
    1398:	80 91 8c 00 	lds	r24, 0x008C
    139c:	81 30       	cpi	r24, 0x01	; 1
    139e:	11 f4       	brne	.+4      	; 0x13a4 <main+0x210>
				{
					APP_incorrectPassword();
    13a0:	0e 94 5f 07 	call	0xebe	; 0xebe <APP_incorrectPassword>
				}	/* END OF INCORRECT PASSWORD */

			}while(MAXIMUM_ATTEMPTS > g_wrongAttempts);
    13a4:	80 91 86 00 	lds	r24, 0x0086
    13a8:	83 30       	cpi	r24, 0x03	; 3
    13aa:	08 f4       	brcc	.+2      	; 0x13ae <main+0x21a>
    13ac:	ac cf       	rjmp	.-168    	; 0x1306 <main+0x172>

		}	/* END OF SECOND CHOICE "DOOR OPEN" */

		g_wrongAttempts = NO_ATTEMPT; /* Reset number of attempts for next time */
    13ae:	10 92 86 00 	sts	0x0086, r1
    13b2:	6f cf       	rjmp	.-290    	; 0x1292 <main+0xfe>

000013b4 <DCMOTOR_init>:
 * [in/out]		 	None
 *
 * [Returns]:       None
 *******************************************************************************/
void DCMOTOR_init(void)
{
    13b4:	df 93       	push	r29
    13b6:	cf 93       	push	r28
    13b8:	cd b7       	in	r28, 0x3d	; 61
    13ba:	de b7       	in	r29, 0x3e	; 62
	/* Configure MOTOR pins as an output pin */
	SET_BIT(MOTOR_PORT_DIR, MOTOR_PIN_OUT1);
    13bc:	aa e3       	ldi	r26, 0x3A	; 58
    13be:	b0 e0       	ldi	r27, 0x00	; 0
    13c0:	ea e3       	ldi	r30, 0x3A	; 58
    13c2:	f0 e0       	ldi	r31, 0x00	; 0
    13c4:	80 81       	ld	r24, Z
    13c6:	88 60       	ori	r24, 0x08	; 8
    13c8:	8c 93       	st	X, r24
	SET_BIT(MOTOR_PORT_DIR, MOTOR_PIN_OUT2);
    13ca:	aa e3       	ldi	r26, 0x3A	; 58
    13cc:	b0 e0       	ldi	r27, 0x00	; 0
    13ce:	ea e3       	ldi	r30, 0x3A	; 58
    13d0:	f0 e0       	ldi	r31, 0x00	; 0
    13d2:	80 81       	ld	r24, Z
    13d4:	80 61       	ori	r24, 0x10	; 16
    13d6:	8c 93       	st	X, r24

	/* Turn off the MOTOR at the beginning as the initial state */
	CLEAR_BIT(MOTOR_PORT_OUT, MOTOR_PIN_OUT1);
    13d8:	ab e3       	ldi	r26, 0x3B	; 59
    13da:	b0 e0       	ldi	r27, 0x00	; 0
    13dc:	eb e3       	ldi	r30, 0x3B	; 59
    13de:	f0 e0       	ldi	r31, 0x00	; 0
    13e0:	80 81       	ld	r24, Z
    13e2:	87 7f       	andi	r24, 0xF7	; 247
    13e4:	8c 93       	st	X, r24
	CLEAR_BIT(MOTOR_PORT_OUT, MOTOR_PIN_OUT2);
    13e6:	ab e3       	ldi	r26, 0x3B	; 59
    13e8:	b0 e0       	ldi	r27, 0x00	; 0
    13ea:	eb e3       	ldi	r30, 0x3B	; 59
    13ec:	f0 e0       	ldi	r31, 0x00	; 0
    13ee:	80 81       	ld	r24, Z
    13f0:	8f 7e       	andi	r24, 0xEF	; 239
    13f2:	8c 93       	st	X, r24
}
    13f4:	cf 91       	pop	r28
    13f6:	df 91       	pop	r29
    13f8:	08 95       	ret

000013fa <DCMOTOR_rotateClockwise>:
 * [in/out]		 	None
 *
 * [Returns]:       None
 *******************************************************************************/
void DCMOTOR_rotateClockwise(void)
{
    13fa:	df 93       	push	r29
    13fc:	cf 93       	push	r28
    13fe:	cd b7       	in	r28, 0x3d	; 61
    1400:	de b7       	in	r29, 0x3e	; 62
	/* Force the MOTOR to rotate Clockwise */
	SET_BIT(MOTOR_PORT_OUT, MOTOR_PIN_OUT1);
    1402:	ab e3       	ldi	r26, 0x3B	; 59
    1404:	b0 e0       	ldi	r27, 0x00	; 0
    1406:	eb e3       	ldi	r30, 0x3B	; 59
    1408:	f0 e0       	ldi	r31, 0x00	; 0
    140a:	80 81       	ld	r24, Z
    140c:	88 60       	ori	r24, 0x08	; 8
    140e:	8c 93       	st	X, r24
	CLEAR_BIT(MOTOR_PORT_OUT, MOTOR_PIN_OUT2);
    1410:	ab e3       	ldi	r26, 0x3B	; 59
    1412:	b0 e0       	ldi	r27, 0x00	; 0
    1414:	eb e3       	ldi	r30, 0x3B	; 59
    1416:	f0 e0       	ldi	r31, 0x00	; 0
    1418:	80 81       	ld	r24, Z
    141a:	8f 7e       	andi	r24, 0xEF	; 239
    141c:	8c 93       	st	X, r24
}
    141e:	cf 91       	pop	r28
    1420:	df 91       	pop	r29
    1422:	08 95       	ret

00001424 <DCMOTOR_rotateAntiClockwise>:
 * [in/out]		 	None
 *
 * [Returns]:       None
 *******************************************************************************/
void DCMOTOR_rotateAntiClockwise()
{
    1424:	df 93       	push	r29
    1426:	cf 93       	push	r28
    1428:	cd b7       	in	r28, 0x3d	; 61
    142a:	de b7       	in	r29, 0x3e	; 62
	/* Force the MOTOR to rotate Anti Clockwise */
	CLEAR_BIT(MOTOR_PORT_OUT, MOTOR_PIN_OUT1);
    142c:	ab e3       	ldi	r26, 0x3B	; 59
    142e:	b0 e0       	ldi	r27, 0x00	; 0
    1430:	eb e3       	ldi	r30, 0x3B	; 59
    1432:	f0 e0       	ldi	r31, 0x00	; 0
    1434:	80 81       	ld	r24, Z
    1436:	87 7f       	andi	r24, 0xF7	; 247
    1438:	8c 93       	st	X, r24
	SET_BIT(MOTOR_PORT_OUT, MOTOR_PIN_OUT2);
    143a:	ab e3       	ldi	r26, 0x3B	; 59
    143c:	b0 e0       	ldi	r27, 0x00	; 0
    143e:	eb e3       	ldi	r30, 0x3B	; 59
    1440:	f0 e0       	ldi	r31, 0x00	; 0
    1442:	80 81       	ld	r24, Z
    1444:	80 61       	ori	r24, 0x10	; 16
    1446:	8c 93       	st	X, r24
}
    1448:	cf 91       	pop	r28
    144a:	df 91       	pop	r29
    144c:	08 95       	ret

0000144e <DCMOTOR_stop>:
 * [in/out]		 	None
 *
 * [Returns]:       None
 *******************************************************************************/
void DCMOTOR_stop(void)
{
    144e:	df 93       	push	r29
    1450:	cf 93       	push	r28
    1452:	cd b7       	in	r28, 0x3d	; 61
    1454:	de b7       	in	r29, 0x3e	; 62
	/* Turn off the MOTOR */
	CLEAR_BIT(MOTOR_PORT_OUT, MOTOR_PIN_OUT1);
    1456:	ab e3       	ldi	r26, 0x3B	; 59
    1458:	b0 e0       	ldi	r27, 0x00	; 0
    145a:	eb e3       	ldi	r30, 0x3B	; 59
    145c:	f0 e0       	ldi	r31, 0x00	; 0
    145e:	80 81       	ld	r24, Z
    1460:	87 7f       	andi	r24, 0xF7	; 247
    1462:	8c 93       	st	X, r24
	CLEAR_BIT(MOTOR_PORT_OUT, MOTOR_PIN_OUT2);
    1464:	ab e3       	ldi	r26, 0x3B	; 59
    1466:	b0 e0       	ldi	r27, 0x00	; 0
    1468:	eb e3       	ldi	r30, 0x3B	; 59
    146a:	f0 e0       	ldi	r31, 0x00	; 0
    146c:	80 81       	ld	r24, Z
    146e:	8f 7e       	andi	r24, 0xEF	; 239
    1470:	8c 93       	st	X, r24
}
    1472:	cf 91       	pop	r28
    1474:	df 91       	pop	r29
    1476:	08 95       	ret

00001478 <EEPROM_init>:
 * [in/out]		 	None
 *
 * [Returns]:       None
 ******************************************************************************************/
void EEPROM_init(void)
{
    1478:	df 93       	push	r29
    147a:	cf 93       	push	r28
    147c:	cd b7       	in	r28, 0x3d	; 61
    147e:	de b7       	in	r29, 0x3e	; 62
    1480:	2b 97       	sbiw	r28, 0x0b	; 11
    1482:	0f b6       	in	r0, 0x3f	; 63
    1484:	f8 94       	cli
    1486:	de bf       	out	0x3e, r29	; 62
    1488:	0f be       	out	0x3f, r0	; 63
    148a:	cd bf       	out	0x3d, r28	; 61
	/* TWI Driver Configurations */
	TWI_ConfigType TWI_Config = {0x01,SCL_FREQ_400KBPS,PRESCALER_1};
    148c:	ce 01       	movw	r24, r28
    148e:	01 96       	adiw	r24, 0x01	; 1
    1490:	98 87       	std	Y+8, r25	; 0x08
    1492:	8f 83       	std	Y+7, r24	; 0x07
    1494:	ee e7       	ldi	r30, 0x7E	; 126
    1496:	f0 e0       	ldi	r31, 0x00	; 0
    1498:	fa 87       	std	Y+10, r31	; 0x0a
    149a:	e9 87       	std	Y+9, r30	; 0x09
    149c:	f6 e0       	ldi	r31, 0x06	; 6
    149e:	fb 87       	std	Y+11, r31	; 0x0b
    14a0:	e9 85       	ldd	r30, Y+9	; 0x09
    14a2:	fa 85       	ldd	r31, Y+10	; 0x0a
    14a4:	00 80       	ld	r0, Z
    14a6:	89 85       	ldd	r24, Y+9	; 0x09
    14a8:	9a 85       	ldd	r25, Y+10	; 0x0a
    14aa:	01 96       	adiw	r24, 0x01	; 1
    14ac:	9a 87       	std	Y+10, r25	; 0x0a
    14ae:	89 87       	std	Y+9, r24	; 0x09
    14b0:	ef 81       	ldd	r30, Y+7	; 0x07
    14b2:	f8 85       	ldd	r31, Y+8	; 0x08
    14b4:	00 82       	st	Z, r0
    14b6:	8f 81       	ldd	r24, Y+7	; 0x07
    14b8:	98 85       	ldd	r25, Y+8	; 0x08
    14ba:	01 96       	adiw	r24, 0x01	; 1
    14bc:	98 87       	std	Y+8, r25	; 0x08
    14be:	8f 83       	std	Y+7, r24	; 0x07
    14c0:	9b 85       	ldd	r25, Y+11	; 0x0b
    14c2:	91 50       	subi	r25, 0x01	; 1
    14c4:	9b 87       	std	Y+11, r25	; 0x0b
    14c6:	eb 85       	ldd	r30, Y+11	; 0x0b
    14c8:	ee 23       	and	r30, r30
    14ca:	51 f7       	brne	.-44     	; 0x14a0 <EEPROM_init+0x28>

	/* Just initialize the I2C(TWI) module inside the MC */
	TWI_init(&TWI_Config);
    14cc:	ce 01       	movw	r24, r28
    14ce:	01 96       	adiw	r24, 0x01	; 1
    14d0:	0e 94 14 0b 	call	0x1628	; 0x1628 <TWI_init>
}
    14d4:	2b 96       	adiw	r28, 0x0b	; 11
    14d6:	0f b6       	in	r0, 0x3f	; 63
    14d8:	f8 94       	cli
    14da:	de bf       	out	0x3e, r29	; 62
    14dc:	0f be       	out	0x3f, r0	; 63
    14de:	cd bf       	out	0x3d, r28	; 61
    14e0:	cf 91       	pop	r28
    14e2:	df 91       	pop	r29
    14e4:	08 95       	ret

000014e6 <EEPROM_writeByte>:
 * [in/out]		 	None
 *
 * [Returns]:       Status of this function (SUCCESS, ERROR)
 ******************************************************************************************/
uint8 EEPROM_writeByte(uint16 u16addr, uint8 u8data)
{
    14e6:	df 93       	push	r29
    14e8:	cf 93       	push	r28
    14ea:	00 d0       	rcall	.+0      	; 0x14ec <EEPROM_writeByte+0x6>
    14ec:	00 d0       	rcall	.+0      	; 0x14ee <EEPROM_writeByte+0x8>
    14ee:	cd b7       	in	r28, 0x3d	; 61
    14f0:	de b7       	in	r29, 0x3e	; 62
    14f2:	9a 83       	std	Y+2, r25	; 0x02
    14f4:	89 83       	std	Y+1, r24	; 0x01
    14f6:	6b 83       	std	Y+3, r22	; 0x03
	/* Send the Start Bit */
    TWI_start();
    14f8:	0e 94 79 0b 	call	0x16f2	; 0x16f2 <TWI_start>
    if (TWI_getStatus() != TW_START)
    14fc:	0e 94 d1 0b 	call	0x17a2	; 0x17a2 <TWI_getStatus>
    1500:	88 30       	cpi	r24, 0x08	; 8
    1502:	11 f0       	breq	.+4      	; 0x1508 <EEPROM_writeByte+0x22>
        return ERROR;
    1504:	1c 82       	std	Y+4, r1	; 0x04
    1506:	28 c0       	rjmp	.+80     	; 0x1558 <EEPROM_writeByte+0x72>
		
    /*
     * Send the device address, we need to get A8 A9 A10 address bits from the
     * memory location address and R/W=0 (write)
     */
    TWI_write((uint8)(0xA0 | ((u16addr & 0x0700)>>7)));
    1508:	89 81       	ldd	r24, Y+1	; 0x01
    150a:	9a 81       	ldd	r25, Y+2	; 0x02
    150c:	80 70       	andi	r24, 0x00	; 0
    150e:	97 70       	andi	r25, 0x07	; 7
    1510:	88 0f       	add	r24, r24
    1512:	89 2f       	mov	r24, r25
    1514:	88 1f       	adc	r24, r24
    1516:	99 0b       	sbc	r25, r25
    1518:	91 95       	neg	r25
    151a:	80 6a       	ori	r24, 0xA0	; 160
    151c:	0e 94 94 0b 	call	0x1728	; 0x1728 <TWI_write>
    if (TWI_getStatus() != TW_MT_SLA_W_ACK)
    1520:	0e 94 d1 0b 	call	0x17a2	; 0x17a2 <TWI_getStatus>
    1524:	88 31       	cpi	r24, 0x18	; 24
    1526:	11 f0       	breq	.+4      	; 0x152c <EEPROM_writeByte+0x46>
        return ERROR; 
    1528:	1c 82       	std	Y+4, r1	; 0x04
    152a:	16 c0       	rjmp	.+44     	; 0x1558 <EEPROM_writeByte+0x72>
		 
    /* Send the required memory location address */
    TWI_write((uint8)(u16addr));
    152c:	89 81       	ldd	r24, Y+1	; 0x01
    152e:	0e 94 94 0b 	call	0x1728	; 0x1728 <TWI_write>
    if (TWI_getStatus() != TW_MT_DATA_ACK)
    1532:	0e 94 d1 0b 	call	0x17a2	; 0x17a2 <TWI_getStatus>
    1536:	88 32       	cpi	r24, 0x28	; 40
    1538:	11 f0       	breq	.+4      	; 0x153e <EEPROM_writeByte+0x58>
        return ERROR;
    153a:	1c 82       	std	Y+4, r1	; 0x04
    153c:	0d c0       	rjmp	.+26     	; 0x1558 <EEPROM_writeByte+0x72>
		
    /* Write byte to EEPROM */
    TWI_write(u8data);
    153e:	8b 81       	ldd	r24, Y+3	; 0x03
    1540:	0e 94 94 0b 	call	0x1728	; 0x1728 <TWI_write>
    if (TWI_getStatus() != TW_MT_DATA_ACK)
    1544:	0e 94 d1 0b 	call	0x17a2	; 0x17a2 <TWI_getStatus>
    1548:	88 32       	cpi	r24, 0x28	; 40
    154a:	11 f0       	breq	.+4      	; 0x1550 <EEPROM_writeByte+0x6a>
        return ERROR;
    154c:	1c 82       	std	Y+4, r1	; 0x04
    154e:	04 c0       	rjmp	.+8      	; 0x1558 <EEPROM_writeByte+0x72>

    /* Send the Stop Bit */
    TWI_stop();
    1550:	0e 94 89 0b 	call	0x1712	; 0x1712 <TWI_stop>
	
    return SUCCESS;
    1554:	81 e0       	ldi	r24, 0x01	; 1
    1556:	8c 83       	std	Y+4, r24	; 0x04
    1558:	8c 81       	ldd	r24, Y+4	; 0x04
}
    155a:	0f 90       	pop	r0
    155c:	0f 90       	pop	r0
    155e:	0f 90       	pop	r0
    1560:	0f 90       	pop	r0
    1562:	cf 91       	pop	r28
    1564:	df 91       	pop	r29
    1566:	08 95       	ret

00001568 <EEPROM_readByte>:
 * [in/out]		 	None
 *
 * [Returns]:       Status of this function (SUCCESS, ERROR)
 ******************************************************************************************/
uint8 EEPROM_readByte(uint16 u16addr, uint8 * u8data)
{
    1568:	df 93       	push	r29
    156a:	cf 93       	push	r28
    156c:	00 d0       	rcall	.+0      	; 0x156e <EEPROM_readByte+0x6>
    156e:	00 d0       	rcall	.+0      	; 0x1570 <EEPROM_readByte+0x8>
    1570:	0f 92       	push	r0
    1572:	cd b7       	in	r28, 0x3d	; 61
    1574:	de b7       	in	r29, 0x3e	; 62
    1576:	9a 83       	std	Y+2, r25	; 0x02
    1578:	89 83       	std	Y+1, r24	; 0x01
    157a:	7c 83       	std	Y+4, r23	; 0x04
    157c:	6b 83       	std	Y+3, r22	; 0x03
	/* Send the Start Bit */
    TWI_start();
    157e:	0e 94 79 0b 	call	0x16f2	; 0x16f2 <TWI_start>
    if (TWI_getStatus() != TW_START)
    1582:	0e 94 d1 0b 	call	0x17a2	; 0x17a2 <TWI_getStatus>
    1586:	88 30       	cpi	r24, 0x08	; 8
    1588:	11 f0       	breq	.+4      	; 0x158e <EEPROM_readByte+0x26>
        return ERROR;
    158a:	1d 82       	std	Y+5, r1	; 0x05
    158c:	44 c0       	rjmp	.+136    	; 0x1616 <EEPROM_readByte+0xae>
		
    /*
     * Send the device address, we need to get A8 A9 A10 address bits from the
     * memory location address and R/W=0 (write)
     */
    TWI_write((uint8)((0xA0) | ((u16addr & 0x0700)>>7)));
    158e:	89 81       	ldd	r24, Y+1	; 0x01
    1590:	9a 81       	ldd	r25, Y+2	; 0x02
    1592:	80 70       	andi	r24, 0x00	; 0
    1594:	97 70       	andi	r25, 0x07	; 7
    1596:	88 0f       	add	r24, r24
    1598:	89 2f       	mov	r24, r25
    159a:	88 1f       	adc	r24, r24
    159c:	99 0b       	sbc	r25, r25
    159e:	91 95       	neg	r25
    15a0:	80 6a       	ori	r24, 0xA0	; 160
    15a2:	0e 94 94 0b 	call	0x1728	; 0x1728 <TWI_write>
    if (TWI_getStatus() != TW_MT_SLA_W_ACK)
    15a6:	0e 94 d1 0b 	call	0x17a2	; 0x17a2 <TWI_getStatus>
    15aa:	88 31       	cpi	r24, 0x18	; 24
    15ac:	11 f0       	breq	.+4      	; 0x15b2 <EEPROM_readByte+0x4a>
        return ERROR;
    15ae:	1d 82       	std	Y+5, r1	; 0x05
    15b0:	32 c0       	rjmp	.+100    	; 0x1616 <EEPROM_readByte+0xae>
		
    /* Send the required memory location address */
    TWI_write((uint8)(u16addr));
    15b2:	89 81       	ldd	r24, Y+1	; 0x01
    15b4:	0e 94 94 0b 	call	0x1728	; 0x1728 <TWI_write>
    if (TWI_getStatus() != TW_MT_DATA_ACK)
    15b8:	0e 94 d1 0b 	call	0x17a2	; 0x17a2 <TWI_getStatus>
    15bc:	88 32       	cpi	r24, 0x28	; 40
    15be:	11 f0       	breq	.+4      	; 0x15c4 <EEPROM_readByte+0x5c>
        return ERROR;
    15c0:	1d 82       	std	Y+5, r1	; 0x05
    15c2:	29 c0       	rjmp	.+82     	; 0x1616 <EEPROM_readByte+0xae>
		
    /* Send the Repeated Start Bit */
    TWI_start();
    15c4:	0e 94 79 0b 	call	0x16f2	; 0x16f2 <TWI_start>
    if (TWI_getStatus() != TW_REP_START)
    15c8:	0e 94 d1 0b 	call	0x17a2	; 0x17a2 <TWI_getStatus>
    15cc:	80 31       	cpi	r24, 0x10	; 16
    15ce:	11 f0       	breq	.+4      	; 0x15d4 <EEPROM_readByte+0x6c>
        return ERROR;
    15d0:	1d 82       	std	Y+5, r1	; 0x05
    15d2:	21 c0       	rjmp	.+66     	; 0x1616 <EEPROM_readByte+0xae>
		
    /*
     * Send the device address, we need to get A8 A9 A10 address bits from the
     * memory location address and R/W=1 (Read)
     */
    TWI_write((uint8)((0xA0) | ((u16addr & 0x0700)>>7) | 1));
    15d4:	89 81       	ldd	r24, Y+1	; 0x01
    15d6:	9a 81       	ldd	r25, Y+2	; 0x02
    15d8:	80 70       	andi	r24, 0x00	; 0
    15da:	97 70       	andi	r25, 0x07	; 7
    15dc:	88 0f       	add	r24, r24
    15de:	89 2f       	mov	r24, r25
    15e0:	88 1f       	adc	r24, r24
    15e2:	99 0b       	sbc	r25, r25
    15e4:	91 95       	neg	r25
    15e6:	81 6a       	ori	r24, 0xA1	; 161
    15e8:	0e 94 94 0b 	call	0x1728	; 0x1728 <TWI_write>
    if (TWI_getStatus() != TW_MT_SLA_R_ACK)
    15ec:	0e 94 d1 0b 	call	0x17a2	; 0x17a2 <TWI_getStatus>
    15f0:	80 34       	cpi	r24, 0x40	; 64
    15f2:	11 f0       	breq	.+4      	; 0x15f8 <EEPROM_readByte+0x90>
        return ERROR;
    15f4:	1d 82       	std	Y+5, r1	; 0x05
    15f6:	0f c0       	rjmp	.+30     	; 0x1616 <EEPROM_readByte+0xae>

    /* Read Byte from Memory without send ACK */
    *u8data = TWI_readWithNACK();
    15f8:	0e 94 be 0b 	call	0x177c	; 0x177c <TWI_readWithNACK>
    15fc:	eb 81       	ldd	r30, Y+3	; 0x03
    15fe:	fc 81       	ldd	r31, Y+4	; 0x04
    1600:	80 83       	st	Z, r24
    if (TWI_getStatus() != TW_MR_DATA_NACK)
    1602:	0e 94 d1 0b 	call	0x17a2	; 0x17a2 <TWI_getStatus>
    1606:	88 35       	cpi	r24, 0x58	; 88
    1608:	11 f0       	breq	.+4      	; 0x160e <EEPROM_readByte+0xa6>
        return ERROR;
    160a:	1d 82       	std	Y+5, r1	; 0x05
    160c:	04 c0       	rjmp	.+8      	; 0x1616 <EEPROM_readByte+0xae>

    /* Send the Stop Bit */
    TWI_stop();
    160e:	0e 94 89 0b 	call	0x1712	; 0x1712 <TWI_stop>
    return SUCCESS;
    1612:	81 e0       	ldi	r24, 0x01	; 1
    1614:	8d 83       	std	Y+5, r24	; 0x05
    1616:	8d 81       	ldd	r24, Y+5	; 0x05
}
    1618:	0f 90       	pop	r0
    161a:	0f 90       	pop	r0
    161c:	0f 90       	pop	r0
    161e:	0f 90       	pop	r0
    1620:	0f 90       	pop	r0
    1622:	cf 91       	pop	r28
    1624:	df 91       	pop	r29
    1626:	08 95       	ret

00001628 <TWI_init>:
 * [in/out]		 	None
 *
 * [Returns]:       None
 ********************************************************************************************/
void TWI_init(const TWI_ConfigType * Config_Ptr)
{
    1628:	cf 92       	push	r12
    162a:	df 92       	push	r13
    162c:	ef 92       	push	r14
    162e:	ff 92       	push	r15
    1630:	0f 93       	push	r16
    1632:	1f 93       	push	r17
    1634:	df 93       	push	r29
    1636:	cf 93       	push	r28
    1638:	00 d0       	rcall	.+0      	; 0x163a <TWI_init+0x12>
    163a:	cd b7       	in	r28, 0x3d	; 61
    163c:	de b7       	in	r29, 0x3e	; 62
    163e:	9a 83       	std	Y+2, r25	; 0x02
    1640:	89 83       	std	Y+1, r24	; 0x01
	/* Insert the required Pre-scaler in First two bits (TWPS1,TWPS0) in TWSR Register */
	TWSR = (TWSR & 0xFC) | (Config_Ptr -> twi_Prescaler);
    1642:	a1 e2       	ldi	r26, 0x21	; 33
    1644:	b0 e0       	ldi	r27, 0x00	; 0
    1646:	e1 e2       	ldi	r30, 0x21	; 33
    1648:	f0 e0       	ldi	r31, 0x00	; 0
    164a:	80 81       	ld	r24, Z
    164c:	98 2f       	mov	r25, r24
    164e:	9c 7f       	andi	r25, 0xFC	; 252
    1650:	e9 81       	ldd	r30, Y+1	; 0x01
    1652:	fa 81       	ldd	r31, Y+2	; 0x02
    1654:	85 81       	ldd	r24, Z+5	; 0x05
    1656:	89 2b       	or	r24, r25
    1658:	8c 93       	st	X, r24

	/* Insert the required Bit Rate in TWBR Register */
	TWBR = ( ( (F_CPU/Config_Ptr -> twi_Clock) -16) /2 ) / ( 4 << (Config_Ptr -> twi_Prescaler) );
    165a:	cc 24       	eor	r12, r12
    165c:	dd 24       	eor	r13, r13
    165e:	68 94       	set
    1660:	c5 f8       	bld	r12, 5
    1662:	e9 81       	ldd	r30, Y+1	; 0x01
    1664:	fa 81       	ldd	r31, Y+2	; 0x02
    1666:	21 81       	ldd	r18, Z+1	; 0x01
    1668:	32 81       	ldd	r19, Z+2	; 0x02
    166a:	43 81       	ldd	r20, Z+3	; 0x03
    166c:	54 81       	ldd	r21, Z+4	; 0x04
    166e:	80 e0       	ldi	r24, 0x00	; 0
    1670:	92 e1       	ldi	r25, 0x12	; 18
    1672:	aa e7       	ldi	r26, 0x7A	; 122
    1674:	b0 e0       	ldi	r27, 0x00	; 0
    1676:	bc 01       	movw	r22, r24
    1678:	cd 01       	movw	r24, r26
    167a:	0e 94 96 11 	call	0x232c	; 0x232c <__udivmodsi4>
    167e:	da 01       	movw	r26, r20
    1680:	c9 01       	movw	r24, r18
    1682:	40 97       	sbiw	r24, 0x10	; 16
    1684:	a1 09       	sbc	r26, r1
    1686:	b1 09       	sbc	r27, r1
    1688:	7c 01       	movw	r14, r24
    168a:	8d 01       	movw	r16, r26
    168c:	16 95       	lsr	r17
    168e:	07 95       	ror	r16
    1690:	f7 94       	ror	r15
    1692:	e7 94       	ror	r14
    1694:	e9 81       	ldd	r30, Y+1	; 0x01
    1696:	fa 81       	ldd	r31, Y+2	; 0x02
    1698:	85 81       	ldd	r24, Z+5	; 0x05
    169a:	28 2f       	mov	r18, r24
    169c:	30 e0       	ldi	r19, 0x00	; 0
    169e:	84 e0       	ldi	r24, 0x04	; 4
    16a0:	90 e0       	ldi	r25, 0x00	; 0
    16a2:	02 c0       	rjmp	.+4      	; 0x16a8 <TWI_init+0x80>
    16a4:	88 0f       	add	r24, r24
    16a6:	99 1f       	adc	r25, r25
    16a8:	2a 95       	dec	r18
    16aa:	e2 f7       	brpl	.-8      	; 0x16a4 <TWI_init+0x7c>
    16ac:	9c 01       	movw	r18, r24
    16ae:	44 27       	eor	r20, r20
    16b0:	37 fd       	sbrc	r19, 7
    16b2:	40 95       	com	r20
    16b4:	54 2f       	mov	r21, r20
    16b6:	c8 01       	movw	r24, r16
    16b8:	b7 01       	movw	r22, r14
    16ba:	0e 94 96 11 	call	0x232c	; 0x232c <__udivmodsi4>
    16be:	da 01       	movw	r26, r20
    16c0:	c9 01       	movw	r24, r18
    16c2:	f6 01       	movw	r30, r12
    16c4:	80 83       	st	Z, r24

    /*
     * Insert the required Two Wire Bus address, if any master device want to call MCU
     * (used in case this MC is a slave device), General Call Recognition: Off
     */
    TWAR = ( (Config_Ptr -> twi_Address) << 1 ); /* Shift left to use as address in 7 bits only */
    16c6:	a2 e2       	ldi	r26, 0x22	; 34
    16c8:	b0 e0       	ldi	r27, 0x00	; 0
    16ca:	e9 81       	ldd	r30, Y+1	; 0x01
    16cc:	fa 81       	ldd	r31, Y+2	; 0x02
    16ce:	80 81       	ld	r24, Z
    16d0:	88 0f       	add	r24, r24
    16d2:	8c 93       	st	X, r24
	
    TWCR = (1 << TWEN); /* Enable TWI */
    16d4:	e6 e5       	ldi	r30, 0x56	; 86
    16d6:	f0 e0       	ldi	r31, 0x00	; 0
    16d8:	84 e0       	ldi	r24, 0x04	; 4
    16da:	80 83       	st	Z, r24
}
    16dc:	0f 90       	pop	r0
    16de:	0f 90       	pop	r0
    16e0:	cf 91       	pop	r28
    16e2:	df 91       	pop	r29
    16e4:	1f 91       	pop	r17
    16e6:	0f 91       	pop	r16
    16e8:	ff 90       	pop	r15
    16ea:	ef 90       	pop	r14
    16ec:	df 90       	pop	r13
    16ee:	cf 90       	pop	r12
    16f0:	08 95       	ret

000016f2 <TWI_start>:
 * [in/out]		 	None
 *
 * [Returns]:       None
 ********************************************************************************************/
void TWI_start(void)
{
    16f2:	df 93       	push	r29
    16f4:	cf 93       	push	r28
    16f6:	cd b7       	in	r28, 0x3d	; 61
    16f8:	de b7       	in	r29, 0x3e	; 62
    /* 
	 * Clear the TWINT flag before sending the start bit TWINT = 1
	 * send the start bit by TWSTA = 1
	 * Enable TWI Module TWEN = 1 
	 */
    TWCR = (1 << TWINT) | (1 << TWSTA) | (1 << TWEN);
    16fa:	e6 e5       	ldi	r30, 0x56	; 86
    16fc:	f0 e0       	ldi	r31, 0x00	; 0
    16fe:	84 ea       	ldi	r24, 0xA4	; 164
    1700:	80 83       	st	Z, r24
    
    /* Wait for TWINT flag set in TWCR Register (start bit is send successfully) */
    while(BIT_IS_CLEAR(TWCR,TWINT));
    1702:	e6 e5       	ldi	r30, 0x56	; 86
    1704:	f0 e0       	ldi	r31, 0x00	; 0
    1706:	80 81       	ld	r24, Z
    1708:	88 23       	and	r24, r24
    170a:	dc f7       	brge	.-10     	; 0x1702 <TWI_start+0x10>
}
    170c:	cf 91       	pop	r28
    170e:	df 91       	pop	r29
    1710:	08 95       	ret

00001712 <TWI_stop>:
 * [in/out]		 	None
 *
 * [Returns]:       None
 *****************************************************************************************/
void TWI_stop(void)
{
    1712:	df 93       	push	r29
    1714:	cf 93       	push	r28
    1716:	cd b7       	in	r28, 0x3d	; 61
    1718:	de b7       	in	r29, 0x3e	; 62
    /* 
	 * Clear the TWINT flag before sending the stop bit TWINT = 1
	 * send the stop bit by TWSTO = 1
	 * Enable TWI Module TWEN = 1 
	 */
    TWCR = (1 << TWINT) | (1 << TWSTO) | (1 << TWEN);
    171a:	e6 e5       	ldi	r30, 0x56	; 86
    171c:	f0 e0       	ldi	r31, 0x00	; 0
    171e:	84 e9       	ldi	r24, 0x94	; 148
    1720:	80 83       	st	Z, r24
}
    1722:	cf 91       	pop	r28
    1724:	df 91       	pop	r29
    1726:	08 95       	ret

00001728 <TWI_write>:
 * [in/out]		 	None
 *
 * [Returns]:       None
 *****************************************************************************************/
void TWI_write(uint8 data)
{
    1728:	df 93       	push	r29
    172a:	cf 93       	push	r28
    172c:	0f 92       	push	r0
    172e:	cd b7       	in	r28, 0x3d	; 61
    1730:	de b7       	in	r29, 0x3e	; 62
    1732:	89 83       	std	Y+1, r24	; 0x01
    /* Put data On TWI data Register */
    TWDR = data;
    1734:	e3 e2       	ldi	r30, 0x23	; 35
    1736:	f0 e0       	ldi	r31, 0x00	; 0
    1738:	89 81       	ldd	r24, Y+1	; 0x01
    173a:	80 83       	st	Z, r24

    /* 
	 * Clear the TWINT flag before sending the data TWINT = 1
	 * Enable TWI Module TWEN = 1 
	 */ 
    TWCR = (1 << TWINT) | (1 << TWEN);
    173c:	e6 e5       	ldi	r30, 0x56	; 86
    173e:	f0 e0       	ldi	r31, 0x00	; 0
    1740:	84 e8       	ldi	r24, 0x84	; 132
    1742:	80 83       	st	Z, r24

    /* Wait for TWINT flag set in TWCR Register(data is send successfully) */
    while(BIT_IS_CLEAR(TWCR,TWINT));
    1744:	e6 e5       	ldi	r30, 0x56	; 86
    1746:	f0 e0       	ldi	r31, 0x00	; 0
    1748:	80 81       	ld	r24, Z
    174a:	88 23       	and	r24, r24
    174c:	dc f7       	brge	.-10     	; 0x1744 <TWI_write+0x1c>
}
    174e:	0f 90       	pop	r0
    1750:	cf 91       	pop	r28
    1752:	df 91       	pop	r29
    1754:	08 95       	ret

00001756 <TWI_readWithACK>:
 * [in/out]		 	None
 *
 * [Returns]:       Data read (with ACK) from the TWI Bus
 *****************************************************************************************/
uint8 TWI_readWithACK(void)
{
    1756:	df 93       	push	r29
    1758:	cf 93       	push	r28
    175a:	cd b7       	in	r28, 0x3d	; 61
    175c:	de b7       	in	r29, 0x3e	; 62
	/* 
	 * Clear the TWINT flag before reading the data TWINT =  1
	 * Enable sending ACK after reading or receiving data TWEA = 1
	 * Enable TWI Module TWEN=1 
	 */ 
    TWCR = (1 << TWINT) | (1 << TWEN) | (1 << TWEA);
    175e:	e6 e5       	ldi	r30, 0x56	; 86
    1760:	f0 e0       	ldi	r31, 0x00	; 0
    1762:	84 ec       	ldi	r24, 0xC4	; 196
    1764:	80 83       	st	Z, r24
	
    /* Wait for TWINT flag set in TWCR Register (data received successfully) */
    while(BIT_IS_CLEAR(TWCR,TWINT));
    1766:	e6 e5       	ldi	r30, 0x56	; 86
    1768:	f0 e0       	ldi	r31, 0x00	; 0
    176a:	80 81       	ld	r24, Z
    176c:	88 23       	and	r24, r24
    176e:	dc f7       	brge	.-10     	; 0x1766 <TWI_readWithACK+0x10>
	
    /* Read Data */
    return TWDR;
    1770:	e3 e2       	ldi	r30, 0x23	; 35
    1772:	f0 e0       	ldi	r31, 0x00	; 0
    1774:	80 81       	ld	r24, Z
}
    1776:	cf 91       	pop	r28
    1778:	df 91       	pop	r29
    177a:	08 95       	ret

0000177c <TWI_readWithNACK>:
 * [in/out]		 	None
 *
 * [Returns]:       Data read (without ACK) from the TWI Bus
 *****************************************************************************************/
uint8 TWI_readWithNACK(void)
{
    177c:	df 93       	push	r29
    177e:	cf 93       	push	r28
    1780:	cd b7       	in	r28, 0x3d	; 61
    1782:	de b7       	in	r29, 0x3e	; 62
	/* 
	 * Clear the TWINT flag before reading the data TWINT = 1
	 * Enable TWI Module TWEN = 1 
	 */
    TWCR = (1 << TWINT) | (1 << TWEN);
    1784:	e6 e5       	ldi	r30, 0x56	; 86
    1786:	f0 e0       	ldi	r31, 0x00	; 0
    1788:	84 e8       	ldi	r24, 0x84	; 132
    178a:	80 83       	st	Z, r24
	
    /* Wait for TWINT flag set in TWCR Register (data received successfully) */
    while(BIT_IS_CLEAR(TWCR,TWINT));
    178c:	e6 e5       	ldi	r30, 0x56	; 86
    178e:	f0 e0       	ldi	r31, 0x00	; 0
    1790:	80 81       	ld	r24, Z
    1792:	88 23       	and	r24, r24
    1794:	dc f7       	brge	.-10     	; 0x178c <TWI_readWithNACK+0x10>
	
    /* Read Data */
    return TWDR;
    1796:	e3 e2       	ldi	r30, 0x23	; 35
    1798:	f0 e0       	ldi	r31, 0x00	; 0
    179a:	80 81       	ld	r24, Z
}
    179c:	cf 91       	pop	r28
    179e:	df 91       	pop	r29
    17a0:	08 95       	ret

000017a2 <TWI_getStatus>:
 * [in/out]		 	None
 *
 * [Returns]:       Status of the TWI Bus
 *****************************************************************************************/
uint8 TWI_getStatus(void)
{
    17a2:	df 93       	push	r29
    17a4:	cf 93       	push	r28
    17a6:	0f 92       	push	r0
    17a8:	cd b7       	in	r28, 0x3d	; 61
    17aa:	de b7       	in	r29, 0x3e	; 62
    uint8 status;
    /* Masking to eliminate first 3 bits and get the last 5 bits (status bits) */
    status = TWSR & 0xF8;
    17ac:	e1 e2       	ldi	r30, 0x21	; 33
    17ae:	f0 e0       	ldi	r31, 0x00	; 0
    17b0:	80 81       	ld	r24, Z
    17b2:	88 7f       	andi	r24, 0xF8	; 248
    17b4:	89 83       	std	Y+1, r24	; 0x01
    return status;
    17b6:	89 81       	ldd	r24, Y+1	; 0x01
}
    17b8:	0f 90       	pop	r0
    17ba:	cf 91       	pop	r28
    17bc:	df 91       	pop	r29
    17be:	08 95       	ret

000017c0 <TWI_DeInit>:
 * [in/out]		 	None
 *
 * [Returns]:       None
 *****************************************************************************************/
void TWI_DeInit(void)
{
    17c0:	df 93       	push	r29
    17c2:	cf 93       	push	r28
    17c4:	cd b7       	in	r28, 0x3d	; 61
    17c6:	de b7       	in	r29, 0x3e	; 62
	/* Reset All TWI Registers to its initial value (if they have), and Clear the others */
	TWBR = 0;
    17c8:	e0 e2       	ldi	r30, 0x20	; 32
    17ca:	f0 e0       	ldi	r31, 0x00	; 0
    17cc:	10 82       	st	Z, r1
	TWSR = 0xF8;
    17ce:	e1 e2       	ldi	r30, 0x21	; 33
    17d0:	f0 e0       	ldi	r31, 0x00	; 0
    17d2:	88 ef       	ldi	r24, 0xF8	; 248
    17d4:	80 83       	st	Z, r24
	TWAR = 0xFE;
    17d6:	e2 e2       	ldi	r30, 0x22	; 34
    17d8:	f0 e0       	ldi	r31, 0x00	; 0
    17da:	8e ef       	ldi	r24, 0xFE	; 254
    17dc:	80 83       	st	Z, r24

	/* Disable TWI */
	TWCR &= ~(1 << TWEN);
    17de:	a6 e5       	ldi	r26, 0x56	; 86
    17e0:	b0 e0       	ldi	r27, 0x00	; 0
    17e2:	e6 e5       	ldi	r30, 0x56	; 86
    17e4:	f0 e0       	ldi	r31, 0x00	; 0
    17e6:	80 81       	ld	r24, Z
    17e8:	8b 7f       	andi	r24, 0xFB	; 251
    17ea:	8c 93       	st	X, r24
}
    17ec:	cf 91       	pop	r28
    17ee:	df 91       	pop	r29
    17f0:	08 95       	ret

000017f2 <LED_init>:
 * [in/out]		 	None
 *
 * [Returns]:       None
 *******************************************************************************/
void LED_init(void)
{
    17f2:	df 93       	push	r29
    17f4:	cf 93       	push	r28
    17f6:	cd b7       	in	r28, 0x3d	; 61
    17f8:	de b7       	in	r29, 0x3e	; 62
	/* Configure LED pin as an output pin */
	SET_BIT(LED_PORT_DIR, LED_PIN);
    17fa:	aa e3       	ldi	r26, 0x3A	; 58
    17fc:	b0 e0       	ldi	r27, 0x00	; 0
    17fe:	ea e3       	ldi	r30, 0x3A	; 58
    1800:	f0 e0       	ldi	r31, 0x00	; 0
    1802:	80 81       	ld	r24, Z
    1804:	80 62       	ori	r24, 0x20	; 32
    1806:	8c 93       	st	X, r24
	/* Turn off LED at the beginning as the initial state */
	CLEAR_BIT(LED_PORT_OUT, LED_PIN);
    1808:	ab e3       	ldi	r26, 0x3B	; 59
    180a:	b0 e0       	ldi	r27, 0x00	; 0
    180c:	eb e3       	ldi	r30, 0x3B	; 59
    180e:	f0 e0       	ldi	r31, 0x00	; 0
    1810:	80 81       	ld	r24, Z
    1812:	8f 7d       	andi	r24, 0xDF	; 223
    1814:	8c 93       	st	X, r24
}
    1816:	cf 91       	pop	r28
    1818:	df 91       	pop	r29
    181a:	08 95       	ret

0000181c <LED_turnOn>:
 * [in/out]		 	None
 *
 * [Returns]:       None
 *******************************************************************************/
void LED_turnOn(void)
{
    181c:	df 93       	push	r29
    181e:	cf 93       	push	r28
    1820:	cd b7       	in	r28, 0x3d	; 61
    1822:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(LED_PORT_OUT, LED_PIN);	/* Turn On LED */
    1824:	ab e3       	ldi	r26, 0x3B	; 59
    1826:	b0 e0       	ldi	r27, 0x00	; 0
    1828:	eb e3       	ldi	r30, 0x3B	; 59
    182a:	f0 e0       	ldi	r31, 0x00	; 0
    182c:	80 81       	ld	r24, Z
    182e:	80 62       	ori	r24, 0x20	; 32
    1830:	8c 93       	st	X, r24
}
    1832:	cf 91       	pop	r28
    1834:	df 91       	pop	r29
    1836:	08 95       	ret

00001838 <LED_turnOff>:
 * [in/out]		 	None
 *
 * [Returns]:       None
 *******************************************************************************/
void LED_turnOff(void)
{
    1838:	df 93       	push	r29
    183a:	cf 93       	push	r28
    183c:	cd b7       	in	r28, 0x3d	; 61
    183e:	de b7       	in	r29, 0x3e	; 62
	CLEAR_BIT(LED_PORT_OUT, LED_PIN);	/* Turn Off LED */
    1840:	ab e3       	ldi	r26, 0x3B	; 59
    1842:	b0 e0       	ldi	r27, 0x00	; 0
    1844:	eb e3       	ldi	r30, 0x3B	; 59
    1846:	f0 e0       	ldi	r31, 0x00	; 0
    1848:	80 81       	ld	r24, Z
    184a:	8f 7d       	andi	r24, 0xDF	; 223
    184c:	8c 93       	st	X, r24
}
    184e:	cf 91       	pop	r28
    1850:	df 91       	pop	r29
    1852:	08 95       	ret

00001854 <__vector_9>:
/************************************************************************************
 *                                     TIMER0                                       *
 ************************************************************************************/

ISR(TIMER0_OVF_vect)
{
    1854:	1f 92       	push	r1
    1856:	0f 92       	push	r0
    1858:	0f b6       	in	r0, 0x3f	; 63
    185a:	0f 92       	push	r0
    185c:	11 24       	eor	r1, r1
    185e:	2f 93       	push	r18
    1860:	3f 93       	push	r19
    1862:	4f 93       	push	r20
    1864:	5f 93       	push	r21
    1866:	6f 93       	push	r22
    1868:	7f 93       	push	r23
    186a:	8f 93       	push	r24
    186c:	9f 93       	push	r25
    186e:	af 93       	push	r26
    1870:	bf 93       	push	r27
    1872:	ef 93       	push	r30
    1874:	ff 93       	push	r31
    1876:	df 93       	push	r29
    1878:	cf 93       	push	r28
    187a:	cd b7       	in	r28, 0x3d	; 61
    187c:	de b7       	in	r29, 0x3e	; 62
	/* Check if Pointer is not a NULL one, to avoid Segmentation fault */
	if(g_callBackPtrTimer0 != NULL_PTR)
    187e:	80 91 8d 00 	lds	r24, 0x008D
    1882:	90 91 8e 00 	lds	r25, 0x008E
    1886:	00 97       	sbiw	r24, 0x00	; 0
    1888:	29 f0       	breq	.+10     	; 0x1894 <__vector_9+0x40>
	{
		/*
		 * Call the callback function in the application after the overflow has
		 * occurred in TIMER0 (NORMAL MODE)
		 */
		(*g_callBackPtrTimer0)();
    188a:	e0 91 8d 00 	lds	r30, 0x008D
    188e:	f0 91 8e 00 	lds	r31, 0x008E
    1892:	09 95       	icall
	}
}
    1894:	cf 91       	pop	r28
    1896:	df 91       	pop	r29
    1898:	ff 91       	pop	r31
    189a:	ef 91       	pop	r30
    189c:	bf 91       	pop	r27
    189e:	af 91       	pop	r26
    18a0:	9f 91       	pop	r25
    18a2:	8f 91       	pop	r24
    18a4:	7f 91       	pop	r23
    18a6:	6f 91       	pop	r22
    18a8:	5f 91       	pop	r21
    18aa:	4f 91       	pop	r20
    18ac:	3f 91       	pop	r19
    18ae:	2f 91       	pop	r18
    18b0:	0f 90       	pop	r0
    18b2:	0f be       	out	0x3f, r0	; 63
    18b4:	0f 90       	pop	r0
    18b6:	1f 90       	pop	r1
    18b8:	18 95       	reti

000018ba <__vector_19>:

ISR(TIMER0_COMP_vect)
{
    18ba:	1f 92       	push	r1
    18bc:	0f 92       	push	r0
    18be:	0f b6       	in	r0, 0x3f	; 63
    18c0:	0f 92       	push	r0
    18c2:	11 24       	eor	r1, r1
    18c4:	2f 93       	push	r18
    18c6:	3f 93       	push	r19
    18c8:	4f 93       	push	r20
    18ca:	5f 93       	push	r21
    18cc:	6f 93       	push	r22
    18ce:	7f 93       	push	r23
    18d0:	8f 93       	push	r24
    18d2:	9f 93       	push	r25
    18d4:	af 93       	push	r26
    18d6:	bf 93       	push	r27
    18d8:	ef 93       	push	r30
    18da:	ff 93       	push	r31
    18dc:	df 93       	push	r29
    18de:	cf 93       	push	r28
    18e0:	cd b7       	in	r28, 0x3d	; 61
    18e2:	de b7       	in	r29, 0x3e	; 62
	/* Check if Pointer is not a NULL one, to avoid Segmentation fault */
	if(g_callBackPtrTimer0 != NULL_PTR)
    18e4:	80 91 8d 00 	lds	r24, 0x008D
    18e8:	90 91 8e 00 	lds	r25, 0x008E
    18ec:	00 97       	sbiw	r24, 0x00	; 0
    18ee:	29 f0       	breq	.+10     	; 0x18fa <__vector_19+0x40>
	{
		/*
		 * Call the callback function in the application after the compare match has
		 * occurred in TIMER0 (COMPARE MODE)
		 */
		(*g_callBackPtrTimer0)();
    18f0:	e0 91 8d 00 	lds	r30, 0x008D
    18f4:	f0 91 8e 00 	lds	r31, 0x008E
    18f8:	09 95       	icall
	}
}
    18fa:	cf 91       	pop	r28
    18fc:	df 91       	pop	r29
    18fe:	ff 91       	pop	r31
    1900:	ef 91       	pop	r30
    1902:	bf 91       	pop	r27
    1904:	af 91       	pop	r26
    1906:	9f 91       	pop	r25
    1908:	8f 91       	pop	r24
    190a:	7f 91       	pop	r23
    190c:	6f 91       	pop	r22
    190e:	5f 91       	pop	r21
    1910:	4f 91       	pop	r20
    1912:	3f 91       	pop	r19
    1914:	2f 91       	pop	r18
    1916:	0f 90       	pop	r0
    1918:	0f be       	out	0x3f, r0	; 63
    191a:	0f 90       	pop	r0
    191c:	1f 90       	pop	r1
    191e:	18 95       	reti

00001920 <__vector_8>:
/************************************************************************************
 *                                       TIMER1                                     *
 ************************************************************************************/

ISR(TIMER1_OVF_vect)
{
    1920:	1f 92       	push	r1
    1922:	0f 92       	push	r0
    1924:	0f b6       	in	r0, 0x3f	; 63
    1926:	0f 92       	push	r0
    1928:	11 24       	eor	r1, r1
    192a:	2f 93       	push	r18
    192c:	3f 93       	push	r19
    192e:	4f 93       	push	r20
    1930:	5f 93       	push	r21
    1932:	6f 93       	push	r22
    1934:	7f 93       	push	r23
    1936:	8f 93       	push	r24
    1938:	9f 93       	push	r25
    193a:	af 93       	push	r26
    193c:	bf 93       	push	r27
    193e:	ef 93       	push	r30
    1940:	ff 93       	push	r31
    1942:	df 93       	push	r29
    1944:	cf 93       	push	r28
    1946:	cd b7       	in	r28, 0x3d	; 61
    1948:	de b7       	in	r29, 0x3e	; 62
	/* Check if Pointer is not a NULL one, to avoid Segmentation fault */
	if(g_callBackPtrTimer1 != NULL_PTR)
    194a:	80 91 8f 00 	lds	r24, 0x008F
    194e:	90 91 90 00 	lds	r25, 0x0090
    1952:	00 97       	sbiw	r24, 0x00	; 0
    1954:	29 f0       	breq	.+10     	; 0x1960 <__vector_8+0x40>
	{
		/*
		 * Call the callback function in the application after the overflow has
		 * occurred in TIMER1 (NORMAL MODE)
		 */
		(*g_callBackPtrTimer1)();
    1956:	e0 91 8f 00 	lds	r30, 0x008F
    195a:	f0 91 90 00 	lds	r31, 0x0090
    195e:	09 95       	icall
	}
}
    1960:	cf 91       	pop	r28
    1962:	df 91       	pop	r29
    1964:	ff 91       	pop	r31
    1966:	ef 91       	pop	r30
    1968:	bf 91       	pop	r27
    196a:	af 91       	pop	r26
    196c:	9f 91       	pop	r25
    196e:	8f 91       	pop	r24
    1970:	7f 91       	pop	r23
    1972:	6f 91       	pop	r22
    1974:	5f 91       	pop	r21
    1976:	4f 91       	pop	r20
    1978:	3f 91       	pop	r19
    197a:	2f 91       	pop	r18
    197c:	0f 90       	pop	r0
    197e:	0f be       	out	0x3f, r0	; 63
    1980:	0f 90       	pop	r0
    1982:	1f 90       	pop	r1
    1984:	18 95       	reti

00001986 <__vector_6>:

ISR(TIMER1_COMPA_vect)
{
    1986:	1f 92       	push	r1
    1988:	0f 92       	push	r0
    198a:	0f b6       	in	r0, 0x3f	; 63
    198c:	0f 92       	push	r0
    198e:	11 24       	eor	r1, r1
    1990:	2f 93       	push	r18
    1992:	3f 93       	push	r19
    1994:	4f 93       	push	r20
    1996:	5f 93       	push	r21
    1998:	6f 93       	push	r22
    199a:	7f 93       	push	r23
    199c:	8f 93       	push	r24
    199e:	9f 93       	push	r25
    19a0:	af 93       	push	r26
    19a2:	bf 93       	push	r27
    19a4:	ef 93       	push	r30
    19a6:	ff 93       	push	r31
    19a8:	df 93       	push	r29
    19aa:	cf 93       	push	r28
    19ac:	cd b7       	in	r28, 0x3d	; 61
    19ae:	de b7       	in	r29, 0x3e	; 62
	/* Check if Pointer is not a NULL one, to avoid Segmentation fault */
	if(g_callBackPtrTimer1 != NULL_PTR)
    19b0:	80 91 8f 00 	lds	r24, 0x008F
    19b4:	90 91 90 00 	lds	r25, 0x0090
    19b8:	00 97       	sbiw	r24, 0x00	; 0
    19ba:	29 f0       	breq	.+10     	; 0x19c6 <__vector_6+0x40>
	{
		/*
		 * Call the callback function in the application after the compare match has
		 * occurred in TIMER1 Channel A (COMPARE MODE)
		 */
		(*g_callBackPtrTimer1)();
    19bc:	e0 91 8f 00 	lds	r30, 0x008F
    19c0:	f0 91 90 00 	lds	r31, 0x0090
    19c4:	09 95       	icall
	}
}
    19c6:	cf 91       	pop	r28
    19c8:	df 91       	pop	r29
    19ca:	ff 91       	pop	r31
    19cc:	ef 91       	pop	r30
    19ce:	bf 91       	pop	r27
    19d0:	af 91       	pop	r26
    19d2:	9f 91       	pop	r25
    19d4:	8f 91       	pop	r24
    19d6:	7f 91       	pop	r23
    19d8:	6f 91       	pop	r22
    19da:	5f 91       	pop	r21
    19dc:	4f 91       	pop	r20
    19de:	3f 91       	pop	r19
    19e0:	2f 91       	pop	r18
    19e2:	0f 90       	pop	r0
    19e4:	0f be       	out	0x3f, r0	; 63
    19e6:	0f 90       	pop	r0
    19e8:	1f 90       	pop	r1
    19ea:	18 95       	reti

000019ec <__vector_4>:
/************************************************************************************
 *                                       TIMER2                                     *
 ************************************************************************************/

ISR(TIMER2_OVF_vect)
{
    19ec:	1f 92       	push	r1
    19ee:	0f 92       	push	r0
    19f0:	0f b6       	in	r0, 0x3f	; 63
    19f2:	0f 92       	push	r0
    19f4:	11 24       	eor	r1, r1
    19f6:	2f 93       	push	r18
    19f8:	3f 93       	push	r19
    19fa:	4f 93       	push	r20
    19fc:	5f 93       	push	r21
    19fe:	6f 93       	push	r22
    1a00:	7f 93       	push	r23
    1a02:	8f 93       	push	r24
    1a04:	9f 93       	push	r25
    1a06:	af 93       	push	r26
    1a08:	bf 93       	push	r27
    1a0a:	ef 93       	push	r30
    1a0c:	ff 93       	push	r31
    1a0e:	df 93       	push	r29
    1a10:	cf 93       	push	r28
    1a12:	cd b7       	in	r28, 0x3d	; 61
    1a14:	de b7       	in	r29, 0x3e	; 62
	/* Check if Pointer is not a NULL one, to avoid Segmentation fault */
	if(g_callBackPtrTimer2 != NULL_PTR)
    1a16:	80 91 91 00 	lds	r24, 0x0091
    1a1a:	90 91 92 00 	lds	r25, 0x0092
    1a1e:	00 97       	sbiw	r24, 0x00	; 0
    1a20:	29 f0       	breq	.+10     	; 0x1a2c <__vector_4+0x40>
	{
		/*
		 * Call the callback function in the application after the overflow has
		 * occurred in TIMER2 (NORMAL MODE)
		 */
		(*g_callBackPtrTimer2)();
    1a22:	e0 91 91 00 	lds	r30, 0x0091
    1a26:	f0 91 92 00 	lds	r31, 0x0092
    1a2a:	09 95       	icall
	}
}
    1a2c:	cf 91       	pop	r28
    1a2e:	df 91       	pop	r29
    1a30:	ff 91       	pop	r31
    1a32:	ef 91       	pop	r30
    1a34:	bf 91       	pop	r27
    1a36:	af 91       	pop	r26
    1a38:	9f 91       	pop	r25
    1a3a:	8f 91       	pop	r24
    1a3c:	7f 91       	pop	r23
    1a3e:	6f 91       	pop	r22
    1a40:	5f 91       	pop	r21
    1a42:	4f 91       	pop	r20
    1a44:	3f 91       	pop	r19
    1a46:	2f 91       	pop	r18
    1a48:	0f 90       	pop	r0
    1a4a:	0f be       	out	0x3f, r0	; 63
    1a4c:	0f 90       	pop	r0
    1a4e:	1f 90       	pop	r1
    1a50:	18 95       	reti

00001a52 <__vector_3>:

ISR(TIMER2_COMP_vect)
{
    1a52:	1f 92       	push	r1
    1a54:	0f 92       	push	r0
    1a56:	0f b6       	in	r0, 0x3f	; 63
    1a58:	0f 92       	push	r0
    1a5a:	11 24       	eor	r1, r1
    1a5c:	2f 93       	push	r18
    1a5e:	3f 93       	push	r19
    1a60:	4f 93       	push	r20
    1a62:	5f 93       	push	r21
    1a64:	6f 93       	push	r22
    1a66:	7f 93       	push	r23
    1a68:	8f 93       	push	r24
    1a6a:	9f 93       	push	r25
    1a6c:	af 93       	push	r26
    1a6e:	bf 93       	push	r27
    1a70:	ef 93       	push	r30
    1a72:	ff 93       	push	r31
    1a74:	df 93       	push	r29
    1a76:	cf 93       	push	r28
    1a78:	cd b7       	in	r28, 0x3d	; 61
    1a7a:	de b7       	in	r29, 0x3e	; 62
	/* Check if Pointer is not a NULL one, to avoid Segmentation fault */
	if(g_callBackPtrTimer2 != NULL_PTR)
    1a7c:	80 91 91 00 	lds	r24, 0x0091
    1a80:	90 91 92 00 	lds	r25, 0x0092
    1a84:	00 97       	sbiw	r24, 0x00	; 0
    1a86:	29 f0       	breq	.+10     	; 0x1a92 <__vector_3+0x40>
	{
		/*
		 * Call the callback function in the application after the compare match has
		 * occurred in TIMER2 (COMPARE MODE)
		 */
		(*g_callBackPtrTimer2)();
    1a88:	e0 91 91 00 	lds	r30, 0x0091
    1a8c:	f0 91 92 00 	lds	r31, 0x0092
    1a90:	09 95       	icall
	}
}
    1a92:	cf 91       	pop	r28
    1a94:	df 91       	pop	r29
    1a96:	ff 91       	pop	r31
    1a98:	ef 91       	pop	r30
    1a9a:	bf 91       	pop	r27
    1a9c:	af 91       	pop	r26
    1a9e:	9f 91       	pop	r25
    1aa0:	8f 91       	pop	r24
    1aa2:	7f 91       	pop	r23
    1aa4:	6f 91       	pop	r22
    1aa6:	5f 91       	pop	r21
    1aa8:	4f 91       	pop	r20
    1aaa:	3f 91       	pop	r19
    1aac:	2f 91       	pop	r18
    1aae:	0f 90       	pop	r0
    1ab0:	0f be       	out	0x3f, r0	; 63
    1ab2:	0f 90       	pop	r0
    1ab4:	1f 90       	pop	r1
    1ab6:	18 95       	reti

00001ab8 <TIMER_init>:
 * [in/out]		 	None
 *
 * [Returns]:       None
 *************************************************************************************/
void TIMER_init(const TIMER_ConfigType * Config_Ptr)
{
    1ab8:	df 93       	push	r29
    1aba:	cf 93       	push	r28
    1abc:	cd b7       	in	r28, 0x3d	; 61
    1abe:	de b7       	in	r29, 0x3e	; 62
    1ac0:	2a 97       	sbiw	r28, 0x0a	; 10
    1ac2:	0f b6       	in	r0, 0x3f	; 63
    1ac4:	f8 94       	cli
    1ac6:	de bf       	out	0x3e, r29	; 62
    1ac8:	0f be       	out	0x3f, r0	; 63
    1aca:	cd bf       	out	0x3d, r28	; 61
    1acc:	9a 83       	std	Y+2, r25	; 0x02
    1ace:	89 83       	std	Y+1, r24	; 0x01
	switch(Config_Ptr -> timer_ID)
    1ad0:	e9 81       	ldd	r30, Y+1	; 0x01
    1ad2:	fa 81       	ldd	r31, Y+2	; 0x02
    1ad4:	84 81       	ldd	r24, Z+4	; 0x04
    1ad6:	28 2f       	mov	r18, r24
    1ad8:	30 e0       	ldi	r19, 0x00	; 0
    1ada:	3a 87       	std	Y+10, r19	; 0x0a
    1adc:	29 87       	std	Y+9, r18	; 0x09
    1ade:	89 85       	ldd	r24, Y+9	; 0x09
    1ae0:	9a 85       	ldd	r25, Y+10	; 0x0a
    1ae2:	81 30       	cpi	r24, 0x01	; 1
    1ae4:	91 05       	cpc	r25, r1
    1ae6:	09 f4       	brne	.+2      	; 0x1aea <TIMER_init+0x32>
    1ae8:	63 c0       	rjmp	.+198    	; 0x1bb0 <TIMER_init+0xf8>
    1aea:	29 85       	ldd	r18, Y+9	; 0x09
    1aec:	3a 85       	ldd	r19, Y+10	; 0x0a
    1aee:	22 30       	cpi	r18, 0x02	; 2
    1af0:	31 05       	cpc	r19, r1
    1af2:	09 f4       	brne	.+2      	; 0x1af6 <TIMER_init+0x3e>
    1af4:	c5 c0       	rjmp	.+394    	; 0x1c80 <TIMER_init+0x1c8>
    1af6:	89 85       	ldd	r24, Y+9	; 0x09
    1af8:	9a 85       	ldd	r25, Y+10	; 0x0a
    1afa:	00 97       	sbiw	r24, 0x00	; 0
    1afc:	09 f0       	breq	.+2      	; 0x1b00 <TIMER_init+0x48>
    1afe:	17 c1       	rjmp	.+558    	; 0x1d2e <TIMER_init+0x276>

		/*
		 * Clear All timer register before doing any operation,
		 * to ensure that timer will work correctly
		 */
		TCNT0 = 0x00;
    1b00:	e2 e5       	ldi	r30, 0x52	; 82
    1b02:	f0 e0       	ldi	r31, 0x00	; 0
    1b04:	10 82       	st	Z, r1
		TCCR0 = 0x00;
    1b06:	e3 e5       	ldi	r30, 0x53	; 83
    1b08:	f0 e0       	ldi	r31, 0x00	; 0
    1b0a:	10 82       	st	Z, r1
		OCR0  = 0x00;
    1b0c:	ec e5       	ldi	r30, 0x5C	; 92
    1b0e:	f0 e0       	ldi	r31, 0x00	; 0
    1b10:	10 82       	st	Z, r1
		/*
		 * Insert the required initial value in the TCNT0 register
		 * TIMER0 is (8-bit), so mask the initial value with 0xFF to ensure that it
		 * does not exceed 255
		 */
		TCNT0 = ( (Config_Ptr -> intialValue) & 0xFF);
    1b12:	a2 e5       	ldi	r26, 0x52	; 82
    1b14:	b0 e0       	ldi	r27, 0x00	; 0
    1b16:	e9 81       	ldd	r30, Y+1	; 0x01
    1b18:	fa 81       	ldd	r31, Y+2	; 0x02
    1b1a:	80 81       	ld	r24, Z
    1b1c:	91 81       	ldd	r25, Z+1	; 0x01
    1b1e:	8c 93       	st	X, r24

		switch(Config_Ptr -> timer_Mode)
    1b20:	e9 81       	ldd	r30, Y+1	; 0x01
    1b22:	fa 81       	ldd	r31, Y+2	; 0x02
    1b24:	85 81       	ldd	r24, Z+5	; 0x05
    1b26:	28 2f       	mov	r18, r24
    1b28:	30 e0       	ldi	r19, 0x00	; 0
    1b2a:	38 87       	std	Y+8, r19	; 0x08
    1b2c:	2f 83       	std	Y+7, r18	; 0x07
    1b2e:	8f 81       	ldd	r24, Y+7	; 0x07
    1b30:	98 85       	ldd	r25, Y+8	; 0x08
    1b32:	00 97       	sbiw	r24, 0x00	; 0
    1b34:	31 f0       	breq	.+12     	; 0x1b42 <TIMER_init+0x8a>
    1b36:	2f 81       	ldd	r18, Y+7	; 0x07
    1b38:	38 85       	ldd	r19, Y+8	; 0x08
    1b3a:	21 30       	cpi	r18, 0x01	; 1
    1b3c:	31 05       	cpc	r19, r1
    1b3e:	c9 f0       	breq	.+50     	; 0x1b72 <TIMER_init+0xba>
    1b40:	f6 c0       	rjmp	.+492    	; 0x1d2e <TIMER_init+0x276>
		 * 	  in TCCR0 register
		 * 	- Enable TIMER0 Overflow Interrupt (TOIE0) bit in TIMSK register
		 */
		case NORMAL:

			TCCR0  = (1 << FOC0);
    1b42:	e3 e5       	ldi	r30, 0x53	; 83
    1b44:	f0 e0       	ldi	r31, 0x00	; 0
    1b46:	80 e8       	ldi	r24, 0x80	; 128
    1b48:	80 83       	st	Z, r24
			TCCR0  = (TCCR0 & 0xF8) | (Config_Ptr -> timer_Clock);
    1b4a:	a3 e5       	ldi	r26, 0x53	; 83
    1b4c:	b0 e0       	ldi	r27, 0x00	; 0
    1b4e:	e3 e5       	ldi	r30, 0x53	; 83
    1b50:	f0 e0       	ldi	r31, 0x00	; 0
    1b52:	80 81       	ld	r24, Z
    1b54:	98 2f       	mov	r25, r24
    1b56:	98 7f       	andi	r25, 0xF8	; 248
    1b58:	e9 81       	ldd	r30, Y+1	; 0x01
    1b5a:	fa 81       	ldd	r31, Y+2	; 0x02
    1b5c:	86 81       	ldd	r24, Z+6	; 0x06
    1b5e:	89 2b       	or	r24, r25
    1b60:	8c 93       	st	X, r24
			TIMSK |= (1 << TOIE0);
    1b62:	a9 e5       	ldi	r26, 0x59	; 89
    1b64:	b0 e0       	ldi	r27, 0x00	; 0
    1b66:	e9 e5       	ldi	r30, 0x59	; 89
    1b68:	f0 e0       	ldi	r31, 0x00	; 0
    1b6a:	80 81       	ld	r24, Z
    1b6c:	81 60       	ori	r24, 0x01	; 1
    1b6e:	8c 93       	st	X, r24
    1b70:	de c0       	rjmp	.+444    	; 0x1d2e <TIMER_init+0x276>
		 * 	  in TCCR0 register
		 * 	- Enable TIMER0 Compare Match Interrupt (OCIE0) bit in TIMSK register
		 */
		case COMPARE:

			OCR0   = ( (Config_Ptr -> compareValue) & 0xFF);
    1b72:	ac e5       	ldi	r26, 0x5C	; 92
    1b74:	b0 e0       	ldi	r27, 0x00	; 0
    1b76:	e9 81       	ldd	r30, Y+1	; 0x01
    1b78:	fa 81       	ldd	r31, Y+2	; 0x02
    1b7a:	82 81       	ldd	r24, Z+2	; 0x02
    1b7c:	93 81       	ldd	r25, Z+3	; 0x03
    1b7e:	8c 93       	st	X, r24
			TCCR0  = (1 << FOC0) | (1 << WGM01);
    1b80:	e3 e5       	ldi	r30, 0x53	; 83
    1b82:	f0 e0       	ldi	r31, 0x00	; 0
    1b84:	88 e8       	ldi	r24, 0x88	; 136
    1b86:	80 83       	st	Z, r24
			TCCR0  = (TCCR0 & 0xF8) | (Config_Ptr -> timer_Clock);
    1b88:	a3 e5       	ldi	r26, 0x53	; 83
    1b8a:	b0 e0       	ldi	r27, 0x00	; 0
    1b8c:	e3 e5       	ldi	r30, 0x53	; 83
    1b8e:	f0 e0       	ldi	r31, 0x00	; 0
    1b90:	80 81       	ld	r24, Z
    1b92:	98 2f       	mov	r25, r24
    1b94:	98 7f       	andi	r25, 0xF8	; 248
    1b96:	e9 81       	ldd	r30, Y+1	; 0x01
    1b98:	fa 81       	ldd	r31, Y+2	; 0x02
    1b9a:	86 81       	ldd	r24, Z+6	; 0x06
    1b9c:	89 2b       	or	r24, r25
    1b9e:	8c 93       	st	X, r24
			TIMSK |= (1 << OCIE0);
    1ba0:	a9 e5       	ldi	r26, 0x59	; 89
    1ba2:	b0 e0       	ldi	r27, 0x00	; 0
    1ba4:	e9 e5       	ldi	r30, 0x59	; 89
    1ba6:	f0 e0       	ldi	r31, 0x00	; 0
    1ba8:	80 81       	ld	r24, Z
    1baa:	82 60       	ori	r24, 0x02	; 2
    1bac:	8c 93       	st	X, r24
    1bae:	bf c0       	rjmp	.+382    	; 0x1d2e <TIMER_init+0x276>

		/*
		 * Clear All timer register before doing any operation,
		 * to ensure that timer will work correctly
		 */
		TCNT1  = 0x0000;
    1bb0:	ec e4       	ldi	r30, 0x4C	; 76
    1bb2:	f0 e0       	ldi	r31, 0x00	; 0
    1bb4:	11 82       	std	Z+1, r1	; 0x01
    1bb6:	10 82       	st	Z, r1
		OCR1A  = 0x0000;
    1bb8:	ea e4       	ldi	r30, 0x4A	; 74
    1bba:	f0 e0       	ldi	r31, 0x00	; 0
    1bbc:	11 82       	std	Z+1, r1	; 0x01
    1bbe:	10 82       	st	Z, r1
		TCCR1A = 0x00;
    1bc0:	ef e4       	ldi	r30, 0x4F	; 79
    1bc2:	f0 e0       	ldi	r31, 0x00	; 0
    1bc4:	10 82       	st	Z, r1
		TCCR1B = 0x00;
    1bc6:	ee e4       	ldi	r30, 0x4E	; 78
    1bc8:	f0 e0       	ldi	r31, 0x00	; 0
    1bca:	10 82       	st	Z, r1
		/*
		 * Insert the required initial value in the TCNT1 register
		 * TIMER1 is (16-bit), so mask the initial value with 0xFFFF to ensure that it
		 * does not exceed 65535
		 */
		TCNT1 = ( (Config_Ptr -> intialValue) & 0xFFFF);
    1bcc:	ac e4       	ldi	r26, 0x4C	; 76
    1bce:	b0 e0       	ldi	r27, 0x00	; 0
    1bd0:	e9 81       	ldd	r30, Y+1	; 0x01
    1bd2:	fa 81       	ldd	r31, Y+2	; 0x02
    1bd4:	80 81       	ld	r24, Z
    1bd6:	91 81       	ldd	r25, Z+1	; 0x01
    1bd8:	11 96       	adiw	r26, 0x01	; 1
    1bda:	9c 93       	st	X, r25
    1bdc:	8e 93       	st	-X, r24

		switch(Config_Ptr -> timer_Mode)
    1bde:	e9 81       	ldd	r30, Y+1	; 0x01
    1be0:	fa 81       	ldd	r31, Y+2	; 0x02
    1be2:	85 81       	ldd	r24, Z+5	; 0x05
    1be4:	28 2f       	mov	r18, r24
    1be6:	30 e0       	ldi	r19, 0x00	; 0
    1be8:	3e 83       	std	Y+6, r19	; 0x06
    1bea:	2d 83       	std	Y+5, r18	; 0x05
    1bec:	8d 81       	ldd	r24, Y+5	; 0x05
    1bee:	9e 81       	ldd	r25, Y+6	; 0x06
    1bf0:	00 97       	sbiw	r24, 0x00	; 0
    1bf2:	31 f0       	breq	.+12     	; 0x1c00 <TIMER_init+0x148>
    1bf4:	2d 81       	ldd	r18, Y+5	; 0x05
    1bf6:	3e 81       	ldd	r19, Y+6	; 0x06
    1bf8:	21 30       	cpi	r18, 0x01	; 1
    1bfa:	31 05       	cpc	r19, r1
    1bfc:	c9 f0       	breq	.+50     	; 0x1c30 <TIMER_init+0x178>
    1bfe:	97 c0       	rjmp	.+302    	; 0x1d2e <TIMER_init+0x276>
		 * 	  in TCCR1B register
		 * 	- Enable TIMER1 Overflow Interrupt (TOIE1) bit in TIMSK register
		 */
		case NORMAL:

			TCCR1A = (1 << FOC1A)  | (1 << FOC1B);
    1c00:	ef e4       	ldi	r30, 0x4F	; 79
    1c02:	f0 e0       	ldi	r31, 0x00	; 0
    1c04:	8c e0       	ldi	r24, 0x0C	; 12
    1c06:	80 83       	st	Z, r24
			TCCR1B  = (TCCR1B & 0xF8) | (Config_Ptr -> timer_Clock);
    1c08:	ae e4       	ldi	r26, 0x4E	; 78
    1c0a:	b0 e0       	ldi	r27, 0x00	; 0
    1c0c:	ee e4       	ldi	r30, 0x4E	; 78
    1c0e:	f0 e0       	ldi	r31, 0x00	; 0
    1c10:	80 81       	ld	r24, Z
    1c12:	98 2f       	mov	r25, r24
    1c14:	98 7f       	andi	r25, 0xF8	; 248
    1c16:	e9 81       	ldd	r30, Y+1	; 0x01
    1c18:	fa 81       	ldd	r31, Y+2	; 0x02
    1c1a:	86 81       	ldd	r24, Z+6	; 0x06
    1c1c:	89 2b       	or	r24, r25
    1c1e:	8c 93       	st	X, r24
			TIMSK |= (1 << TOIE1);
    1c20:	a9 e5       	ldi	r26, 0x59	; 89
    1c22:	b0 e0       	ldi	r27, 0x00	; 0
    1c24:	e9 e5       	ldi	r30, 0x59	; 89
    1c26:	f0 e0       	ldi	r31, 0x00	; 0
    1c28:	80 81       	ld	r24, Z
    1c2a:	84 60       	ori	r24, 0x04	; 4
    1c2c:	8c 93       	st	X, r24
    1c2e:	7f c0       	rjmp	.+254    	; 0x1d2e <TIMER_init+0x276>
		 * 	  in TCCR1B register
		 * 	- Enable TIMER2 Compare Match Interrupt (OCIE1A) bit in TIMSK register
		 */
		case COMPARE:

			OCR1A   = ( (Config_Ptr -> compareValue) & 0xFFFF);
    1c30:	aa e4       	ldi	r26, 0x4A	; 74
    1c32:	b0 e0       	ldi	r27, 0x00	; 0
    1c34:	e9 81       	ldd	r30, Y+1	; 0x01
    1c36:	fa 81       	ldd	r31, Y+2	; 0x02
    1c38:	82 81       	ldd	r24, Z+2	; 0x02
    1c3a:	93 81       	ldd	r25, Z+3	; 0x03
    1c3c:	11 96       	adiw	r26, 0x01	; 1
    1c3e:	9c 93       	st	X, r25
    1c40:	8e 93       	st	-X, r24
			TCCR1A  = (1 << FOC1A) | (1 << FOC1B);
    1c42:	ef e4       	ldi	r30, 0x4F	; 79
    1c44:	f0 e0       	ldi	r31, 0x00	; 0
    1c46:	8c e0       	ldi	r24, 0x0C	; 12
    1c48:	80 83       	st	Z, r24
			TCCR1B |= (1 << WGM12);
    1c4a:	ae e4       	ldi	r26, 0x4E	; 78
    1c4c:	b0 e0       	ldi	r27, 0x00	; 0
    1c4e:	ee e4       	ldi	r30, 0x4E	; 78
    1c50:	f0 e0       	ldi	r31, 0x00	; 0
    1c52:	80 81       	ld	r24, Z
    1c54:	88 60       	ori	r24, 0x08	; 8
    1c56:	8c 93       	st	X, r24
			TCCR1B  = (TCCR1B & 0xF8) | (Config_Ptr -> timer_Clock);
    1c58:	ae e4       	ldi	r26, 0x4E	; 78
    1c5a:	b0 e0       	ldi	r27, 0x00	; 0
    1c5c:	ee e4       	ldi	r30, 0x4E	; 78
    1c5e:	f0 e0       	ldi	r31, 0x00	; 0
    1c60:	80 81       	ld	r24, Z
    1c62:	98 2f       	mov	r25, r24
    1c64:	98 7f       	andi	r25, 0xF8	; 248
    1c66:	e9 81       	ldd	r30, Y+1	; 0x01
    1c68:	fa 81       	ldd	r31, Y+2	; 0x02
    1c6a:	86 81       	ldd	r24, Z+6	; 0x06
    1c6c:	89 2b       	or	r24, r25
    1c6e:	8c 93       	st	X, r24
			TIMSK  |= (1 << OCIE1A);
    1c70:	a9 e5       	ldi	r26, 0x59	; 89
    1c72:	b0 e0       	ldi	r27, 0x00	; 0
    1c74:	e9 e5       	ldi	r30, 0x59	; 89
    1c76:	f0 e0       	ldi	r31, 0x00	; 0
    1c78:	80 81       	ld	r24, Z
    1c7a:	80 61       	ori	r24, 0x10	; 16
    1c7c:	8c 93       	st	X, r24
    1c7e:	57 c0       	rjmp	.+174    	; 0x1d2e <TIMER_init+0x276>

		/*
		 * Clear All timer register before doing any operation,
		 * to ensure that timer will work correctly
		 */
		TCNT2 = 0x00;
    1c80:	e4 e4       	ldi	r30, 0x44	; 68
    1c82:	f0 e0       	ldi	r31, 0x00	; 0
    1c84:	10 82       	st	Z, r1
		TCCR2 = 0x00;
    1c86:	e5 e4       	ldi	r30, 0x45	; 69
    1c88:	f0 e0       	ldi	r31, 0x00	; 0
    1c8a:	10 82       	st	Z, r1
		OCR2  = 0x00;
    1c8c:	e3 e4       	ldi	r30, 0x43	; 67
    1c8e:	f0 e0       	ldi	r31, 0x00	; 0
    1c90:	10 82       	st	Z, r1
		/*
		 * Insert the required initial value in the TCNT2 register
		 * TIMER2 is (8-bit), so mask the initial value with 0xFF to ensure that it
	     * does not exceed 255
		 */
		TCNT2 = ( (Config_Ptr -> intialValue) & 0xFF);
    1c92:	a4 e4       	ldi	r26, 0x44	; 68
    1c94:	b0 e0       	ldi	r27, 0x00	; 0
    1c96:	e9 81       	ldd	r30, Y+1	; 0x01
    1c98:	fa 81       	ldd	r31, Y+2	; 0x02
    1c9a:	80 81       	ld	r24, Z
    1c9c:	91 81       	ldd	r25, Z+1	; 0x01
    1c9e:	8c 93       	st	X, r24

		switch(Config_Ptr -> timer_Mode)
    1ca0:	e9 81       	ldd	r30, Y+1	; 0x01
    1ca2:	fa 81       	ldd	r31, Y+2	; 0x02
    1ca4:	85 81       	ldd	r24, Z+5	; 0x05
    1ca6:	28 2f       	mov	r18, r24
    1ca8:	30 e0       	ldi	r19, 0x00	; 0
    1caa:	3c 83       	std	Y+4, r19	; 0x04
    1cac:	2b 83       	std	Y+3, r18	; 0x03
    1cae:	8b 81       	ldd	r24, Y+3	; 0x03
    1cb0:	9c 81       	ldd	r25, Y+4	; 0x04
    1cb2:	00 97       	sbiw	r24, 0x00	; 0
    1cb4:	31 f0       	breq	.+12     	; 0x1cc2 <TIMER_init+0x20a>
    1cb6:	2b 81       	ldd	r18, Y+3	; 0x03
    1cb8:	3c 81       	ldd	r19, Y+4	; 0x04
    1cba:	21 30       	cpi	r18, 0x01	; 1
    1cbc:	31 05       	cpc	r19, r1
    1cbe:	c9 f0       	breq	.+50     	; 0x1cf2 <TIMER_init+0x23a>
    1cc0:	36 c0       	rjmp	.+108    	; 0x1d2e <TIMER_init+0x276>
		 * 	  in TCCR2 register
		 * 	- Enable TIMER2 Overflow Interrupt (TOIE2) bit in TIMSK register
		 */
		case NORMAL:

			TCCR2  = (1 << FOC2);
    1cc2:	e5 e4       	ldi	r30, 0x45	; 69
    1cc4:	f0 e0       	ldi	r31, 0x00	; 0
    1cc6:	80 e8       	ldi	r24, 0x80	; 128
    1cc8:	80 83       	st	Z, r24
			TCCR2  = (TCCR2 & 0xF8) | (Config_Ptr -> timer_Clock);
    1cca:	a5 e4       	ldi	r26, 0x45	; 69
    1ccc:	b0 e0       	ldi	r27, 0x00	; 0
    1cce:	e5 e4       	ldi	r30, 0x45	; 69
    1cd0:	f0 e0       	ldi	r31, 0x00	; 0
    1cd2:	80 81       	ld	r24, Z
    1cd4:	98 2f       	mov	r25, r24
    1cd6:	98 7f       	andi	r25, 0xF8	; 248
    1cd8:	e9 81       	ldd	r30, Y+1	; 0x01
    1cda:	fa 81       	ldd	r31, Y+2	; 0x02
    1cdc:	86 81       	ldd	r24, Z+6	; 0x06
    1cde:	89 2b       	or	r24, r25
    1ce0:	8c 93       	st	X, r24
			TIMSK |= (1 << TOIE2);
    1ce2:	a9 e5       	ldi	r26, 0x59	; 89
    1ce4:	b0 e0       	ldi	r27, 0x00	; 0
    1ce6:	e9 e5       	ldi	r30, 0x59	; 89
    1ce8:	f0 e0       	ldi	r31, 0x00	; 0
    1cea:	80 81       	ld	r24, Z
    1cec:	80 64       	ori	r24, 0x40	; 64
    1cee:	8c 93       	st	X, r24
    1cf0:	1e c0       	rjmp	.+60     	; 0x1d2e <TIMER_init+0x276>
		 * 	  in TCCR2 register
		 * 	- Enable TIMER2 Compare Match Interrupt (OCIE2) bit in TIMSK register
		 */
		case COMPARE:

			OCR2   = ( (Config_Ptr -> compareValue) & 0xFF);
    1cf2:	a3 e4       	ldi	r26, 0x43	; 67
    1cf4:	b0 e0       	ldi	r27, 0x00	; 0
    1cf6:	e9 81       	ldd	r30, Y+1	; 0x01
    1cf8:	fa 81       	ldd	r31, Y+2	; 0x02
    1cfa:	82 81       	ldd	r24, Z+2	; 0x02
    1cfc:	93 81       	ldd	r25, Z+3	; 0x03
    1cfe:	8c 93       	st	X, r24
			TCCR2  = (1 << FOC2) | (1 << WGM21);
    1d00:	e5 e4       	ldi	r30, 0x45	; 69
    1d02:	f0 e0       	ldi	r31, 0x00	; 0
    1d04:	88 e8       	ldi	r24, 0x88	; 136
    1d06:	80 83       	st	Z, r24
			TCCR2  = (TCCR2 & 0xF8) | (Config_Ptr -> timer_Clock);
    1d08:	a5 e4       	ldi	r26, 0x45	; 69
    1d0a:	b0 e0       	ldi	r27, 0x00	; 0
    1d0c:	e5 e4       	ldi	r30, 0x45	; 69
    1d0e:	f0 e0       	ldi	r31, 0x00	; 0
    1d10:	80 81       	ld	r24, Z
    1d12:	98 2f       	mov	r25, r24
    1d14:	98 7f       	andi	r25, 0xF8	; 248
    1d16:	e9 81       	ldd	r30, Y+1	; 0x01
    1d18:	fa 81       	ldd	r31, Y+2	; 0x02
    1d1a:	86 81       	ldd	r24, Z+6	; 0x06
    1d1c:	89 2b       	or	r24, r25
    1d1e:	8c 93       	st	X, r24
			TIMSK |= (1 << OCIE2);
    1d20:	a9 e5       	ldi	r26, 0x59	; 89
    1d22:	b0 e0       	ldi	r27, 0x00	; 0
    1d24:	e9 e5       	ldi	r30, 0x59	; 89
    1d26:	f0 e0       	ldi	r31, 0x00	; 0
    1d28:	80 81       	ld	r24, Z
    1d2a:	80 68       	ori	r24, 0x80	; 128
    1d2c:	8c 93       	st	X, r24
			break;

		}	/* END CASE OF TIMER2 */
		break;
	}
}
    1d2e:	2a 96       	adiw	r28, 0x0a	; 10
    1d30:	0f b6       	in	r0, 0x3f	; 63
    1d32:	f8 94       	cli
    1d34:	de bf       	out	0x3e, r29	; 62
    1d36:	0f be       	out	0x3f, r0	; 63
    1d38:	cd bf       	out	0x3d, r28	; 61
    1d3a:	cf 91       	pop	r28
    1d3c:	df 91       	pop	r29
    1d3e:	08 95       	ret

00001d40 <TIMER_setCallBack>:
 * [in/out]		 	None
 *
 * [Returns]:       None
 *************************************************************************************/
void TIMER_setCallBack(void(*a_ptr)(void), const TIMER_ID a_timerID)
{
    1d40:	df 93       	push	r29
    1d42:	cf 93       	push	r28
    1d44:	00 d0       	rcall	.+0      	; 0x1d46 <TIMER_setCallBack+0x6>
    1d46:	00 d0       	rcall	.+0      	; 0x1d48 <TIMER_setCallBack+0x8>
    1d48:	0f 92       	push	r0
    1d4a:	cd b7       	in	r28, 0x3d	; 61
    1d4c:	de b7       	in	r29, 0x3e	; 62
    1d4e:	9a 83       	std	Y+2, r25	; 0x02
    1d50:	89 83       	std	Y+1, r24	; 0x01
    1d52:	6b 83       	std	Y+3, r22	; 0x03
	switch(a_timerID)
    1d54:	8b 81       	ldd	r24, Y+3	; 0x03
    1d56:	28 2f       	mov	r18, r24
    1d58:	30 e0       	ldi	r19, 0x00	; 0
    1d5a:	3d 83       	std	Y+5, r19	; 0x05
    1d5c:	2c 83       	std	Y+4, r18	; 0x04
    1d5e:	8c 81       	ldd	r24, Y+4	; 0x04
    1d60:	9d 81       	ldd	r25, Y+5	; 0x05
    1d62:	81 30       	cpi	r24, 0x01	; 1
    1d64:	91 05       	cpc	r25, r1
    1d66:	81 f0       	breq	.+32     	; 0x1d88 <TIMER_setCallBack+0x48>
    1d68:	2c 81       	ldd	r18, Y+4	; 0x04
    1d6a:	3d 81       	ldd	r19, Y+5	; 0x05
    1d6c:	22 30       	cpi	r18, 0x02	; 2
    1d6e:	31 05       	cpc	r19, r1
    1d70:	91 f0       	breq	.+36     	; 0x1d96 <TIMER_setCallBack+0x56>
    1d72:	8c 81       	ldd	r24, Y+4	; 0x04
    1d74:	9d 81       	ldd	r25, Y+5	; 0x05
    1d76:	00 97       	sbiw	r24, 0x00	; 0
    1d78:	a1 f4       	brne	.+40     	; 0x1da2 <TIMER_setCallBack+0x62>
	{

	case TIMER_0:

		/* Save the address of the Call back function of TIMER0 in a global variable */
		g_callBackPtrTimer0 = a_ptr;
    1d7a:	89 81       	ldd	r24, Y+1	; 0x01
    1d7c:	9a 81       	ldd	r25, Y+2	; 0x02
    1d7e:	90 93 8e 00 	sts	0x008E, r25
    1d82:	80 93 8d 00 	sts	0x008D, r24
    1d86:	0d c0       	rjmp	.+26     	; 0x1da2 <TIMER_setCallBack+0x62>
		break;

	case TIMER_1:

		/* Save the address of the Call back function of TIMER1 in a global variable */
		g_callBackPtrTimer1 = a_ptr;
    1d88:	89 81       	ldd	r24, Y+1	; 0x01
    1d8a:	9a 81       	ldd	r25, Y+2	; 0x02
    1d8c:	90 93 90 00 	sts	0x0090, r25
    1d90:	80 93 8f 00 	sts	0x008F, r24
    1d94:	06 c0       	rjmp	.+12     	; 0x1da2 <TIMER_setCallBack+0x62>
		break;

	case TIMER_2:

		/* Save the address of the Call back function of TIMER2 in a global variable */
		g_callBackPtrTimer2 = a_ptr;
    1d96:	89 81       	ldd	r24, Y+1	; 0x01
    1d98:	9a 81       	ldd	r25, Y+2	; 0x02
    1d9a:	90 93 92 00 	sts	0x0092, r25
    1d9e:	80 93 91 00 	sts	0x0091, r24
		break;
	}
}
    1da2:	0f 90       	pop	r0
    1da4:	0f 90       	pop	r0
    1da6:	0f 90       	pop	r0
    1da8:	0f 90       	pop	r0
    1daa:	0f 90       	pop	r0
    1dac:	cf 91       	pop	r28
    1dae:	df 91       	pop	r29
    1db0:	08 95       	ret

00001db2 <TIMER_stop>:
 * [in/out]		 	None
 *
 * [Returns]:       None
 *******************************************************************************/
void TIMER_stop(const TIMER_ID a_timerID)
{
    1db2:	df 93       	push	r29
    1db4:	cf 93       	push	r28
    1db6:	00 d0       	rcall	.+0      	; 0x1db8 <TIMER_stop+0x6>
    1db8:	0f 92       	push	r0
    1dba:	cd b7       	in	r28, 0x3d	; 61
    1dbc:	de b7       	in	r29, 0x3e	; 62
    1dbe:	89 83       	std	Y+1, r24	; 0x01
	switch(a_timerID)
    1dc0:	89 81       	ldd	r24, Y+1	; 0x01
    1dc2:	28 2f       	mov	r18, r24
    1dc4:	30 e0       	ldi	r19, 0x00	; 0
    1dc6:	3b 83       	std	Y+3, r19	; 0x03
    1dc8:	2a 83       	std	Y+2, r18	; 0x02
    1dca:	8a 81       	ldd	r24, Y+2	; 0x02
    1dcc:	9b 81       	ldd	r25, Y+3	; 0x03
    1dce:	81 30       	cpi	r24, 0x01	; 1
    1dd0:	91 05       	cpc	r25, r1
    1dd2:	89 f0       	breq	.+34     	; 0x1df6 <TIMER_stop+0x44>
    1dd4:	2a 81       	ldd	r18, Y+2	; 0x02
    1dd6:	3b 81       	ldd	r19, Y+3	; 0x03
    1dd8:	22 30       	cpi	r18, 0x02	; 2
    1dda:	31 05       	cpc	r19, r1
    1ddc:	a1 f0       	breq	.+40     	; 0x1e06 <TIMER_stop+0x54>
    1dde:	8a 81       	ldd	r24, Y+2	; 0x02
    1de0:	9b 81       	ldd	r25, Y+3	; 0x03
    1de2:	00 97       	sbiw	r24, 0x00	; 0
    1de4:	b9 f4       	brne	.+46     	; 0x1e14 <TIMER_stop+0x62>
	{

	case TIMER_0:

		TCCR0  = ( TCCR0 & 0xF8 );	/* Clear Clock bits in TIMER0 */
    1de6:	a3 e5       	ldi	r26, 0x53	; 83
    1de8:	b0 e0       	ldi	r27, 0x00	; 0
    1dea:	e3 e5       	ldi	r30, 0x53	; 83
    1dec:	f0 e0       	ldi	r31, 0x00	; 0
    1dee:	80 81       	ld	r24, Z
    1df0:	88 7f       	andi	r24, 0xF8	; 248
    1df2:	8c 93       	st	X, r24
    1df4:	0f c0       	rjmp	.+30     	; 0x1e14 <TIMER_stop+0x62>
		break;

	case TIMER_1:

		TCCR1B = (TCCR1B & 0xF8);	/* Clear Clock bits in TIMER1 */
    1df6:	ae e4       	ldi	r26, 0x4E	; 78
    1df8:	b0 e0       	ldi	r27, 0x00	; 0
    1dfa:	ee e4       	ldi	r30, 0x4E	; 78
    1dfc:	f0 e0       	ldi	r31, 0x00	; 0
    1dfe:	80 81       	ld	r24, Z
    1e00:	88 7f       	andi	r24, 0xF8	; 248
    1e02:	8c 93       	st	X, r24
    1e04:	07 c0       	rjmp	.+14     	; 0x1e14 <TIMER_stop+0x62>
		break;

	case TIMER_2:

		TCCR2  = ( TCCR2 & 0xF8 );	/* Clear Clock bits in TIMER2 */
    1e06:	a5 e4       	ldi	r26, 0x45	; 69
    1e08:	b0 e0       	ldi	r27, 0x00	; 0
    1e0a:	e5 e4       	ldi	r30, 0x45	; 69
    1e0c:	f0 e0       	ldi	r31, 0x00	; 0
    1e0e:	80 81       	ld	r24, Z
    1e10:	88 7f       	andi	r24, 0xF8	; 248
    1e12:	8c 93       	st	X, r24
		break;
	}
}
    1e14:	0f 90       	pop	r0
    1e16:	0f 90       	pop	r0
    1e18:	0f 90       	pop	r0
    1e1a:	cf 91       	pop	r28
    1e1c:	df 91       	pop	r29
    1e1e:	08 95       	ret

00001e20 <TIMER_DeInit>:
 * [in/out]		 	None
 *
 * [Returns]:       None
 ****************************************************************************************/
void TIMER_DeInit(const TIMER_ID a_timerID)
{
    1e20:	df 93       	push	r29
    1e22:	cf 93       	push	r28
    1e24:	00 d0       	rcall	.+0      	; 0x1e26 <TIMER_DeInit+0x6>
    1e26:	0f 92       	push	r0
    1e28:	cd b7       	in	r28, 0x3d	; 61
    1e2a:	de b7       	in	r29, 0x3e	; 62
    1e2c:	89 83       	std	Y+1, r24	; 0x01
	switch(a_timerID)
    1e2e:	89 81       	ldd	r24, Y+1	; 0x01
    1e30:	28 2f       	mov	r18, r24
    1e32:	30 e0       	ldi	r19, 0x00	; 0
    1e34:	3b 83       	std	Y+3, r19	; 0x03
    1e36:	2a 83       	std	Y+2, r18	; 0x02
    1e38:	8a 81       	ldd	r24, Y+2	; 0x02
    1e3a:	9b 81       	ldd	r25, Y+3	; 0x03
    1e3c:	81 30       	cpi	r24, 0x01	; 1
    1e3e:	91 05       	cpc	r25, r1
    1e40:	11 f1       	breq	.+68     	; 0x1e86 <TIMER_DeInit+0x66>
    1e42:	2a 81       	ldd	r18, Y+2	; 0x02
    1e44:	3b 81       	ldd	r19, Y+3	; 0x03
    1e46:	22 30       	cpi	r18, 0x02	; 2
    1e48:	31 05       	cpc	r19, r1
    1e4a:	d1 f1       	breq	.+116    	; 0x1ec0 <TIMER_DeInit+0xa0>
    1e4c:	8a 81       	ldd	r24, Y+2	; 0x02
    1e4e:	9b 81       	ldd	r25, Y+3	; 0x03
    1e50:	00 97       	sbiw	r24, 0x00	; 0
    1e52:	09 f0       	breq	.+2      	; 0x1e56 <TIMER_DeInit+0x36>
    1e54:	4c c0       	rjmp	.+152    	; 0x1eee <TIMER_DeInit+0xce>
	{

	case TIMER_0:

		/* Clear All TIMER0 Register */
		TCNT0 = 0x00;
    1e56:	e2 e5       	ldi	r30, 0x52	; 82
    1e58:	f0 e0       	ldi	r31, 0x00	; 0
    1e5a:	10 82       	st	Z, r1
		TCCR0 = 0x00;
    1e5c:	e3 e5       	ldi	r30, 0x53	; 83
    1e5e:	f0 e0       	ldi	r31, 0x00	; 0
    1e60:	10 82       	st	Z, r1
		OCR0  = 0x00;
    1e62:	ec e5       	ldi	r30, 0x5C	; 92
    1e64:	f0 e0       	ldi	r31, 0x00	; 0
    1e66:	10 82       	st	Z, r1

		/* Disable TIMER0 Interrupt Enable */
		TIMSK &= ~(1 << TOIE0) & ~(1 << OCIE0);
    1e68:	a9 e5       	ldi	r26, 0x59	; 89
    1e6a:	b0 e0       	ldi	r27, 0x00	; 0
    1e6c:	e9 e5       	ldi	r30, 0x59	; 89
    1e6e:	f0 e0       	ldi	r31, 0x00	; 0
    1e70:	80 81       	ld	r24, Z
    1e72:	8c 7f       	andi	r24, 0xFC	; 252
    1e74:	8c 93       	st	X, r24

		/* Disable TIMER0 Interrupt Flag, by writing a logic one */
		TIFR |= (1 << OCF0) | (1 << TOV0);
    1e76:	a8 e5       	ldi	r26, 0x58	; 88
    1e78:	b0 e0       	ldi	r27, 0x00	; 0
    1e7a:	e8 e5       	ldi	r30, 0x58	; 88
    1e7c:	f0 e0       	ldi	r31, 0x00	; 0
    1e7e:	80 81       	ld	r24, Z
    1e80:	83 60       	ori	r24, 0x03	; 3
    1e82:	8c 93       	st	X, r24
    1e84:	34 c0       	rjmp	.+104    	; 0x1eee <TIMER_DeInit+0xce>
		break;

	case TIMER_1:

		/* Clear All TIMER1 Register */
		TCNT1  = 0x0000;
    1e86:	ec e4       	ldi	r30, 0x4C	; 76
    1e88:	f0 e0       	ldi	r31, 0x00	; 0
    1e8a:	11 82       	std	Z+1, r1	; 0x01
    1e8c:	10 82       	st	Z, r1
		OCR1A  = 0x0000;
    1e8e:	ea e4       	ldi	r30, 0x4A	; 74
    1e90:	f0 e0       	ldi	r31, 0x00	; 0
    1e92:	11 82       	std	Z+1, r1	; 0x01
    1e94:	10 82       	st	Z, r1
		TCCR1A = 0x00;
    1e96:	ef e4       	ldi	r30, 0x4F	; 79
    1e98:	f0 e0       	ldi	r31, 0x00	; 0
    1e9a:	10 82       	st	Z, r1
		TCCR1B = 0x00;
    1e9c:	ee e4       	ldi	r30, 0x4E	; 78
    1e9e:	f0 e0       	ldi	r31, 0x00	; 0
    1ea0:	10 82       	st	Z, r1

		/* Disable TIMER1 Interrupt Enable */
		TIMSK &= ~(1 << TOIE1) & ~(1 << OCIE1A);
    1ea2:	a9 e5       	ldi	r26, 0x59	; 89
    1ea4:	b0 e0       	ldi	r27, 0x00	; 0
    1ea6:	e9 e5       	ldi	r30, 0x59	; 89
    1ea8:	f0 e0       	ldi	r31, 0x00	; 0
    1eaa:	80 81       	ld	r24, Z
    1eac:	8b 7e       	andi	r24, 0xEB	; 235
    1eae:	8c 93       	st	X, r24

		/* Disable TIMER1 Interrupt Flag, by writing a logic one */
		TIFR |= (1 << OCF1A) | (1 << OCF1B) | (1 << TOV1);
    1eb0:	a8 e5       	ldi	r26, 0x58	; 88
    1eb2:	b0 e0       	ldi	r27, 0x00	; 0
    1eb4:	e8 e5       	ldi	r30, 0x58	; 88
    1eb6:	f0 e0       	ldi	r31, 0x00	; 0
    1eb8:	80 81       	ld	r24, Z
    1eba:	8c 61       	ori	r24, 0x1C	; 28
    1ebc:	8c 93       	st	X, r24
    1ebe:	17 c0       	rjmp	.+46     	; 0x1eee <TIMER_DeInit+0xce>
		break;

	case TIMER_2:

		/* Clear All TIMER2 Register */
		TCNT2 = 0x00;
    1ec0:	e4 e4       	ldi	r30, 0x44	; 68
    1ec2:	f0 e0       	ldi	r31, 0x00	; 0
    1ec4:	10 82       	st	Z, r1
		TCCR2 = 0x00;
    1ec6:	e5 e4       	ldi	r30, 0x45	; 69
    1ec8:	f0 e0       	ldi	r31, 0x00	; 0
    1eca:	10 82       	st	Z, r1
		OCR2  = 0x00;
    1ecc:	e3 e4       	ldi	r30, 0x43	; 67
    1ece:	f0 e0       	ldi	r31, 0x00	; 0
    1ed0:	10 82       	st	Z, r1

		/* Disable TIMER2 Interrupt Flags */
		TIMSK &= ~(1 << TOIE2) & ~(1 << OCIE2);
    1ed2:	a9 e5       	ldi	r26, 0x59	; 89
    1ed4:	b0 e0       	ldi	r27, 0x00	; 0
    1ed6:	e9 e5       	ldi	r30, 0x59	; 89
    1ed8:	f0 e0       	ldi	r31, 0x00	; 0
    1eda:	80 81       	ld	r24, Z
    1edc:	8f 73       	andi	r24, 0x3F	; 63
    1ede:	8c 93       	st	X, r24

		/* Disable TIMER2 Interrupt Flag, by writing a logic one */
		TIFR |= (1 << OCF2) | (1 << TOV2);
    1ee0:	a8 e5       	ldi	r26, 0x58	; 88
    1ee2:	b0 e0       	ldi	r27, 0x00	; 0
    1ee4:	e8 e5       	ldi	r30, 0x58	; 88
    1ee6:	f0 e0       	ldi	r31, 0x00	; 0
    1ee8:	80 81       	ld	r24, Z
    1eea:	80 6c       	ori	r24, 0xC0	; 192
    1eec:	8c 93       	st	X, r24
		break;
	}
}
    1eee:	0f 90       	pop	r0
    1ef0:	0f 90       	pop	r0
    1ef2:	0f 90       	pop	r0
    1ef4:	cf 91       	pop	r28
    1ef6:	df 91       	pop	r29
    1ef8:	08 95       	ret

00001efa <UART_init>:
 * [in/out]		 	None
 *
 * [Returns]:       None
 ******************************************************************************************/
void UART_init(const UART_ConfigType * Config_Ptr)
{
    1efa:	0f 93       	push	r16
    1efc:	1f 93       	push	r17
    1efe:	df 93       	push	r29
    1f00:	cf 93       	push	r28
    1f02:	00 d0       	rcall	.+0      	; 0x1f04 <UART_init+0xa>
    1f04:	00 d0       	rcall	.+0      	; 0x1f06 <UART_init+0xc>
    1f06:	cd b7       	in	r28, 0x3d	; 61
    1f08:	de b7       	in	r29, 0x3e	; 62
    1f0a:	9a 83       	std	Y+2, r25	; 0x02
    1f0c:	89 83       	std	Y+1, r24	; 0x01
	/* Insert the required Mode in U2X bit in UCSRA Register */
	UCSRA = (UCSRA & 0xFD) | ( (Config_Ptr -> uart_Mode) << 1);
    1f0e:	ab e2       	ldi	r26, 0x2B	; 43
    1f10:	b0 e0       	ldi	r27, 0x00	; 0
    1f12:	eb e2       	ldi	r30, 0x2B	; 43
    1f14:	f0 e0       	ldi	r31, 0x00	; 0
    1f16:	80 81       	ld	r24, Z
    1f18:	28 2f       	mov	r18, r24
    1f1a:	2d 7f       	andi	r18, 0xFD	; 253
    1f1c:	e9 81       	ldd	r30, Y+1	; 0x01
    1f1e:	fa 81       	ldd	r31, Y+2	; 0x02
    1f20:	84 81       	ldd	r24, Z+4	; 0x04
    1f22:	88 2f       	mov	r24, r24
    1f24:	90 e0       	ldi	r25, 0x00	; 0
    1f26:	88 0f       	add	r24, r24
    1f28:	99 1f       	adc	r25, r25
    1f2a:	82 2b       	or	r24, r18
    1f2c:	8c 93       	st	X, r24

	/* In Case of Nine Bit Data */
	if(Config_Ptr -> uart_DataBits == NINE_BITS)
    1f2e:	e9 81       	ldd	r30, Y+1	; 0x01
    1f30:	fa 81       	ldd	r31, Y+2	; 0x02
    1f32:	85 81       	ldd	r24, Z+5	; 0x05
    1f34:	87 30       	cpi	r24, 0x07	; 7
    1f36:	a1 f4       	brne	.+40     	; 0x1f60 <UART_init+0x66>
	{
		/* Insert the last bit of required data bits in bit UCSZ2 in UCSRB Register */
		UCSRB = (UCSRB & 0xFB) | ( (Config_Ptr -> uart_DataBits) & 0x04);
    1f38:	aa e2       	ldi	r26, 0x2A	; 42
    1f3a:	b0 e0       	ldi	r27, 0x00	; 0
    1f3c:	ea e2       	ldi	r30, 0x2A	; 42
    1f3e:	f0 e0       	ldi	r31, 0x00	; 0
    1f40:	80 81       	ld	r24, Z
    1f42:	98 2f       	mov	r25, r24
    1f44:	9b 7f       	andi	r25, 0xFB	; 251
    1f46:	e9 81       	ldd	r30, Y+1	; 0x01
    1f48:	fa 81       	ldd	r31, Y+2	; 0x02
    1f4a:	85 81       	ldd	r24, Z+5	; 0x05
    1f4c:	84 70       	andi	r24, 0x04	; 4
    1f4e:	89 2b       	or	r24, r25
    1f50:	8c 93       	st	X, r24

		/* Two bits RXB8 & TXB8 must be Enabled in UCSRB Register */
		UCSRB |= (1 << RXB8) | (1 << TXB8);
    1f52:	aa e2       	ldi	r26, 0x2A	; 42
    1f54:	b0 e0       	ldi	r27, 0x00	; 0
    1f56:	ea e2       	ldi	r30, 0x2A	; 42
    1f58:	f0 e0       	ldi	r31, 0x00	; 0
    1f5a:	80 81       	ld	r24, Z
    1f5c:	83 60       	ori	r24, 0x03	; 3
    1f5e:	8c 93       	st	X, r24

	/*
	 * Enable Transmitter & Receiver to be able to transmit and receive thought
	 * the UART driver
	 */
	UCSRB |= (1 << RXEN) | (1 << TXEN);
    1f60:	aa e2       	ldi	r26, 0x2A	; 42
    1f62:	b0 e0       	ldi	r27, 0x00	; 0
    1f64:	ea e2       	ldi	r30, 0x2A	; 42
    1f66:	f0 e0       	ldi	r31, 0x00	; 0
    1f68:	80 81       	ld	r24, Z
    1f6a:	88 61       	ori	r24, 0x18	; 24
    1f6c:	8c 93       	st	X, r24

	/* URSEL must be one when writing the UCSRC */
	UCSRC |= (1 << URSEL);
    1f6e:	a0 e4       	ldi	r26, 0x40	; 64
    1f70:	b0 e0       	ldi	r27, 0x00	; 0
    1f72:	e0 e4       	ldi	r30, 0x40	; 64
    1f74:	f0 e0       	ldi	r31, 0x00	; 0
    1f76:	80 81       	ld	r24, Z
    1f78:	80 68       	ori	r24, 0x80	; 128
    1f7a:	8c 93       	st	X, r24

	/*
	 * Insert the First two bits of required data bits in bits (UCSZ0, UCSZ1)
	 * in UCSRC Register in case of (5,6,7 or 8) Data bits
	 */
	UCSRC = (UCSRC & 0xF9) | ( (Config_Ptr -> uart_DataBits & 0x03) << 1);
    1f7c:	a0 e4       	ldi	r26, 0x40	; 64
    1f7e:	b0 e0       	ldi	r27, 0x00	; 0
    1f80:	e0 e4       	ldi	r30, 0x40	; 64
    1f82:	f0 e0       	ldi	r31, 0x00	; 0
    1f84:	80 81       	ld	r24, Z
    1f86:	28 2f       	mov	r18, r24
    1f88:	29 7f       	andi	r18, 0xF9	; 249
    1f8a:	e9 81       	ldd	r30, Y+1	; 0x01
    1f8c:	fa 81       	ldd	r31, Y+2	; 0x02
    1f8e:	85 81       	ldd	r24, Z+5	; 0x05
    1f90:	88 2f       	mov	r24, r24
    1f92:	90 e0       	ldi	r25, 0x00	; 0
    1f94:	83 70       	andi	r24, 0x03	; 3
    1f96:	90 70       	andi	r25, 0x00	; 0
    1f98:	88 0f       	add	r24, r24
    1f9a:	99 1f       	adc	r25, r25
    1f9c:	82 2b       	or	r24, r18
    1f9e:	8c 93       	st	X, r24

	/* Insert the required parity type in bits (UPM0, UPM1) in UCSRC Register */
	UCSRC = (UCSRC & 0xCF) | ( (Config_Ptr -> uart_Parity) << 4);
    1fa0:	a0 e4       	ldi	r26, 0x40	; 64
    1fa2:	b0 e0       	ldi	r27, 0x00	; 0
    1fa4:	e0 e4       	ldi	r30, 0x40	; 64
    1fa6:	f0 e0       	ldi	r31, 0x00	; 0
    1fa8:	80 81       	ld	r24, Z
    1faa:	28 2f       	mov	r18, r24
    1fac:	2f 7c       	andi	r18, 0xCF	; 207
    1fae:	e9 81       	ldd	r30, Y+1	; 0x01
    1fb0:	fa 81       	ldd	r31, Y+2	; 0x02
    1fb2:	86 81       	ldd	r24, Z+6	; 0x06
    1fb4:	88 2f       	mov	r24, r24
    1fb6:	90 e0       	ldi	r25, 0x00	; 0
    1fb8:	82 95       	swap	r24
    1fba:	92 95       	swap	r25
    1fbc:	90 7f       	andi	r25, 0xF0	; 240
    1fbe:	98 27       	eor	r25, r24
    1fc0:	80 7f       	andi	r24, 0xF0	; 240
    1fc2:	98 27       	eor	r25, r24
    1fc4:	82 2b       	or	r24, r18
    1fc6:	8c 93       	st	X, r24

	/* Insert the required number of stop bit(s) in bit USBS in UCSRC Register */
	UCSRC = (UCSRC & 0xF7) | ( (Config_Ptr -> uart_StopBit) << 3);
    1fc8:	a0 e4       	ldi	r26, 0x40	; 64
    1fca:	b0 e0       	ldi	r27, 0x00	; 0
    1fcc:	e0 e4       	ldi	r30, 0x40	; 64
    1fce:	f0 e0       	ldi	r31, 0x00	; 0
    1fd0:	80 81       	ld	r24, Z
    1fd2:	28 2f       	mov	r18, r24
    1fd4:	27 7f       	andi	r18, 0xF7	; 247
    1fd6:	e9 81       	ldd	r30, Y+1	; 0x01
    1fd8:	fa 81       	ldd	r31, Y+2	; 0x02
    1fda:	87 81       	ldd	r24, Z+7	; 0x07
    1fdc:	88 2f       	mov	r24, r24
    1fde:	90 e0       	ldi	r25, 0x00	; 0
    1fe0:	88 0f       	add	r24, r24
    1fe2:	99 1f       	adc	r25, r25
    1fe4:	88 0f       	add	r24, r24
    1fe6:	99 1f       	adc	r25, r25
    1fe8:	88 0f       	add	r24, r24
    1fea:	99 1f       	adc	r25, r25
    1fec:	82 2b       	or	r24, r18
    1fee:	8c 93       	st	X, r24
	/*
	 * This switch case is to choose between two Modes (Normal, Double Speed),
	 * then calculate and insert the required Baud rate in First 8 bits from the
	 * BAUD_PRESCALE inside UBRRL and last 4 bits in UBRRH
	 */
	switch(Config_Ptr -> uart_Mode)
    1ff0:	e9 81       	ldd	r30, Y+1	; 0x01
    1ff2:	fa 81       	ldd	r31, Y+2	; 0x02
    1ff4:	84 81       	ldd	r24, Z+4	; 0x04
    1ff6:	28 2f       	mov	r18, r24
    1ff8:	30 e0       	ldi	r19, 0x00	; 0
    1ffa:	3c 83       	std	Y+4, r19	; 0x04
    1ffc:	2b 83       	std	Y+3, r18	; 0x03
    1ffe:	8b 81       	ldd	r24, Y+3	; 0x03
    2000:	9c 81       	ldd	r25, Y+4	; 0x04
    2002:	00 97       	sbiw	r24, 0x00	; 0
    2004:	39 f0       	breq	.+14     	; 0x2014 <UART_init+0x11a>
    2006:	eb 81       	ldd	r30, Y+3	; 0x03
    2008:	fc 81       	ldd	r31, Y+4	; 0x04
    200a:	e1 30       	cpi	r30, 0x01	; 1
    200c:	f1 05       	cpc	r31, r1
    200e:	09 f4       	brne	.+2      	; 0x2012 <UART_init+0x118>
    2010:	56 c0       	rjmp	.+172    	; 0x20be <UART_init+0x1c4>
    2012:	a1 c0       	rjmp	.+322    	; 0x2156 <UART_init+0x25c>
	{
	case NORMAL_SPEED:	UBRRH = ( (((F_CPU / (Config_Ptr -> uart_BaudRate * 16UL))) - 1) >> 8 );
    2014:	00 e4       	ldi	r16, 0x40	; 64
    2016:	10 e0       	ldi	r17, 0x00	; 0
    2018:	e9 81       	ldd	r30, Y+1	; 0x01
    201a:	fa 81       	ldd	r31, Y+2	; 0x02
    201c:	80 81       	ld	r24, Z
    201e:	91 81       	ldd	r25, Z+1	; 0x01
    2020:	a2 81       	ldd	r26, Z+2	; 0x02
    2022:	b3 81       	ldd	r27, Z+3	; 0x03
    2024:	88 0f       	add	r24, r24
    2026:	99 1f       	adc	r25, r25
    2028:	aa 1f       	adc	r26, r26
    202a:	bb 1f       	adc	r27, r27
    202c:	88 0f       	add	r24, r24
    202e:	99 1f       	adc	r25, r25
    2030:	aa 1f       	adc	r26, r26
    2032:	bb 1f       	adc	r27, r27
    2034:	88 0f       	add	r24, r24
    2036:	99 1f       	adc	r25, r25
    2038:	aa 1f       	adc	r26, r26
    203a:	bb 1f       	adc	r27, r27
    203c:	88 0f       	add	r24, r24
    203e:	99 1f       	adc	r25, r25
    2040:	aa 1f       	adc	r26, r26
    2042:	bb 1f       	adc	r27, r27
    2044:	9c 01       	movw	r18, r24
    2046:	ad 01       	movw	r20, r26
    2048:	80 e0       	ldi	r24, 0x00	; 0
    204a:	92 e1       	ldi	r25, 0x12	; 18
    204c:	aa e7       	ldi	r26, 0x7A	; 122
    204e:	b0 e0       	ldi	r27, 0x00	; 0
    2050:	bc 01       	movw	r22, r24
    2052:	cd 01       	movw	r24, r26
    2054:	0e 94 96 11 	call	0x232c	; 0x232c <__udivmodsi4>
    2058:	da 01       	movw	r26, r20
    205a:	c9 01       	movw	r24, r18
    205c:	01 97       	sbiw	r24, 0x01	; 1
    205e:	a1 09       	sbc	r26, r1
    2060:	b1 09       	sbc	r27, r1
    2062:	89 2f       	mov	r24, r25
    2064:	9a 2f       	mov	r25, r26
    2066:	ab 2f       	mov	r26, r27
    2068:	bb 27       	eor	r27, r27
    206a:	f8 01       	movw	r30, r16
    206c:	80 83       	st	Z, r24
						UBRRL = ( ((F_CPU / (Config_Ptr -> uart_BaudRate * 16UL))) - 1 );
    206e:	09 e2       	ldi	r16, 0x29	; 41
    2070:	10 e0       	ldi	r17, 0x00	; 0
    2072:	e9 81       	ldd	r30, Y+1	; 0x01
    2074:	fa 81       	ldd	r31, Y+2	; 0x02
    2076:	80 81       	ld	r24, Z
    2078:	91 81       	ldd	r25, Z+1	; 0x01
    207a:	a2 81       	ldd	r26, Z+2	; 0x02
    207c:	b3 81       	ldd	r27, Z+3	; 0x03
    207e:	88 0f       	add	r24, r24
    2080:	99 1f       	adc	r25, r25
    2082:	aa 1f       	adc	r26, r26
    2084:	bb 1f       	adc	r27, r27
    2086:	88 0f       	add	r24, r24
    2088:	99 1f       	adc	r25, r25
    208a:	aa 1f       	adc	r26, r26
    208c:	bb 1f       	adc	r27, r27
    208e:	88 0f       	add	r24, r24
    2090:	99 1f       	adc	r25, r25
    2092:	aa 1f       	adc	r26, r26
    2094:	bb 1f       	adc	r27, r27
    2096:	88 0f       	add	r24, r24
    2098:	99 1f       	adc	r25, r25
    209a:	aa 1f       	adc	r26, r26
    209c:	bb 1f       	adc	r27, r27
    209e:	9c 01       	movw	r18, r24
    20a0:	ad 01       	movw	r20, r26
    20a2:	80 e0       	ldi	r24, 0x00	; 0
    20a4:	92 e1       	ldi	r25, 0x12	; 18
    20a6:	aa e7       	ldi	r26, 0x7A	; 122
    20a8:	b0 e0       	ldi	r27, 0x00	; 0
    20aa:	bc 01       	movw	r22, r24
    20ac:	cd 01       	movw	r24, r26
    20ae:	0e 94 96 11 	call	0x232c	; 0x232c <__udivmodsi4>
    20b2:	da 01       	movw	r26, r20
    20b4:	c9 01       	movw	r24, r18
    20b6:	81 50       	subi	r24, 0x01	; 1
    20b8:	f8 01       	movw	r30, r16
    20ba:	80 83       	st	Z, r24
    20bc:	4c c0       	rjmp	.+152    	; 0x2156 <UART_init+0x25c>
						break;

	case DOUBLE_SPEED:	UBRRH = ( (((F_CPU / (Config_Ptr -> uart_BaudRate * 8UL))) - 1) >> 8 );
    20be:	00 e4       	ldi	r16, 0x40	; 64
    20c0:	10 e0       	ldi	r17, 0x00	; 0
    20c2:	e9 81       	ldd	r30, Y+1	; 0x01
    20c4:	fa 81       	ldd	r31, Y+2	; 0x02
    20c6:	80 81       	ld	r24, Z
    20c8:	91 81       	ldd	r25, Z+1	; 0x01
    20ca:	a2 81       	ldd	r26, Z+2	; 0x02
    20cc:	b3 81       	ldd	r27, Z+3	; 0x03
    20ce:	88 0f       	add	r24, r24
    20d0:	99 1f       	adc	r25, r25
    20d2:	aa 1f       	adc	r26, r26
    20d4:	bb 1f       	adc	r27, r27
    20d6:	88 0f       	add	r24, r24
    20d8:	99 1f       	adc	r25, r25
    20da:	aa 1f       	adc	r26, r26
    20dc:	bb 1f       	adc	r27, r27
    20de:	88 0f       	add	r24, r24
    20e0:	99 1f       	adc	r25, r25
    20e2:	aa 1f       	adc	r26, r26
    20e4:	bb 1f       	adc	r27, r27
    20e6:	9c 01       	movw	r18, r24
    20e8:	ad 01       	movw	r20, r26
    20ea:	80 e0       	ldi	r24, 0x00	; 0
    20ec:	92 e1       	ldi	r25, 0x12	; 18
    20ee:	aa e7       	ldi	r26, 0x7A	; 122
    20f0:	b0 e0       	ldi	r27, 0x00	; 0
    20f2:	bc 01       	movw	r22, r24
    20f4:	cd 01       	movw	r24, r26
    20f6:	0e 94 96 11 	call	0x232c	; 0x232c <__udivmodsi4>
    20fa:	da 01       	movw	r26, r20
    20fc:	c9 01       	movw	r24, r18
    20fe:	01 97       	sbiw	r24, 0x01	; 1
    2100:	a1 09       	sbc	r26, r1
    2102:	b1 09       	sbc	r27, r1
    2104:	89 2f       	mov	r24, r25
    2106:	9a 2f       	mov	r25, r26
    2108:	ab 2f       	mov	r26, r27
    210a:	bb 27       	eor	r27, r27
    210c:	f8 01       	movw	r30, r16
    210e:	80 83       	st	Z, r24
						UBRRL = ( ((F_CPU / (Config_Ptr -> uart_BaudRate * 8UL))) - 1 );
    2110:	09 e2       	ldi	r16, 0x29	; 41
    2112:	10 e0       	ldi	r17, 0x00	; 0
    2114:	e9 81       	ldd	r30, Y+1	; 0x01
    2116:	fa 81       	ldd	r31, Y+2	; 0x02
    2118:	80 81       	ld	r24, Z
    211a:	91 81       	ldd	r25, Z+1	; 0x01
    211c:	a2 81       	ldd	r26, Z+2	; 0x02
    211e:	b3 81       	ldd	r27, Z+3	; 0x03
    2120:	88 0f       	add	r24, r24
    2122:	99 1f       	adc	r25, r25
    2124:	aa 1f       	adc	r26, r26
    2126:	bb 1f       	adc	r27, r27
    2128:	88 0f       	add	r24, r24
    212a:	99 1f       	adc	r25, r25
    212c:	aa 1f       	adc	r26, r26
    212e:	bb 1f       	adc	r27, r27
    2130:	88 0f       	add	r24, r24
    2132:	99 1f       	adc	r25, r25
    2134:	aa 1f       	adc	r26, r26
    2136:	bb 1f       	adc	r27, r27
    2138:	9c 01       	movw	r18, r24
    213a:	ad 01       	movw	r20, r26
    213c:	80 e0       	ldi	r24, 0x00	; 0
    213e:	92 e1       	ldi	r25, 0x12	; 18
    2140:	aa e7       	ldi	r26, 0x7A	; 122
    2142:	b0 e0       	ldi	r27, 0x00	; 0
    2144:	bc 01       	movw	r22, r24
    2146:	cd 01       	movw	r24, r26
    2148:	0e 94 96 11 	call	0x232c	; 0x232c <__udivmodsi4>
    214c:	da 01       	movw	r26, r20
    214e:	c9 01       	movw	r24, r18
    2150:	81 50       	subi	r24, 0x01	; 1
    2152:	f8 01       	movw	r30, r16
    2154:	80 83       	st	Z, r24
						break;
	}
}
    2156:	0f 90       	pop	r0
    2158:	0f 90       	pop	r0
    215a:	0f 90       	pop	r0
    215c:	0f 90       	pop	r0
    215e:	cf 91       	pop	r28
    2160:	df 91       	pop	r29
    2162:	1f 91       	pop	r17
    2164:	0f 91       	pop	r16
    2166:	08 95       	ret

00002168 <UART_sendByte>:
 * [in/out]		 	None
 *
 * [Returns]:       None
 ****************************************************************************************/
void UART_sendByte(const uint8 data)
{
    2168:	df 93       	push	r29
    216a:	cf 93       	push	r28
    216c:	0f 92       	push	r0
    216e:	cd b7       	in	r28, 0x3d	; 61
    2170:	de b7       	in	r29, 0x3e	; 62
    2172:	89 83       	std	Y+1, r24	; 0x01
	/*
	 * UDRE flag is set when the TX buffer (UDR) is empty and ready for
	 * transmitting a new byte so wait until this flag is set to one
	 */
	while(BIT_IS_CLEAR(UCSRA,UDRE)){}
    2174:	eb e2       	ldi	r30, 0x2B	; 43
    2176:	f0 e0       	ldi	r31, 0x00	; 0
    2178:	80 81       	ld	r24, Z
    217a:	88 2f       	mov	r24, r24
    217c:	90 e0       	ldi	r25, 0x00	; 0
    217e:	80 72       	andi	r24, 0x20	; 32
    2180:	90 70       	andi	r25, 0x00	; 0
    2182:	00 97       	sbiw	r24, 0x00	; 0
    2184:	b9 f3       	breq	.-18     	; 0x2174 <UART_sendByte+0xc>

	/*
	 * Put the required data in the UDR register and it also clear the UDRE
	 * flag as the UDR register is not empty now
	 */
	UDR = data;
    2186:	ec e2       	ldi	r30, 0x2C	; 44
    2188:	f0 e0       	ldi	r31, 0x00	; 0
    218a:	89 81       	ldd	r24, Y+1	; 0x01
    218c:	80 83       	st	Z, r24
}
    218e:	0f 90       	pop	r0
    2190:	cf 91       	pop	r28
    2192:	df 91       	pop	r29
    2194:	08 95       	ret

00002196 <UART_recieveByte>:
 * [in/out]		 	None
 *
 * [Returns]:       The Byte that received through the UART
 ****************************************************************************************/
uint8 UART_recieveByte(void)
{
    2196:	df 93       	push	r29
    2198:	cf 93       	push	r28
    219a:	cd b7       	in	r28, 0x3d	; 61
    219c:	de b7       	in	r29, 0x3e	; 62
	/*
	 * RXC flag is set when the UART receive data so wait until this
	 * flag is set to one
	 */
	while(BIT_IS_CLEAR(UCSRA,RXC)){}
    219e:	eb e2       	ldi	r30, 0x2B	; 43
    21a0:	f0 e0       	ldi	r31, 0x00	; 0
    21a2:	80 81       	ld	r24, Z
    21a4:	88 23       	and	r24, r24
    21a6:	dc f7       	brge	.-10     	; 0x219e <UART_recieveByte+0x8>

	/*
	 * Read the received data from the RX buffer (UDR) and the RXC flag
	 * will be cleared after read this data
	 */
	return UDR;
    21a8:	ec e2       	ldi	r30, 0x2C	; 44
    21aa:	f0 e0       	ldi	r31, 0x00	; 0
    21ac:	80 81       	ld	r24, Z
}
    21ae:	cf 91       	pop	r28
    21b0:	df 91       	pop	r29
    21b2:	08 95       	ret

000021b4 <UART_sendString>:
 * [in/out]		 	None
 *
 * [Returns]:       None
 ****************************************************************************************/
void UART_sendString(const uint8 * Str)
{
    21b4:	df 93       	push	r29
    21b6:	cf 93       	push	r28
    21b8:	00 d0       	rcall	.+0      	; 0x21ba <UART_sendString+0x6>
    21ba:	0f 92       	push	r0
    21bc:	cd b7       	in	r28, 0x3d	; 61
    21be:	de b7       	in	r29, 0x3e	; 62
    21c0:	9b 83       	std	Y+3, r25	; 0x03
    21c2:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    21c4:	19 82       	std	Y+1, r1	; 0x01
    21c6:	0e c0       	rjmp	.+28     	; 0x21e4 <UART_sendString+0x30>

	while(Str[i] != '\0')
	{
		UART_sendByte(Str[i]);
    21c8:	89 81       	ldd	r24, Y+1	; 0x01
    21ca:	28 2f       	mov	r18, r24
    21cc:	30 e0       	ldi	r19, 0x00	; 0
    21ce:	8a 81       	ldd	r24, Y+2	; 0x02
    21d0:	9b 81       	ldd	r25, Y+3	; 0x03
    21d2:	fc 01       	movw	r30, r24
    21d4:	e2 0f       	add	r30, r18
    21d6:	f3 1f       	adc	r31, r19
    21d8:	80 81       	ld	r24, Z
    21da:	0e 94 b4 10 	call	0x2168	; 0x2168 <UART_sendByte>
		i++;
    21de:	89 81       	ldd	r24, Y+1	; 0x01
    21e0:	8f 5f       	subi	r24, 0xFF	; 255
    21e2:	89 83       	std	Y+1, r24	; 0x01
 ****************************************************************************************/
void UART_sendString(const uint8 * Str)
{
	uint8 i = 0;

	while(Str[i] != '\0')
    21e4:	89 81       	ldd	r24, Y+1	; 0x01
    21e6:	28 2f       	mov	r18, r24
    21e8:	30 e0       	ldi	r19, 0x00	; 0
    21ea:	8a 81       	ldd	r24, Y+2	; 0x02
    21ec:	9b 81       	ldd	r25, Y+3	; 0x03
    21ee:	fc 01       	movw	r30, r24
    21f0:	e2 0f       	add	r30, r18
    21f2:	f3 1f       	adc	r31, r19
    21f4:	80 81       	ld	r24, Z
    21f6:	88 23       	and	r24, r24
    21f8:	39 f7       	brne	.-50     	; 0x21c8 <UART_sendString+0x14>
	{
		UART_sendByte(Str[i]);
		i++;
	}
}
    21fa:	0f 90       	pop	r0
    21fc:	0f 90       	pop	r0
    21fe:	0f 90       	pop	r0
    2200:	cf 91       	pop	r28
    2202:	df 91       	pop	r29
    2204:	08 95       	ret

00002206 <UART_receiveString>:
 * [in/out]		 	None
 *
 * [Returns]:       None
 ****************************************************************************************/
void UART_receiveString(uint8 * Str)
{
    2206:	0f 93       	push	r16
    2208:	1f 93       	push	r17
    220a:	df 93       	push	r29
    220c:	cf 93       	push	r28
    220e:	00 d0       	rcall	.+0      	; 0x2210 <UART_receiveString+0xa>
    2210:	0f 92       	push	r0
    2212:	cd b7       	in	r28, 0x3d	; 61
    2214:	de b7       	in	r29, 0x3e	; 62
    2216:	9b 83       	std	Y+3, r25	; 0x03
    2218:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    221a:	19 82       	std	Y+1, r1	; 0x01

	Str[i] = UART_recieveByte();
    221c:	89 81       	ldd	r24, Y+1	; 0x01
    221e:	28 2f       	mov	r18, r24
    2220:	30 e0       	ldi	r19, 0x00	; 0
    2222:	8a 81       	ldd	r24, Y+2	; 0x02
    2224:	9b 81       	ldd	r25, Y+3	; 0x03
    2226:	8c 01       	movw	r16, r24
    2228:	02 0f       	add	r16, r18
    222a:	13 1f       	adc	r17, r19
    222c:	0e 94 cb 10 	call	0x2196	; 0x2196 <UART_recieveByte>
    2230:	f8 01       	movw	r30, r16
    2232:	80 83       	st	Z, r24
    2234:	0f c0       	rjmp	.+30     	; 0x2254 <UART_receiveString+0x4e>
	while(Str[i] != '#')
	{
		i++;
    2236:	89 81       	ldd	r24, Y+1	; 0x01
    2238:	8f 5f       	subi	r24, 0xFF	; 255
    223a:	89 83       	std	Y+1, r24	; 0x01
		Str[i] = UART_recieveByte();
    223c:	89 81       	ldd	r24, Y+1	; 0x01
    223e:	28 2f       	mov	r18, r24
    2240:	30 e0       	ldi	r19, 0x00	; 0
    2242:	8a 81       	ldd	r24, Y+2	; 0x02
    2244:	9b 81       	ldd	r25, Y+3	; 0x03
    2246:	8c 01       	movw	r16, r24
    2248:	02 0f       	add	r16, r18
    224a:	13 1f       	adc	r17, r19
    224c:	0e 94 cb 10 	call	0x2196	; 0x2196 <UART_recieveByte>
    2250:	f8 01       	movw	r30, r16
    2252:	80 83       	st	Z, r24
void UART_receiveString(uint8 * Str)
{
	uint8 i = 0;

	Str[i] = UART_recieveByte();
	while(Str[i] != '#')
    2254:	89 81       	ldd	r24, Y+1	; 0x01
    2256:	28 2f       	mov	r18, r24
    2258:	30 e0       	ldi	r19, 0x00	; 0
    225a:	8a 81       	ldd	r24, Y+2	; 0x02
    225c:	9b 81       	ldd	r25, Y+3	; 0x03
    225e:	fc 01       	movw	r30, r24
    2260:	e2 0f       	add	r30, r18
    2262:	f3 1f       	adc	r31, r19
    2264:	80 81       	ld	r24, Z
    2266:	83 32       	cpi	r24, 0x23	; 35
    2268:	31 f7       	brne	.-52     	; 0x2236 <UART_receiveString+0x30>
	{
		i++;
		Str[i] = UART_recieveByte();
	}
	Str[i] = '\0';
    226a:	89 81       	ldd	r24, Y+1	; 0x01
    226c:	28 2f       	mov	r18, r24
    226e:	30 e0       	ldi	r19, 0x00	; 0
    2270:	8a 81       	ldd	r24, Y+2	; 0x02
    2272:	9b 81       	ldd	r25, Y+3	; 0x03
    2274:	fc 01       	movw	r30, r24
    2276:	e2 0f       	add	r30, r18
    2278:	f3 1f       	adc	r31, r19
    227a:	10 82       	st	Z, r1
}
    227c:	0f 90       	pop	r0
    227e:	0f 90       	pop	r0
    2280:	0f 90       	pop	r0
    2282:	cf 91       	pop	r28
    2284:	df 91       	pop	r29
    2286:	1f 91       	pop	r17
    2288:	0f 91       	pop	r16
    228a:	08 95       	ret

0000228c <UART_setParityType>:
 * [in/out]		 	None
 *
 * [Returns]:       None
 ****************************************************************************************/
void UART_setParityType(const UART_ParityType a_parityType)
{
    228c:	df 93       	push	r29
    228e:	cf 93       	push	r28
    2290:	0f 92       	push	r0
    2292:	cd b7       	in	r28, 0x3d	; 61
    2294:	de b7       	in	r29, 0x3e	; 62
    2296:	89 83       	std	Y+1, r24	; 0x01
	/* Insert the required parity type in bits (UPM0, UPM1) in UCSRC Register */
	UCSRC = (UCSRC & 0xCF) | (a_parityType << 4);
    2298:	a0 e4       	ldi	r26, 0x40	; 64
    229a:	b0 e0       	ldi	r27, 0x00	; 0
    229c:	e0 e4       	ldi	r30, 0x40	; 64
    229e:	f0 e0       	ldi	r31, 0x00	; 0
    22a0:	80 81       	ld	r24, Z
    22a2:	28 2f       	mov	r18, r24
    22a4:	2f 7c       	andi	r18, 0xCF	; 207
    22a6:	89 81       	ldd	r24, Y+1	; 0x01
    22a8:	88 2f       	mov	r24, r24
    22aa:	90 e0       	ldi	r25, 0x00	; 0
    22ac:	82 95       	swap	r24
    22ae:	92 95       	swap	r25
    22b0:	90 7f       	andi	r25, 0xF0	; 240
    22b2:	98 27       	eor	r25, r24
    22b4:	80 7f       	andi	r24, 0xF0	; 240
    22b6:	98 27       	eor	r25, r24
    22b8:	82 2b       	or	r24, r18
    22ba:	8c 93       	st	X, r24
}
    22bc:	0f 90       	pop	r0
    22be:	cf 91       	pop	r28
    22c0:	df 91       	pop	r29
    22c2:	08 95       	ret

000022c4 <UART_setStopBit>:
 * [in/out]		 	None
 *
 * [Returns]:       None
 ****************************************************************************************/
void UART_setStopBit(const UART_StopBit a_stopBit)
{
    22c4:	df 93       	push	r29
    22c6:	cf 93       	push	r28
    22c8:	0f 92       	push	r0
    22ca:	cd b7       	in	r28, 0x3d	; 61
    22cc:	de b7       	in	r29, 0x3e	; 62
    22ce:	89 83       	std	Y+1, r24	; 0x01
	/* Insert the required number of stop bit(s) in bit USBS in UCSRC Register */
	UCSRC = (UCSRC & 0xF7) | ( a_stopBit << 3);
    22d0:	a0 e4       	ldi	r26, 0x40	; 64
    22d2:	b0 e0       	ldi	r27, 0x00	; 0
    22d4:	e0 e4       	ldi	r30, 0x40	; 64
    22d6:	f0 e0       	ldi	r31, 0x00	; 0
    22d8:	80 81       	ld	r24, Z
    22da:	28 2f       	mov	r18, r24
    22dc:	27 7f       	andi	r18, 0xF7	; 247
    22de:	89 81       	ldd	r24, Y+1	; 0x01
    22e0:	88 2f       	mov	r24, r24
    22e2:	90 e0       	ldi	r25, 0x00	; 0
    22e4:	88 0f       	add	r24, r24
    22e6:	99 1f       	adc	r25, r25
    22e8:	88 0f       	add	r24, r24
    22ea:	99 1f       	adc	r25, r25
    22ec:	88 0f       	add	r24, r24
    22ee:	99 1f       	adc	r25, r25
    22f0:	82 2b       	or	r24, r18
    22f2:	8c 93       	st	X, r24
}
    22f4:	0f 90       	pop	r0
    22f6:	cf 91       	pop	r28
    22f8:	df 91       	pop	r29
    22fa:	08 95       	ret

000022fc <UART_DeInit>:
 * [in/out]		 	None
 *
 * [Returns]:       None
 ****************************************************************************************/
void UART_DeInit(void)
{
    22fc:	df 93       	push	r29
    22fe:	cf 93       	push	r28
    2300:	cd b7       	in	r28, 0x3d	; 61
    2302:	de b7       	in	r29, 0x3e	; 62
	/* Reset All UART Registers to its initial value */
	UCSRA = 0x20;
    2304:	eb e2       	ldi	r30, 0x2B	; 43
    2306:	f0 e0       	ldi	r31, 0x00	; 0
    2308:	80 e2       	ldi	r24, 0x20	; 32
    230a:	80 83       	st	Z, r24
	UCSRB = 0;
    230c:	ea e2       	ldi	r30, 0x2A	; 42
    230e:	f0 e0       	ldi	r31, 0x00	; 0
    2310:	10 82       	st	Z, r1
	UCSRC = 0x86;
    2312:	e0 e4       	ldi	r30, 0x40	; 64
    2314:	f0 e0       	ldi	r31, 0x00	; 0
    2316:	86 e8       	ldi	r24, 0x86	; 134
    2318:	80 83       	st	Z, r24

	/* Clear UART Baud Rate Registers */
	UBRRH = 0;
    231a:	e0 e4       	ldi	r30, 0x40	; 64
    231c:	f0 e0       	ldi	r31, 0x00	; 0
    231e:	10 82       	st	Z, r1
	UBRRL = 0;
    2320:	e9 e2       	ldi	r30, 0x29	; 41
    2322:	f0 e0       	ldi	r31, 0x00	; 0
    2324:	10 82       	st	Z, r1
}
    2326:	cf 91       	pop	r28
    2328:	df 91       	pop	r29
    232a:	08 95       	ret

0000232c <__udivmodsi4>:
    232c:	a1 e2       	ldi	r26, 0x21	; 33
    232e:	1a 2e       	mov	r1, r26
    2330:	aa 1b       	sub	r26, r26
    2332:	bb 1b       	sub	r27, r27
    2334:	fd 01       	movw	r30, r26
    2336:	0d c0       	rjmp	.+26     	; 0x2352 <__udivmodsi4_ep>

00002338 <__udivmodsi4_loop>:
    2338:	aa 1f       	adc	r26, r26
    233a:	bb 1f       	adc	r27, r27
    233c:	ee 1f       	adc	r30, r30
    233e:	ff 1f       	adc	r31, r31
    2340:	a2 17       	cp	r26, r18
    2342:	b3 07       	cpc	r27, r19
    2344:	e4 07       	cpc	r30, r20
    2346:	f5 07       	cpc	r31, r21
    2348:	20 f0       	brcs	.+8      	; 0x2352 <__udivmodsi4_ep>
    234a:	a2 1b       	sub	r26, r18
    234c:	b3 0b       	sbc	r27, r19
    234e:	e4 0b       	sbc	r30, r20
    2350:	f5 0b       	sbc	r31, r21

00002352 <__udivmodsi4_ep>:
    2352:	66 1f       	adc	r22, r22
    2354:	77 1f       	adc	r23, r23
    2356:	88 1f       	adc	r24, r24
    2358:	99 1f       	adc	r25, r25
    235a:	1a 94       	dec	r1
    235c:	69 f7       	brne	.-38     	; 0x2338 <__udivmodsi4_loop>
    235e:	60 95       	com	r22
    2360:	70 95       	com	r23
    2362:	80 95       	com	r24
    2364:	90 95       	com	r25
    2366:	9b 01       	movw	r18, r22
    2368:	ac 01       	movw	r20, r24
    236a:	bd 01       	movw	r22, r26
    236c:	cf 01       	movw	r24, r30
    236e:	08 95       	ret

00002370 <__prologue_saves__>:
    2370:	2f 92       	push	r2
    2372:	3f 92       	push	r3
    2374:	4f 92       	push	r4
    2376:	5f 92       	push	r5
    2378:	6f 92       	push	r6
    237a:	7f 92       	push	r7
    237c:	8f 92       	push	r8
    237e:	9f 92       	push	r9
    2380:	af 92       	push	r10
    2382:	bf 92       	push	r11
    2384:	cf 92       	push	r12
    2386:	df 92       	push	r13
    2388:	ef 92       	push	r14
    238a:	ff 92       	push	r15
    238c:	0f 93       	push	r16
    238e:	1f 93       	push	r17
    2390:	cf 93       	push	r28
    2392:	df 93       	push	r29
    2394:	cd b7       	in	r28, 0x3d	; 61
    2396:	de b7       	in	r29, 0x3e	; 62
    2398:	ca 1b       	sub	r28, r26
    239a:	db 0b       	sbc	r29, r27
    239c:	0f b6       	in	r0, 0x3f	; 63
    239e:	f8 94       	cli
    23a0:	de bf       	out	0x3e, r29	; 62
    23a2:	0f be       	out	0x3f, r0	; 63
    23a4:	cd bf       	out	0x3d, r28	; 61
    23a6:	09 94       	ijmp

000023a8 <__epilogue_restores__>:
    23a8:	2a 88       	ldd	r2, Y+18	; 0x12
    23aa:	39 88       	ldd	r3, Y+17	; 0x11
    23ac:	48 88       	ldd	r4, Y+16	; 0x10
    23ae:	5f 84       	ldd	r5, Y+15	; 0x0f
    23b0:	6e 84       	ldd	r6, Y+14	; 0x0e
    23b2:	7d 84       	ldd	r7, Y+13	; 0x0d
    23b4:	8c 84       	ldd	r8, Y+12	; 0x0c
    23b6:	9b 84       	ldd	r9, Y+11	; 0x0b
    23b8:	aa 84       	ldd	r10, Y+10	; 0x0a
    23ba:	b9 84       	ldd	r11, Y+9	; 0x09
    23bc:	c8 84       	ldd	r12, Y+8	; 0x08
    23be:	df 80       	ldd	r13, Y+7	; 0x07
    23c0:	ee 80       	ldd	r14, Y+6	; 0x06
    23c2:	fd 80       	ldd	r15, Y+5	; 0x05
    23c4:	0c 81       	ldd	r16, Y+4	; 0x04
    23c6:	1b 81       	ldd	r17, Y+3	; 0x03
    23c8:	aa 81       	ldd	r26, Y+2	; 0x02
    23ca:	b9 81       	ldd	r27, Y+1	; 0x01
    23cc:	ce 0f       	add	r28, r30
    23ce:	d1 1d       	adc	r29, r1
    23d0:	0f b6       	in	r0, 0x3f	; 63
    23d2:	f8 94       	cli
    23d4:	de bf       	out	0x3e, r29	; 62
    23d6:	0f be       	out	0x3f, r0	; 63
    23d8:	cd bf       	out	0x3d, r28	; 61
    23da:	ed 01       	movw	r28, r26
    23dc:	08 95       	ret

000023de <_exit>:
    23de:	f8 94       	cli

000023e0 <__stop_program>:
    23e0:	ff cf       	rjmp	.-2      	; 0x23e0 <__stop_program>
